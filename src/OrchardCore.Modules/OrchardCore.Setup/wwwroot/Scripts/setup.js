/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * jQuery JavaScript Library v3.6.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-08-26T17:52Z
 */
(function (global, factory) {
  "use strict";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.6.1",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.6
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2021-02-16
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
    identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
    // or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
        funescape = function funescape(escape, nonHex) {
      var high = "0x" + escape.slice(1) - 0x10000;
      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
      // Support: IE <=11+
      // For values outside the Basic Multilingual Plane (BMP), manually construct a
      // surrogate pair
      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        inDisabledFieldset = addCombinator(function (elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          pushNative.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        setDocument(context);
        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
          // Exclude object elements
          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
            newSelector = selector;
            newContext = context; // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.

            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.

              if (newContext !== context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = nid.replace(rcssescape, fcssescape);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(",");
            }

            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      var namespace = elem && elem.namespaceURI,
          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8
      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
      // https://bugs.jquery.com/ticket/4833

      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
      // Safari 4 - 5 only, Opera <=11.6 - 12.x only
      // IE/Edge & older browsers don't support the :scope pseudo-class.
      // Support: Safari 6.0 only
      // Safari 6.0 supports :scope but it's an alias of :root there.


      support.scope = assert(function (el) {
        docElem.appendChild(el).appendChild(document.createElement("div"));
        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
      });
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)

      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          var input; // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359

          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Support: IE 11+, Edge 15 - 18+
          // IE 11/Edge don't find elements on a `[name='']` query in some cases.
          // Adding a temporary attribute to the document before the selection works
          // around the issue.
          // Interestingly, IE 10 & older don't seem to have the issue.


          input = document.createElement("input");
          input.setAttribute("name", "");
          el.appendChild(input);

          if (!el.querySelectorAll("[name='']").length) {
            rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          } // Support: Firefox <=3.6 - 5 only
          // Old Firefox doesn't throw on a badly-escaped identifier.


          el.querySelectorAll("\\\f");
          rbuggyQSA.push("[\\r\\n\\f]");
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: Opera 10 - 11 only
          // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq


        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
            return -1;
          } // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq


          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.

          /* eslint-disable eqeqeq */
          return a == document ? -1 : b == document ? 1 :
          /* eslint-enable eqeqeq */
          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.

        /* eslint-disable eqeqeq */
        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
        /* eslint-enable eqeqeq */
        0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      setDocument(elem);

      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            /* eslint-disable max-len */

            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
            /* eslint-enable max-len */
          };
        },
        "CHILD": function CHILD(type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument > length ? length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          outermostContext = context == document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0; // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq

            if (!context && elem.ownerDocument != document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, _name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
  // Strict HTML recognition (trac-11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null && // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function
          /* fnDone, fnFail, fnProgress */
        pipe() {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (_i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the primary Deferred
      primary = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            primary.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;

  var isAttached = function isAttached(elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.


  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.

    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })(); // We have to close these tags to support XHTML (trac-13200)


  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td; // Support: IE <=9 only

  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (trac-12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Only attach events to objects that accept data

      if (!acceptData(elem)) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(nativeEvent),
          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (trac-13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }

      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault(); // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.

              return result && result.value;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger( // Support: IE <=9 - 11+
            // Extend with the prototype to reset the above stopImmediatePropagation()
            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
          }); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      // Suppress native focus or blur if we're currently inside
      // a leveraged native-event stack
      _default: function _default(event) {
        return dataPriv.get(event.target, type);
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
  var rcustomProp = /^--/;

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function swap(elem, options, callback) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");
  var whitespace = "[\\x20\\t\\r\\n\\f]";
  var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableTrDimensionsVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;

        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "border:1px solid"; // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.

          tr.style.height = "1px";
          trChild.style.height = "9px"; // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.

          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }

        return reliableTrDimensionsVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        isCustomProp = rcustomProp.test(name),
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name]; // trim whitespace for custom property (issue gh-4926)

      if (isCustomProp) {
        // rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, "$1");
      }

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var _final = jQuery.cssProps[name] || vendorProps[name];

    if (_final) {
      return _final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.


    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" || // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (trac-7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug trac-9237

          type = "number";
        } // Make sure that null and NaN values aren't set (trac-7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              if (cur.indexOf(" " + className + " ") < 0) {
                cur += className + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this); // This expression is here for better compressibility (see addClass)

          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i]; // Remove *all* instances

              while (cur.indexOf(" " + className + " ") > -1) {
                cur = cur.replace(" " + className + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var classNames,
          className,
          i,
          self,
          type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      classNames = classesToArray(value);
      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = jQuery(this);

          for (i = 0; i < classNames.length; i++) {
            className = classNames[i]; // Check each className given, space separated list

            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (trac-14686, trac-14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];

    if (!xml || parserErrorElem) {
      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }

    return xml;
  };

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // trac-7653, trac-8125, trac-8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
              }
            }

            match = responseHeaders[key.toLowerCase() + " "];
          }

          return match == null ? null : match.join(", ");
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket trac-12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // trac-9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Use a noop converter for missing script but not if jsonp


        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });
  jQuery.ajaxPrefilter(function (s) {
    var i;

    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function textScript() {}
      },
      dataFilter: function dataFilter(response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // trac-1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see trac-8605, trac-14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };
  /**
   * Load a url into a page
   */


  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  }); // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.

  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };

  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "$1");
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)


  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * @popperjs/core v2.11.6 - MIT License
 */
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Popper = {}));
})(this, function (exports) {
  'use strict';

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  } // means it doesn't take into account transforms.


  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }
  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */


  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];

  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  } // of the `<html>` and `<body>` rect bounds if horizontally scrollable


  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var passive = {
    passive: true
  };

  function effect$2(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };
  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  }; // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles']
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };
  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };

  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };

  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }

  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };
  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  exports.applyStyles = applyStyles$1;
  exports.arrow = arrow$1;
  exports.computeStyles = computeStyles$1;
  exports.createPopper = createPopper;
  exports.createPopperLite = createPopper$1;
  exports.defaultModifiers = defaultModifiers;
  exports.detectOverflow = detectOverflow;
  exports.eventListeners = eventListeners;
  exports.flip = flip$1;
  exports.hide = hide$1;
  exports.offset = offset$1;
  exports.popperGenerator = popperGenerator;
  exports.popperOffsets = popperOffsets$1;
  exports.preventOverflow = preventOverflow$1;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
  * Bootstrap v5.2.1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) : typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory(global.Popper));
})(this, function (Popper) {
  'use strict';

  var _KEY_TO_DIRECTION;

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null, _defineProperty({}, Symbol.toStringTag, {
      value: 'Module'
    }));

    if (e) {
      var _loop = function _loop(k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function get() {
              return e[k];
            }
          });
        }
      };

      for (var k in e) {
        _loop(k);
      }
    }

    n["default"] = e;
    return Object.freeze(n);
  }

  var Popper__namespace = /*#__PURE__*/_interopNamespace(Popper);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000;
  var TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)

  var toType = function toType(object) {
    if (object === null || object === undefined) {
      return "".concat(object);
    }

    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  /**
   * Public Util API
   */


  var getUID = function getUID(prefix) {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));

    return prefix;
  };

  var getSelector = function getSelector(element) {
    var selector = element.getAttribute('data-bs-target');

    if (!selector || selector === '#') {
      var hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273

      if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {
        return null;
      } // Just in case some CMS puts out a full URL with the anchor appended


      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
        hrefAttribute = "#".concat(hrefAttribute.split('#')[1]);
      }

      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }

    return selector;
  };

  var getSelectorFromElement = function getSelectorFromElement(element) {
    var selector = getSelector(element);

    if (selector) {
      return document.querySelector(selector) ? selector : null;
    }

    return null;
  };

  var getElementFromSelector = function getElementFromSelector(element) {
    var selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };

  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
    if (!element) {
      return 0;
    } // Get transition-duration of the element


    var _window$getComputedSt = window.getComputedStyle(element),
        transitionDuration = _window$getComputedSt.transitionDuration,
        transitionDelay = _window$getComputedSt.transitionDelay;

    var floatTransitionDuration = Number.parseFloat(transitionDuration);
    var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    } // If multiple durations are defined, take the first


    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };

  var triggerTransitionEnd = function triggerTransitionEnd(element) {
    element.dispatchEvent(new Event(TRANSITION_END));
  };

  var isElement = function isElement(object) {
    if (!object || _typeof(object) !== 'object') {
      return false;
    }

    if (typeof object.jquery !== 'undefined') {
      object = object[0];
    }

    return typeof object.nodeType !== 'undefined';
  };

  var getElement = function getElement(object) {
    // it's a jQuery object or a node element
    if (isElement(object)) {
      return object.jquery ? object[0] : object;
    }

    if (typeof object === 'string' && object.length > 0) {
      return document.querySelector(object);
    }

    return null;
  };

  var isVisible = function isVisible(element) {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }

    var elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed

    var closedDetails = element.closest('details:not([open])');

    if (!closedDetails) {
      return elementIsVisible;
    }

    if (closedDetails !== element) {
      var summary = element.closest('summary');

      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }

      if (summary === null) {
        return false;
      }
    }

    return elementIsVisible;
  };

  var isDisabled = function isDisabled(element) {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }

    if (element.classList.contains('disabled')) {
      return true;
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };

  var findShadowRoot = function findShadowRoot(element) {
    if (!document.documentElement.attachShadow) {
      return null;
    } // Can find the shadow root otherwise it'll return the document


    if (typeof element.getRootNode === 'function') {
      var root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }

    if (element instanceof ShadowRoot) {
      return element;
    } // when we don't find a shadow root


    if (!element.parentNode) {
      return null;
    }

    return findShadowRoot(element.parentNode);
  };

  var noop = function noop() {};
  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */


  var reflow = function reflow(element) {
    element.offsetHeight; // eslint-disable-line no-unused-expressions
  };

  var getjQuery = function getjQuery() {
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return window.jQuery;
    }

    return null;
  };

  var DOMContentLoadedCallbacks = [];

  var onDOMContentLoaded = function onDOMContentLoaded(callback) {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', function () {
          var _iterator = _createForOfIteratorHelper(DOMContentLoadedCallbacks),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _callback = _step.value;

              _callback();
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      }

      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };

  var isRTL = function isRTL() {
    return document.documentElement.dir === 'rtl';
  };

  var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
    onDOMContentLoaded(function () {
      var $ = getjQuery();
      /* istanbul ignore if */

      if ($) {
        var name = plugin.NAME;
        var JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;

        $.fn[name].noConflict = function () {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };

  var execute = function execute(callback) {
    if (typeof callback === 'function') {
      callback();
    }
  };

  var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {
    var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (!waitForTransition) {
      execute(callback);
      return;
    }

    var durationPadding = 5;
    var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    var called = false;

    var handler = function handler(_ref) {
      var target = _ref.target;

      if (target !== transitionElement) {
        return;
      }

      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };

    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(function () {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */


  var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {
    var listLength = list.length;
    var index = list.indexOf(activeElement); // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed

    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }

    index += shouldGetNext ? 1 : -1;

    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }

    return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {}; // Events storage

  var uidEvent = 1;
  var customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
  /**
   * Private methods
   */

  function makeEventUid(element, uid) {
    return uid && "".concat(uid, "::").concat(uidEvent++) || element.uidEvent || uidEvent++;
  }

  function getElementEvents(element) {
    var uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }

  function bootstrapHandler(element, fn) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });

      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }

      return fn.apply(element, [event]);
    };
  }

  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      var domElements = element.querySelectorAll(selector);

      for (var target = event.target; target && target !== this; target = target.parentNode) {
        var _iterator2 = _createForOfIteratorHelper(domElements),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var domElement = _step2.value;

            if (domElement !== target) {
              continue;
            }

            hydrateObj(event, {
              delegateTarget: target
            });

            if (handler.oneOff) {
              EventHandler.off(element, event.type, selector, fn);
            }

            return fn.apply(target, [event]);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    };
  }

  function findHandler(events, callable) {
    var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return Object.values(events).find(function (event) {
      return event.callable === callable && event.delegationSelector === delegationSelector;
    });
  }

  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    var isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check

    var callable = isDelegated ? delegationFunction : handler || delegationFunction;
    var typeEvent = getTypeEvent(originalTypeEvent);

    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }

    return [isDelegated, callable, typeEvent];
  }

  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    var _normalizeParameters = normalizeParameters(originalTypeEvent, handler, delegationFunction),
        _normalizeParameters2 = _slicedToArray(_normalizeParameters, 3),
        isDelegated = _normalizeParameters2[0],
        callable = _normalizeParameters2[1],
        typeEvent = _normalizeParameters2[2]; // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does


    if (originalTypeEvent in customEvents) {
      var wrapFunction = function wrapFunction(fn) {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };

      callable = wrapFunction(callable);
    }

    var events = getElementEvents(element);
    var handlers = events[typeEvent] || (events[typeEvent] = {});
    var previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);

    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }

    var uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    var fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn.delegationSelector = isDelegated ? handler : null;
    fn.callable = callable;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, isDelegated);
  }

  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    var fn = findHandler(events[typeEvent], handler, delegationSelector);

    if (!fn) {
      return;
    }

    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }

  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    var storeElementEvent = events[typeEvent] || {};

    for (var _i2 = 0, _Object$keys = Object.keys(storeElementEvent); _i2 < _Object$keys.length; _i2++) {
      var handlerKey = _Object$keys[_i2];

      if (handlerKey.includes(namespace)) {
        var event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }

  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }

  var EventHandler = {
    on: function on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one: function one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off: function off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }

      var _normalizeParameters3 = normalizeParameters(originalTypeEvent, handler, delegationFunction),
          _normalizeParameters4 = _slicedToArray(_normalizeParameters3, 3),
          isDelegated = _normalizeParameters4[0],
          callable = _normalizeParameters4[1],
          typeEvent = _normalizeParameters4[2];

      var inNamespace = typeEvent !== originalTypeEvent;
      var events = getElementEvents(element);
      var storeElementEvent = events[typeEvent] || {};
      var isNamespace = originalTypeEvent.startsWith('.');

      if (typeof callable !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!Object.keys(storeElementEvent).length) {
          return;
        }

        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return;
      }

      if (isNamespace) {
        for (var _i3 = 0, _Object$keys2 = Object.keys(events); _i3 < _Object$keys2.length; _i3++) {
          var elementEvent = _Object$keys2[_i3];
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }

      for (var _i4 = 0, _Object$keys3 = Object.keys(storeElementEvent); _i4 < _Object$keys3.length; _i4++) {
        var keyHandlers = _Object$keys3[_i4];
        var handlerKey = keyHandlers.replace(stripUidRegex, '');

        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          var event = storeElementEvent[keyHandlers];
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger: function trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }

      var $ = getjQuery();
      var typeEvent = getTypeEvent(event);
      var inNamespace = event !== typeEvent;
      var jQueryEvent = null;
      var bubbles = true;
      var nativeDispatch = true;
      var defaultPrevented = false;

      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }

      var evt = new Event(event, {
        bubbles: bubbles,
        cancelable: true
      });
      evt = hydrateObj(evt, args);

      if (defaultPrevented) {
        evt.preventDefault();
      }

      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }

      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }

      return evt;
    }
  };

  function hydrateObj(obj, meta) {
    var _loop2 = function _loop2() {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get: function get() {
            return value;
          }
        });
      }
    };

    for (var _i5 = 0, _Object$entries = Object.entries(meta || {}); _i5 < _Object$entries.length; _i5++) {
      _loop2();
    }

    return obj;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var elementMap = new Map();
  var Data = {
    set: function set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }

      var instanceMap = elementMap.get(element); // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used

      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0], "."));
        return;
      }

      instanceMap.set(key, instance);
    },
    get: function get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }

      return null;
    },
    remove: function remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }

      var instanceMap = elementMap.get(element);
      instanceMap["delete"](key); // free up element references if there are no instances left for an element

      if (instanceMap.size === 0) {
        elementMap["delete"](element);
      }
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  function normalizeData(value) {
    if (value === 'true') {
      return true;
    }

    if (value === 'false') {
      return false;
    }

    if (value === Number(value).toString()) {
      return Number(value);
    }

    if (value === '' || value === 'null') {
      return null;
    }

    if (typeof value !== 'string') {
      return value;
    }

    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }

  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, function (chr) {
      return "-".concat(chr.toLowerCase());
    });
  }

  var Manipulator = {
    setDataAttribute: function setDataAttribute(element, key, value) {
      element.setAttribute("data-bs-".concat(normalizeDataKey(key)), value);
    },
    removeDataAttribute: function removeDataAttribute(element, key) {
      element.removeAttribute("data-bs-".concat(normalizeDataKey(key)));
    },
    getDataAttributes: function getDataAttributes(element) {
      if (!element) {
        return {};
      }

      var attributes = {};
      var bsKeys = Object.keys(element.dataset).filter(function (key) {
        return key.startsWith('bs') && !key.startsWith('bsConfig');
      });

      var _iterator3 = _createForOfIteratorHelper(bsKeys),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var key = _step3.value;
          var pureKey = key.replace(/^bs/, '');
          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
          attributes[pureKey] = normalizeData(element.dataset[key]);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return attributes;
    },
    getDataAttribute: function getDataAttribute(element, key) {
      return normalizeData(element.getAttribute("data-bs-".concat(normalizeDataKey(key))));
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/config.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Class definition
   */

  var Config = /*#__PURE__*/function () {
    function Config() {
      _classCallCheck(this, Config);
    }

    _createClass(Config, [{
      key: "_getConfig",
      value: function _getConfig(config) {
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);

        this._typeCheckConfig(config);

        return config;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        return config;
      }
    }, {
      key: "_mergeConfigObj",
      value: function _mergeConfigObj(config, element) {
        var jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse

        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), _typeof(jsonConfig) === 'object' ? jsonConfig : {}), isElement(element) ? Manipulator.getDataAttributes(element) : {}), _typeof(config) === 'object' ? config : {});
      }
    }, {
      key: "_typeCheckConfig",
      value: function _typeCheckConfig(config) {
        var configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;

        for (var _i6 = 0, _Object$keys4 = Object.keys(configTypes); _i6 < _Object$keys4.length; _i6++) {
          var property = _Object$keys4[_i6];
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new TypeError("".concat(this.constructor.NAME.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
          }
        }
      }
    }], [{
      key: "Default",
      get: // Getters
      function get() {
        return {};
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return {};
      }
    }, {
      key: "NAME",
      get: function get() {
        throw new Error('You have to implement the static method "NAME", for each component!');
      }
    }]);

    return Config;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var VERSION = '5.2.1';
  /**
   * Class definition
   */

  var BaseComponent = /*#__PURE__*/function (_Config) {
    _inherits(BaseComponent, _Config);

    var _super = _createSuper(BaseComponent);

    function BaseComponent(element, config) {
      var _this;

      _classCallCheck(this, BaseComponent);

      _this = _super.call(this);
      element = getElement(element);

      if (!element) {
        return _possibleConstructorReturn(_this);
      }

      _this._element = element;
      _this._config = _this._getConfig(config);
      Data.set(_this._element, _this.constructor.DATA_KEY, _assertThisInitialized(_this));
      return _this;
    } // Public


    _createClass(BaseComponent, [{
      key: "dispose",
      value: function dispose() {
        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);

        var _iterator4 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var propertyName = _step4.value;
            this[propertyName] = null;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "_queueCallback",
      value: function _queueCallback(callback, element) {
        var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        executeAfterTransition(callback, element, isAnimated);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = this._mergeConfigObj(config, this._element);
        config = this._configAfterMerge(config);

        this._typeCheckConfig(config);

        return config;
      } // Static

    }], [{
      key: "getInstance",
      value: function getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
      }
    }, {
      key: "getOrCreateInstance",
      value: function getOrCreateInstance(element) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);
      }
    }, {
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return "bs.".concat(this.NAME);
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return ".".concat(this.DATA_KEY);
      }
    }, {
      key: "eventName",
      value: function eventName(name) {
        return "".concat(name).concat(this.EVENT_KEY);
      }
    }]);

    return BaseComponent;
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  var enableDismissTrigger = function enableDismissTrigger(component) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';
    var clickEvent = "click.dismiss".concat(component.EVENT_KEY);
    var name = component.NAME;
    EventHandler.on(document, clickEvent, "[data-bs-dismiss=\"".concat(name, "\"]"), function (event) {
      if (['A', 'AREA'].includes(this.tagName)) {
        event.preventDefault();
      }

      if (isDisabled(this)) {
        return;
      }

      var target = getElementFromSelector(this) || this.closest(".".concat(name));
      var instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

      instance[method]();
    });
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$f = 'alert';
  var DATA_KEY$a = 'bs.alert';
  var EVENT_KEY$b = ".".concat(DATA_KEY$a);
  var EVENT_CLOSE = "close".concat(EVENT_KEY$b);
  var EVENT_CLOSED = "closed".concat(EVENT_KEY$b);
  var CLASS_NAME_FADE$5 = 'fade';
  var CLASS_NAME_SHOW$8 = 'show';
  /**
   * Class definition
   */

  var Alert = /*#__PURE__*/function (_BaseComponent) {
    _inherits(Alert, _BaseComponent);

    var _super2 = _createSuper(Alert);

    function Alert() {
      _classCallCheck(this, Alert);

      return _super2.apply(this, arguments);
    }

    _createClass(Alert, [{
      key: "close",
      value: // Public
      function close() {
        var _this2 = this;

        var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

        if (closeEvent.defaultPrevented) {
          return;
        }

        this._element.classList.remove(CLASS_NAME_SHOW$8);

        var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

        this._queueCallback(function () {
          return _this2._destroyElement();
        }, this._element, isAnimated);
      } // Private

    }, {
      key: "_destroyElement",
      value: function _destroyElement() {
        this._element.remove();

        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
      } // Static

    }], [{
      key: "NAME",
      get: // Getters
      function get() {
        return NAME$f;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Alert.getOrCreateInstance(this);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](this);
        });
      }
    }]);

    return Alert;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  enableDismissTrigger(Alert, 'close');
  /**
   * jQuery
   */

  defineJQueryPlugin(Alert);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$e = 'button';
  var DATA_KEY$9 = 'bs.button';
  var EVENT_KEY$a = ".".concat(DATA_KEY$9);
  var DATA_API_KEY$6 = '.data-api';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = "click".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);
  /**
   * Class definition
   */

  var Button = /*#__PURE__*/function (_BaseComponent2) {
    _inherits(Button, _BaseComponent2);

    var _super3 = _createSuper(Button);

    function Button() {
      _classCallCheck(this, Button);

      return _super3.apply(this, arguments);
    }

    _createClass(Button, [{
      key: "toggle",
      value: // Public
      function toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
      } // Static

    }], [{
      key: "NAME",
      get: // Getters
      function get() {
        return NAME$e;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Button.getOrCreateInstance(this);

          if (config === 'toggle') {
            data[config]();
          }
        });
      }
    }]);

    return Button;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {
    event.preventDefault();
    var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    var data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Button);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var SelectorEngine = {
    find: function find(selector) {
      var _ref2;

      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));
    },
    findOne: function findOne(selector) {
      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return Element.prototype.querySelector.call(element, selector);
    },
    children: function children(element, selector) {
      var _ref3;

      return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(element.children)).filter(function (child) {
        return child.matches(selector);
      });
    },
    parents: function parents(element, selector) {
      var parents = [];
      var ancestor = element.parentNode.closest(selector);

      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }

      return parents;
    },
    prev: function prev(element, selector) {
      var previous = element.previousElementSibling;

      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }

        previous = previous.previousElementSibling;
      }

      return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next: function next(element, selector) {
      var next = element.nextElementSibling;

      while (next) {
        if (next.matches(selector)) {
          return [next];
        }

        next = next.nextElementSibling;
      }

      return [];
    },
    focusableChildren: function focusableChildren(element) {
      var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(function (selector) {
        return "".concat(selector, ":not([tabindex^=\"-\"])");
      }).join(',');
      return this.find(focusables, element).filter(function (el) {
        return !isDisabled(el) && isVisible(el);
      });
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/swipe.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$d = 'swipe';
  var EVENT_KEY$9 = '.bs.swipe';
  var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY$9);
  var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY$9);
  var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY$9);
  var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY$9);
  var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY$9);
  var POINTER_TYPE_TOUCH = 'touch';
  var POINTER_TYPE_PEN = 'pen';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SWIPE_THRESHOLD = 40;
  var Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  var DefaultType$c = {
    endCallback: '(function|null)',
    leftCallback: '(function|null)',
    rightCallback: '(function|null)'
  };
  /**
   * Class definition
   */

  var Swipe = /*#__PURE__*/function (_Config2) {
    _inherits(Swipe, _Config2);

    var _super4 = _createSuper(Swipe);

    function Swipe(element, config) {
      var _this3;

      _classCallCheck(this, Swipe);

      _this3 = _super4.call(this);
      _this3._element = element;

      if (!element || !Swipe.isSupported()) {
        return _possibleConstructorReturn(_this3);
      }

      _this3._config = _this3._getConfig(config);
      _this3._deltaX = 0;
      _this3._supportPointerEvents = Boolean(window.PointerEvent);

      _this3._initEvents();

      return _this3;
    } // Getters


    _createClass(Swipe, [{
      key: "dispose",
      value: // Public
      function dispose() {
        EventHandler.off(this._element, EVENT_KEY$9);
      } // Private

    }, {
      key: "_start",
      value: function _start(event) {
        if (!this._supportPointerEvents) {
          this._deltaX = event.touches[0].clientX;
          return;
        }

        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX;
        }
      }
    }, {
      key: "_end",
      value: function _end(event) {
        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX - this._deltaX;
        }

        this._handleSwipe();

        execute(this._config.endCallback);
      }
    }, {
      key: "_move",
      value: function _move(event) {
        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
      }
    }, {
      key: "_handleSwipe",
      value: function _handleSwipe() {
        var absDeltaX = Math.abs(this._deltaX);

        if (absDeltaX <= SWIPE_THRESHOLD) {
          return;
        }

        var direction = absDeltaX / this._deltaX;
        this._deltaX = 0;

        if (!direction) {
          return;
        }

        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
      }
    }, {
      key: "_initEvents",
      value: function _initEvents() {
        var _this4 = this;

        if (this._supportPointerEvents) {
          EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {
            return _this4._start(event);
          });
          EventHandler.on(this._element, EVENT_POINTERUP, function (event) {
            return _this4._end(event);
          });

          this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
          EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {
            return _this4._start(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {
            return _this4._move(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {
            return _this4._end(event);
          });
        }
      }
    }, {
      key: "_eventIsPointerPenTouch",
      value: function _eventIsPointerPenTouch(event) {
        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$c;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$c;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$d;
      }
    }, {
      key: "isSupported",
      value: function isSupported() {
        return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      }
    }]);

    return Swipe;
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$c = 'carousel';
  var DATA_KEY$8 = 'bs.carousel';
  var EVENT_KEY$8 = ".".concat(DATA_KEY$8);
  var DATA_API_KEY$5 = '.data-api';
  var ARROW_LEFT_KEY$1 = 'ArrowLeft';
  var ARROW_RIGHT_KEY$1 = 'ArrowRight';
  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var ORDER_NEXT = 'next';
  var ORDER_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var EVENT_SLIDE = "slide".concat(EVENT_KEY$8);
  var EVENT_SLID = "slid".concat(EVENT_KEY$8);
  var EVENT_KEYDOWN$1 = "keydown".concat(EVENT_KEY$8);
  var EVENT_MOUSEENTER$1 = "mouseenter".concat(EVENT_KEY$8);
  var EVENT_MOUSELEAVE$1 = "mouseleave".concat(EVENT_KEY$8);
  var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY$8);
  var EVENT_LOAD_DATA_API$3 = "load".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);
  var EVENT_CLICK_DATA_API$5 = "click".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_END = 'carousel-item-end';
  var CLASS_NAME_START = 'carousel-item-start';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY$1, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY$1, DIRECTION_LEFT), _KEY_TO_DIRECTION);
  var Default$b = {
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    ride: false,
    touch: true,
    wrap: true
  };
  var DefaultType$b = {
    interval: '(number|boolean)',
    // TODO:v6 remove boolean support
    keyboard: 'boolean',
    pause: '(string|boolean)',
    ride: '(boolean|string)',
    touch: 'boolean',
    wrap: 'boolean'
  };
  /**
   * Class definition
   */

  var Carousel = /*#__PURE__*/function (_BaseComponent3) {
    _inherits(Carousel, _BaseComponent3);

    var _super5 = _createSuper(Carousel);

    function Carousel(element, config) {
      var _this5;

      _classCallCheck(this, Carousel);

      _this5 = _super5.call(this, element, config);
      _this5._interval = null;
      _this5._activeElement = null;
      _this5._isSliding = false;
      _this5.touchTimeout = null;
      _this5._swipeHelper = null;
      _this5._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this5._element);

      _this5._addEventListeners();

      if (_this5._config.ride === CLASS_NAME_CAROUSEL) {
        _this5.cycle();
      }

      return _this5;
    } // Getters


    _createClass(Carousel, [{
      key: "next",
      value: // Public
      function next() {
        this._slide(ORDER_NEXT);
      }
    }, {
      key: "nextWhenVisible",
      value: function nextWhenVisible() {
        // FIXME TODO use `document.visibilityState`
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && isVisible(this._element)) {
          this.next();
        }
      }
    }, {
      key: "prev",
      value: function prev() {
        this._slide(ORDER_PREV);
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this._isSliding) {
          triggerTransitionEnd(this._element);
        }

        this._clearInterval();
      }
    }, {
      key: "cycle",
      value: function cycle() {
        var _this6 = this;

        this._clearInterval();

        this._updateInterval();

        this._interval = setInterval(function () {
          return _this6.nextWhenVisible();
        }, this._config.interval);
      }
    }, {
      key: "_maybeEnableCycle",
      value: function _maybeEnableCycle() {
        var _this7 = this;

        if (!this._config.ride) {
          return;
        }

        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, function () {
            return _this7.cycle();
          });
          return;
        }

        this.cycle();
      }
    }, {
      key: "to",
      value: function to(index) {
        var _this8 = this;

        var items = this._getItems();

        if (index > items.length - 1 || index < 0) {
          return;
        }

        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, function () {
            return _this8.to(index);
          });
          return;
        }

        var activeIndex = this._getItemIndex(this._getActive());

        if (activeIndex === index) {
          return;
        }

        var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

        this._slide(order, items[index]);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (this._swipeHelper) {
          this._swipeHelper.dispose();
        }

        _get(_getPrototypeOf(Carousel.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.defaultInterval = config.interval;
        return config;
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this9 = this;

        if (this._config.keyboard) {
          EventHandler.on(this._element, EVENT_KEYDOWN$1, function (event) {
            return _this9._keydown(event);
          });
        }

        if (this._config.pause === 'hover') {
          EventHandler.on(this._element, EVENT_MOUSEENTER$1, function () {
            return _this9.pause();
          });
          EventHandler.on(this._element, EVENT_MOUSELEAVE$1, function () {
            return _this9._maybeEnableCycle();
          });
        }

        if (this._config.touch && Swipe.isSupported()) {
          this._addTouchEventListeners();
        }
      }
    }, {
      key: "_addTouchEventListeners",
      value: function _addTouchEventListeners() {
        var _this10 = this;

        var _iterator5 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var img = _step5.value;
            EventHandler.on(img, EVENT_DRAG_START, function (event) {
              return event.preventDefault();
            });
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var endCallBack = function endCallBack() {
          if (_this10._config.pause !== 'hover') {
            return;
          } // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling


          _this10.pause();

          if (_this10.touchTimeout) {
            clearTimeout(_this10.touchTimeout);
          }

          _this10.touchTimeout = setTimeout(function () {
            return _this10._maybeEnableCycle();
          }, TOUCHEVENT_COMPAT_WAIT + _this10._config.interval);
        };

        var swipeConfig = {
          leftCallback: function leftCallback() {
            return _this10._slide(_this10._directionToOrder(DIRECTION_LEFT));
          },
          rightCallback: function rightCallback() {
            return _this10._slide(_this10._directionToOrder(DIRECTION_RIGHT));
          },
          endCallback: endCallBack
        };
        this._swipeHelper = new Swipe(this._element, swipeConfig);
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }

        var direction = KEY_TO_DIRECTION[event.key];

        if (direction) {
          event.preventDefault();

          this._slide(this._directionToOrder(direction));
        }
      }
    }, {
      key: "_getItemIndex",
      value: function _getItemIndex(element) {
        return this._getItems().indexOf(element);
      }
    }, {
      key: "_setActiveIndicatorElement",
      value: function _setActiveIndicatorElement(index) {
        if (!this._indicatorsElement) {
          return;
        }

        var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        var newActiveIndicator = SelectorEngine.findOne("[data-bs-slide-to=\"".concat(index, "\"]"), this._indicatorsElement);

        if (newActiveIndicator) {
          newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
          newActiveIndicator.setAttribute('aria-current', 'true');
        }
      }
    }, {
      key: "_updateInterval",
      value: function _updateInterval() {
        var element = this._activeElement || this._getActive();

        if (!element) {
          return;
        }

        var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
        this._config.interval = elementInterval || this._config.defaultInterval;
      }
    }, {
      key: "_slide",
      value: function _slide(order) {
        var _this11 = this;

        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (this._isSliding) {
          return;
        }

        var activeElement = this._getActive();

        var isNext = order === ORDER_NEXT;
        var nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);

        if (nextElement === activeElement) {
          return;
        }

        var nextElementIndex = this._getItemIndex(nextElement);

        var triggerEvent = function triggerEvent(eventName) {
          return EventHandler.trigger(_this11._element, eventName, {
            relatedTarget: nextElement,
            direction: _this11._orderToDirection(order),
            from: _this11._getItemIndex(activeElement),
            to: nextElementIndex
          });
        };

        var slideEvent = triggerEvent(EVENT_SLIDE);

        if (slideEvent.defaultPrevented) {
          return;
        }

        if (!activeElement || !nextElement) {
          // Some weirdness is happening, so we bail
          // todo: change tests that use empty divs to avoid this check
          return;
        }

        var isCycling = Boolean(this._interval);
        this.pause();
        this._isSliding = true;

        this._setActiveIndicatorElement(nextElementIndex);

        this._activeElement = nextElement;
        var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);

        var completeCallBack = function completeCallBack() {
          nextElement.classList.remove(directionalClassName, orderClassName);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
          _this11._isSliding = false;
          triggerEvent(EVENT_SLID);
        };

        this._queueCallback(completeCallBack, activeElement, this._isAnimated());

        if (isCycling) {
          this.cycle();
        }
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_SLIDE);
      }
    }, {
      key: "_getActive",
      value: function _getActive() {
        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
      }
    }, {
      key: "_getItems",
      value: function _getItems() {
        return SelectorEngine.find(SELECTOR_ITEM, this._element);
      }
    }, {
      key: "_clearInterval",
      value: function _clearInterval() {
        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }
      }
    }, {
      key: "_directionToOrder",
      value: function _directionToOrder(direction) {
        if (isRTL()) {
          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        }

        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
      }
    }, {
      key: "_orderToDirection",
      value: function _orderToDirection(order) {
        if (isRTL()) {
          return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }

        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$b;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$b;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$c;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Carousel.getOrCreateInstance(this, config);

          if (typeof config === 'number') {
            data.to(config);
            return;
          }

          if (typeof config === 'string') {
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Carousel;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {
    var target = getElementFromSelector(this);

    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }

    event.preventDefault();
    var carousel = Carousel.getOrCreateInstance(target);
    var slideIndex = this.getAttribute('data-bs-slide-to');

    if (slideIndex) {
      carousel.to(slideIndex);

      carousel._maybeEnableCycle();

      return;
    }

    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
      carousel.next();

      carousel._maybeEnableCycle();

      return;
    }

    carousel.prev();

    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, function () {
    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

    var _iterator6 = _createForOfIteratorHelper(carousels),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var carousel = _step6.value;
        Carousel.getOrCreateInstance(carousel);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Carousel);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$b = 'collapse';
  var DATA_KEY$7 = 'bs.collapse';
  var EVENT_KEY$7 = ".".concat(DATA_KEY$7);
  var DATA_API_KEY$4 = '.data-api';
  var EVENT_SHOW$6 = "show".concat(EVENT_KEY$7);
  var EVENT_SHOWN$6 = "shown".concat(EVENT_KEY$7);
  var EVENT_HIDE$6 = "hide".concat(EVENT_KEY$7);
  var EVENT_HIDDEN$6 = "hidden".concat(EVENT_KEY$7);
  var EVENT_CLICK_DATA_API$4 = "click".concat(EVENT_KEY$7).concat(DATA_API_KEY$4);
  var CLASS_NAME_SHOW$7 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var CLASS_NAME_DEEPER_CHILDREN = ":scope .".concat(CLASS_NAME_COLLAPSE, " .").concat(CLASS_NAME_COLLAPSE);
  var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  var WIDTH = 'width';
  var HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  var Default$a = {
    parent: null,
    toggle: true
  };
  var DefaultType$a = {
    parent: '(null|element)',
    toggle: 'boolean'
  };
  /**
   * Class definition
   */

  var Collapse = /*#__PURE__*/function (_BaseComponent4) {
    _inherits(Collapse, _BaseComponent4);

    var _super6 = _createSuper(Collapse);

    function Collapse(element, config) {
      var _this12;

      _classCallCheck(this, Collapse);

      _this12 = _super6.call(this, element, config);
      _this12._isTransitioning = false;
      _this12._triggerArray = [];
      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

      var _iterator7 = _createForOfIteratorHelper(toggleList),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var elem = _step7.value;
          var selector = getSelectorFromElement(elem);
          var filterElement = SelectorEngine.find(selector).filter(function (foundElement) {
            return foundElement === _this12._element;
          });

          if (selector !== null && filterElement.length) {
            _this12._triggerArray.push(elem);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      _this12._initializeChildren();

      if (!_this12._config.parent) {
        _this12._addAriaAndCollapsedClass(_this12._triggerArray, _this12._isShown());
      }

      if (_this12._config.toggle) {
        _this12.toggle();
      }

      return _this12;
    } // Getters


    _createClass(Collapse, [{
      key: "toggle",
      value: // Public
      function toggle() {
        if (this._isShown()) {
          this.hide();
        } else {
          this.show();
        }
      }
    }, {
      key: "show",
      value: function show() {
        var _this13 = this;

        if (this._isTransitioning || this._isShown()) {
          return;
        }

        var activeChildren = []; // find active children

        if (this._config.parent) {
          activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(function (element) {
            return element !== _this13._element;
          }).map(function (element) {
            return Collapse.getOrCreateInstance(element, {
              toggle: false
            });
          });
        }

        if (activeChildren.length && activeChildren[0]._isTransitioning) {
          return;
        }

        var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);

        if (startEvent.defaultPrevented) {
          return;
        }

        var _iterator8 = _createForOfIteratorHelper(activeChildren),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var activeInstance = _step8.value;
            activeInstance.hide();
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        var dimension = this._getDimension();

        this._element.classList.remove(CLASS_NAME_COLLAPSE);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.style[dimension] = 0;

        this._addAriaAndCollapsedClass(this._triggerArray, true);

        this._isTransitioning = true;

        var complete = function complete() {
          _this13._isTransitioning = false;

          _this13._element.classList.remove(CLASS_NAME_COLLAPSING);

          _this13._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

          _this13._element.style[dimension] = '';
          EventHandler.trigger(_this13._element, EVENT_SHOWN$6);
        };

        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        var scrollSize = "scroll".concat(capitalizedDimension);

        this._queueCallback(complete, this._element, true);

        this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this14 = this;

        if (this._isTransitioning || !this._isShown()) {
          return;
        }

        var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);

        if (startEvent.defaultPrevented) {
          return;
        }

        var dimension = this._getDimension();

        this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
        reflow(this._element);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

        var _iterator9 = _createForOfIteratorHelper(this._triggerArray),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var trigger = _step9.value;
            var element = getElementFromSelector(trigger);

            if (element && !this._isShown(element)) {
              this._addAriaAndCollapsedClass([trigger], false);
            }
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }

        this._isTransitioning = true;

        var complete = function complete() {
          _this14._isTransitioning = false;

          _this14._element.classList.remove(CLASS_NAME_COLLAPSING);

          _this14._element.classList.add(CLASS_NAME_COLLAPSE);

          EventHandler.trigger(_this14._element, EVENT_HIDDEN$6);
        };

        this._element.style[dimension] = '';

        this._queueCallback(complete, this._element, true);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
        return element.classList.contains(CLASS_NAME_SHOW$7);
      } // Private

    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.toggle = Boolean(config.toggle); // Coerce string values

        config.parent = getElement(config.parent);
        return config;
      }
    }, {
      key: "_getDimension",
      value: function _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }
    }, {
      key: "_initializeChildren",
      value: function _initializeChildren() {
        if (!this._config.parent) {
          return;
        }

        var children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);

        var _iterator10 = _createForOfIteratorHelper(children),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var element = _step10.value;
            var selected = getElementFromSelector(element);

            if (selected) {
              this._addAriaAndCollapsedClass([element], this._isShown(selected));
            }
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }
    }, {
      key: "_getFirstLevelChildren",
      value: function _getFirstLevelChildren(selector) {
        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth

        return SelectorEngine.find(selector, this._config.parent).filter(function (element) {
          return !children.includes(element);
        });
      }
    }, {
      key: "_addAriaAndCollapsedClass",
      value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) {
          return;
        }

        var _iterator11 = _createForOfIteratorHelper(triggerArray),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var element = _step11.value;
            element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
            element.setAttribute('aria-expanded', isOpen);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$a;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$b;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        var _config = {};

        if (typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        return this.each(function () {
          var data = Collapse.getOrCreateInstance(this, _config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Collapse;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
      event.preventDefault();
    }

    var selector = getSelectorFromElement(this);
    var selectorElements = SelectorEngine.find(selector);

    var _iterator12 = _createForOfIteratorHelper(selectorElements),
        _step12;

    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var element = _step12.value;
        Collapse.getOrCreateInstance(element, {
          toggle: false
        }).toggle();
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Collapse);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$a = 'dropdown';
  var DATA_KEY$6 = 'bs.dropdown';
  var EVENT_KEY$6 = ".".concat(DATA_KEY$6);
  var DATA_API_KEY$3 = '.data-api';
  var ESCAPE_KEY$2 = 'Escape';
  var TAB_KEY$1 = 'Tab';
  var ARROW_UP_KEY$1 = 'ArrowUp';
  var ARROW_DOWN_KEY$1 = 'ArrowDown';
  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  var EVENT_HIDE$5 = "hide".concat(EVENT_KEY$6);
  var EVENT_HIDDEN$5 = "hidden".concat(EVENT_KEY$6);
  var EVENT_SHOW$5 = "show".concat(EVENT_KEY$6);
  var EVENT_SHOWN$5 = "shown".concat(EVENT_KEY$6);
  var EVENT_CLICK_DATA_API$3 = "click".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var EVENT_KEYDOWN_DATA_API = "keydown".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var EVENT_KEYUP_DATA_API = "keyup".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var CLASS_NAME_SHOW$6 = 'show';
  var CLASS_NAME_DROPUP = 'dropup';
  var CLASS_NAME_DROPEND = 'dropend';
  var CLASS_NAME_DROPSTART = 'dropstart';
  var CLASS_NAME_DROPUP_CENTER = 'dropup-center';
  var CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  var SELECTOR_DATA_TOGGLE_SHOWN = "".concat(SELECTOR_DATA_TOGGLE$3, ".").concat(CLASS_NAME_SHOW$6);
  var SELECTOR_MENU = '.dropdown-menu';
  var SELECTOR_NAVBAR = '.navbar';
  var SELECTOR_NAVBAR_NAV = '.navbar-nav';
  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  var PLACEMENT_TOPCENTER = 'top';
  var PLACEMENT_BOTTOMCENTER = 'bottom';
  var Default$9 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [0, 2],
    popperConfig: null,
    reference: 'toggle'
  };
  var DefaultType$9 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
  };
  /**
   * Class definition
   */

  var Dropdown = /*#__PURE__*/function (_BaseComponent5) {
    _inherits(Dropdown, _BaseComponent5);

    var _super7 = _createSuper(Dropdown);

    function Dropdown(element, config) {
      var _this15;

      _classCallCheck(this, Dropdown);

      _this15 = _super7.call(this, element, config);
      _this15._popper = null;
      _this15._parent = _this15._element.parentNode; // dropdown wrapper
      // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/

      _this15._menu = SelectorEngine.next(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.prev(_this15._element, SELECTOR_MENU)[0];
      _this15._inNavbar = _this15._detectNavbar();
      return _this15;
    } // Getters


    _createClass(Dropdown, [{
      key: "toggle",
      value: // Public
      function toggle() {
        return this._isShown() ? this.hide() : this.show();
      }
    }, {
      key: "show",
      value: function show() {
        if (isDisabled(this._element) || this._isShown()) {
          return;
        }

        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);

        if (showEvent.defaultPrevented) {
          return;
        }

        this._createPopper(); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


        if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
          var _ref4;

          var _iterator13 = _createForOfIteratorHelper((_ref4 = []).concat.apply(_ref4, _toConsumableArray(document.body.children))),
              _step13;

          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var element = _step13.value;
              EventHandler.on(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
        }

        this._element.focus();

        this._element.setAttribute('aria-expanded', true);

        this._menu.classList.add(CLASS_NAME_SHOW$6);

        this._element.classList.add(CLASS_NAME_SHOW$6);

        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
      }
    }, {
      key: "hide",
      value: function hide() {
        if (isDisabled(this._element) || !this._isShown()) {
          return;
        }

        var relatedTarget = {
          relatedTarget: this._element
        };

        this._completeHide(relatedTarget);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (this._popper) {
          this._popper.destroy();
        }

        _get(_getPrototypeOf(Dropdown.prototype), "dispose", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._inNavbar = this._detectNavbar();

        if (this._popper) {
          this._popper.update();
        }
      } // Private

    }, {
      key: "_completeHide",
      value: function _completeHide(relatedTarget) {
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);

        if (hideEvent.defaultPrevented) {
          return;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          var _ref5;

          var _iterator14 = _createForOfIteratorHelper((_ref5 = []).concat.apply(_ref5, _toConsumableArray(document.body.children))),
              _step14;

          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var element = _step14.value;
              EventHandler.off(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
        }

        if (this._popper) {
          this._popper.destroy();
        }

        this._menu.classList.remove(CLASS_NAME_SHOW$6);

        this._element.classList.remove(CLASS_NAME_SHOW$6);

        this._element.setAttribute('aria-expanded', 'false');

        Manipulator.removeDataAttribute(this._menu, 'popper');
        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _get(_getPrototypeOf(Dropdown.prototype), "_getConfig", this).call(this, config);

        if (_typeof(config.reference) === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
          // Popper virtual elements require a getBoundingClientRect method
          throw new TypeError("".concat(NAME$a.toUpperCase(), ": Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method."));
        }

        return config;
      }
    }, {
      key: "_createPopper",
      value: function _createPopper() {
        if (typeof Popper__namespace === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = this._parent;
        } else if (isElement(this._config.reference)) {
          referenceElement = getElement(this._config.reference);
        } else if (_typeof(this._config.reference) === 'object') {
          referenceElement = this._config.reference;
        }

        var popperConfig = this._getPopperConfig();

        this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        return this._menu.classList.contains(CLASS_NAME_SHOW$6);
      }
    }, {
      key: "_getPlacement",
      value: function _getPlacement() {
        var parentDropdown = this._parent;

        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
          return PLACEMENT_RIGHT;
        }

        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
          return PLACEMENT_LEFT;
        }

        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
          return PLACEMENT_TOPCENTER;
        }

        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
          return PLACEMENT_BOTTOMCENTER;
        } // We need to trim the value because custom properties can also include spaces


        var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        }

        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
      }
    }, {
      key: "_detectNavbar",
      value: function _detectNavbar() {
        return this._element.closest(SELECTOR_NAVBAR) !== null;
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this16 = this;

        var offset = this._config.offset;

        if (typeof offset === 'string') {
          return offset.split(',').map(function (value) {
            return Number.parseInt(value, 10);
          });
        }

        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this16._element);
          };
        }

        return offset;
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig() {
        var defaultBsPopperConfig = {
          placement: this._getPlacement(),
          modifiers: [{
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }]
        }; // Disable Popper if we have a static display or Dropdown is in Navbar

        if (this._inNavbar || this._config.display === 'static') {
          Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove

          defaultBsPopperConfig.modifiers = [{
            name: 'applyStyles',
            enabled: false
          }];
        }

        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
      }
    }, {
      key: "_selectMenuItem",
      value: function _selectMenuItem(_ref6) {
        var key = _ref6.key,
            target = _ref6.target;
        var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(function (element) {
          return isVisible(element);
        });

        if (!items.length) {
          return;
        } // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY


        getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$9;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$9;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$a;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Dropdown.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }, {
      key: "clearMenus",
      value: function clearMenus(event) {
        if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {
          return;
        }

        var openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);

        var _iterator15 = _createForOfIteratorHelper(openToggles),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var toggle = _step15.value;
            var context = Dropdown.getInstance(toggle);

            if (!context || context._config.autoClose === false) {
              continue;
            }

            var composedPath = event.composedPath();
            var isMenuTarget = composedPath.includes(context._menu);

            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
              continue;
            } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
              continue;
            }

            var relatedTarget = {
              relatedTarget: context._element
            };

            if (event.type === 'click') {
              relatedTarget.clickEvent = event;
            }

            context._completeHide(relatedTarget);
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      }
    }, {
      key: "dataApiKeydownHandler",
      value: function dataApiKeydownHandler(event) {
        // If not an UP | DOWN | ESCAPE key => not a dropdown command
        // If input/textarea && if key is other than ESCAPE => not a dropdown command
        var isInput = /input|textarea/i.test(event.target.tagName);
        var isEscapeEvent = event.key === ESCAPE_KEY$2;
        var isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);

        if (!isUpOrDownEvent && !isEscapeEvent) {
          return;
        }

        if (isInput && !isEscapeEvent) {
          return;
        }

        event.preventDefault(); // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/

        var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0];
        var instance = Dropdown.getOrCreateInstance(getToggleButton);

        if (isUpOrDownEvent) {
          event.stopPropagation();
          instance.show();

          instance._selectMenuItem(event);

          return;
        }

        if (instance._isShown()) {
          // else is escape and we check if it is shown
          event.stopPropagation();
          instance.hide();
          getToggleButton.focus();
        }
      }
    }]);

    return Dropdown;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Dropdown);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';
  var PROPERTY_PADDING = 'padding-right';
  var PROPERTY_MARGIN = 'margin-right';
  /**
   * Class definition
   */

  var ScrollBarHelper = /*#__PURE__*/function () {
    function ScrollBarHelper() {
      _classCallCheck(this, ScrollBarHelper);

      this._element = document.body;
    } // Public


    _createClass(ScrollBarHelper, [{
      key: "getWidth",
      value: function getWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        var documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }, {
      key: "hide",
      value: function hide() {
        var width = this.getWidth();

        this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


        this._setElementAttributes(this._element, PROPERTY_PADDING, function (calculatedValue) {
          return calculatedValue + width;
        }); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, function (calculatedValue) {
          return calculatedValue + width;
        });

        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, function (calculatedValue) {
          return calculatedValue - width;
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        this._resetElementAttributes(this._element, 'overflow');

        this._resetElementAttributes(this._element, PROPERTY_PADDING);

        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);

        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
      }
    }, {
      key: "isOverflowing",
      value: function isOverflowing() {
        return this.getWidth() > 0;
      } // Private

    }, {
      key: "_disableOverFlow",
      value: function _disableOverFlow() {
        this._saveInitialAttribute(this._element, 'overflow');

        this._element.style.overflow = 'hidden';
      }
    }, {
      key: "_setElementAttributes",
      value: function _setElementAttributes(selector, styleProperty, callback) {
        var _this17 = this;

        var scrollbarWidth = this.getWidth();

        var manipulationCallBack = function manipulationCallBack(element) {
          if (element !== _this17._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
            return;
          }

          _this17._saveInitialAttribute(element, styleProperty);

          var calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
          element.style.setProperty(styleProperty, "".concat(callback(Number.parseFloat(calculatedValue)), "px"));
        };

        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "_saveInitialAttribute",
      value: function _saveInitialAttribute(element, styleProperty) {
        var actualValue = element.style.getPropertyValue(styleProperty);

        if (actualValue) {
          Manipulator.setDataAttribute(element, styleProperty, actualValue);
        }
      }
    }, {
      key: "_resetElementAttributes",
      value: function _resetElementAttributes(selector, styleProperty) {
        var manipulationCallBack = function manipulationCallBack(element) {
          var value = Manipulator.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero

          if (value === null) {
            element.style.removeProperty(styleProperty);
            return;
          }

          Manipulator.removeDataAttribute(element, styleProperty);
          element.style.setProperty(styleProperty, value);
        };

        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "_applyManipulationCallback",
      value: function _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
          callBack(selector);
          return;
        }

        var _iterator16 = _createForOfIteratorHelper(SelectorEngine.find(selector, this._element)),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var sel = _step16.value;
            callBack(sel);
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      }
    }]);

    return ScrollBarHelper;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$9 = 'backdrop';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var EVENT_MOUSEDOWN = "mousedown.bs.".concat(NAME$9);
  var Default$8 = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements

  };
  var DefaultType$8 = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
  };
  /**
   * Class definition
   */

  var Backdrop = /*#__PURE__*/function (_Config3) {
    _inherits(Backdrop, _Config3);

    var _super8 = _createSuper(Backdrop);

    function Backdrop(config) {
      var _this18;

      _classCallCheck(this, Backdrop);

      _this18 = _super8.call(this);
      _this18._config = _this18._getConfig(config);
      _this18._isAppended = false;
      _this18._element = null;
      return _this18;
    } // Getters


    _createClass(Backdrop, [{
      key: "show",
      value: // Public
      function show(callback) {
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }

        this._append();

        var element = this._getElement();

        if (this._config.isAnimated) {
          reflow(element);
        }

        element.classList.add(CLASS_NAME_SHOW$5);

        this._emulateAnimation(function () {
          execute(callback);
        });
      }
    }, {
      key: "hide",
      value: function hide(callback) {
        var _this19 = this;

        if (!this._config.isVisible) {
          execute(callback);
          return;
        }

        this._getElement().classList.remove(CLASS_NAME_SHOW$5);

        this._emulateAnimation(function () {
          _this19.dispose();

          execute(callback);
        });
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (!this._isAppended) {
          return;
        }

        EventHandler.off(this._element, EVENT_MOUSEDOWN);

        this._element.remove();

        this._isAppended = false;
      } // Private

    }, {
      key: "_getElement",
      value: function _getElement() {
        if (!this._element) {
          var backdrop = document.createElement('div');
          backdrop.className = this._config.className;

          if (this._config.isAnimated) {
            backdrop.classList.add(CLASS_NAME_FADE$4);
          }

          this._element = backdrop;
        }

        return this._element;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        config.rootElement = getElement(config.rootElement);
        return config;
      }
    }, {
      key: "_append",
      value: function _append() {
        var _this20 = this;

        if (this._isAppended) {
          return;
        }

        var element = this._getElement();

        this._config.rootElement.append(element);

        EventHandler.on(element, EVENT_MOUSEDOWN, function () {
          execute(_this20._config.clickCallback);
        });
        this._isAppended = true;
      }
    }, {
      key: "_emulateAnimation",
      value: function _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$8;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$8;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$9;
      }
    }]);

    return Backdrop;
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$8 = 'focustrap';
  var DATA_KEY$5 = 'bs.focustrap';
  var EVENT_KEY$5 = ".".concat(DATA_KEY$5);
  var EVENT_FOCUSIN$2 = "focusin".concat(EVENT_KEY$5);
  var EVENT_KEYDOWN_TAB = "keydown.tab".concat(EVENT_KEY$5);
  var TAB_KEY = 'Tab';
  var TAB_NAV_FORWARD = 'forward';
  var TAB_NAV_BACKWARD = 'backward';
  var Default$7 = {
    autofocus: true,
    trapElement: null // The element to trap focus inside of

  };
  var DefaultType$7 = {
    autofocus: 'boolean',
    trapElement: 'element'
  };
  /**
   * Class definition
   */

  var FocusTrap = /*#__PURE__*/function (_Config4) {
    _inherits(FocusTrap, _Config4);

    var _super9 = _createSuper(FocusTrap);

    function FocusTrap(config) {
      var _this21;

      _classCallCheck(this, FocusTrap);

      _this21 = _super9.call(this);
      _this21._config = _this21._getConfig(config);
      _this21._isActive = false;
      _this21._lastTabNavDirection = null;
      return _this21;
    } // Getters


    _createClass(FocusTrap, [{
      key: "activate",
      value: // Public
      function activate() {
        var _this22 = this;

        if (this._isActive) {
          return;
        }

        if (this._config.autofocus) {
          this._config.trapElement.focus();
        }

        EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop

        EventHandler.on(document, EVENT_FOCUSIN$2, function (event) {
          return _this22._handleFocusin(event);
        });
        EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {
          return _this22._handleKeydown(event);
        });
        this._isActive = true;
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        if (!this._isActive) {
          return;
        }

        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$5);
      } // Private

    }, {
      key: "_handleFocusin",
      value: function _handleFocusin(event) {
        var trapElement = this._config.trapElement;

        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
          return;
        }

        var elements = SelectorEngine.focusableChildren(trapElement);

        if (elements.length === 0) {
          trapElement.focus();
        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
          elements[elements.length - 1].focus();
        } else {
          elements[0].focus();
        }
      }
    }, {
      key: "_handleKeydown",
      value: function _handleKeydown(event) {
        if (event.key !== TAB_KEY) {
          return;
        }

        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$8;
      }
    }]);

    return FocusTrap;
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$7 = 'modal';
  var DATA_KEY$4 = 'bs.modal';
  var EVENT_KEY$4 = ".".concat(DATA_KEY$4);
  var DATA_API_KEY$2 = '.data-api';
  var ESCAPE_KEY$1 = 'Escape';
  var EVENT_HIDE$4 = "hide".concat(EVENT_KEY$4);
  var EVENT_HIDE_PREVENTED$1 = "hidePrevented".concat(EVENT_KEY$4);
  var EVENT_HIDDEN$4 = "hidden".concat(EVENT_KEY$4);
  var EVENT_SHOW$4 = "show".concat(EVENT_KEY$4);
  var EVENT_SHOWN$4 = "shown".concat(EVENT_KEY$4);
  var EVENT_RESIZE$1 = "resize".concat(EVENT_KEY$4);
  var EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY$4);
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY$4);
  var EVENT_KEYDOWN_DISMISS$1 = "keydown.dismiss".concat(EVENT_KEY$4);
  var EVENT_CLICK_DATA_API$2 = "click".concat(EVENT_KEY$4).concat(DATA_API_KEY$2);
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var OPEN_SELECTOR$1 = '.modal.show';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  var Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  var DefaultType$6 = {
    backdrop: '(boolean|string)',
    focus: 'boolean',
    keyboard: 'boolean'
  };
  /**
   * Class definition
   */

  var Modal = /*#__PURE__*/function (_BaseComponent6) {
    _inherits(Modal, _BaseComponent6);

    var _super10 = _createSuper(Modal);

    function Modal(element, config) {
      var _this23;

      _classCallCheck(this, Modal);

      _this23 = _super10.call(this, element, config);
      _this23._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this23._element);
      _this23._backdrop = _this23._initializeBackDrop();
      _this23._focustrap = _this23._initializeFocusTrap();
      _this23._isShown = false;
      _this23._isTransitioning = false;
      _this23._scrollBar = new ScrollBarHelper();

      _this23._addEventListeners();

      return _this23;
    } // Getters


    _createClass(Modal, [{
      key: "toggle",
      value: // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this24 = this;

        if (this._isShown || this._isTransitioning) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
          relatedTarget: relatedTarget
        });

        if (showEvent.defaultPrevented) {
          return;
        }

        this._isShown = true;
        this._isTransitioning = true;

        this._scrollBar.hide();

        document.body.classList.add(CLASS_NAME_OPEN);

        this._adjustDialog();

        this._backdrop.show(function () {
          return _this24._showElement(relatedTarget);
        });
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this25 = this;

        if (!this._isShown || this._isTransitioning) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);

        if (hideEvent.defaultPrevented) {
          return;
        }

        this._isShown = false;
        this._isTransitioning = true;

        this._focustrap.deactivate();

        this._element.classList.remove(CLASS_NAME_SHOW$4);

        this._queueCallback(function () {
          return _this25._hideModal();
        }, this._element, this._isAnimated());
      }
    }, {
      key: "dispose",
      value: function dispose() {
        for (var _i7 = 0, _arr2 = [window, this._dialog]; _i7 < _arr2.length; _i7++) {
          var htmlElement = _arr2[_i7];
          EventHandler.off(htmlElement, EVENT_KEY$4);
        }

        this._backdrop.dispose();

        this._focustrap.deactivate();

        _get(_getPrototypeOf(Modal.prototype), "dispose", this).call(this);
      }
    }, {
      key: "handleUpdate",
      value: function handleUpdate() {
        this._adjustDialog();
      } // Private

    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        return new Backdrop({
          isVisible: Boolean(this._config.backdrop),
          // 'static' option will be translated to true, and booleans will keep their value,
          isAnimated: this._isAnimated()
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_showElement",
      value: function _showElement(relatedTarget) {
        var _this26 = this;

        // try to append dynamic modal
        if (!document.body.contains(this._element)) {
          document.body.append(this._element);
        }

        this._element.style.display = 'block';

        this._element.removeAttribute('aria-hidden');

        this._element.setAttribute('aria-modal', true);

        this._element.setAttribute('role', 'dialog');

        this._element.scrollTop = 0;
        var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

        if (modalBody) {
          modalBody.scrollTop = 0;
        }

        reflow(this._element);

        this._element.classList.add(CLASS_NAME_SHOW$4);

        var transitionComplete = function transitionComplete() {
          if (_this26._config.focus) {
            _this26._focustrap.activate();
          }

          _this26._isTransitioning = false;
          EventHandler.trigger(_this26._element, EVENT_SHOWN$4, {
            relatedTarget: relatedTarget
          });
        };

        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this27 = this;

        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {
          if (event.key !== ESCAPE_KEY$1) {
            return;
          }

          if (_this27._config.keyboard) {
            event.preventDefault();

            _this27.hide();

            return;
          }

          _this27._triggerBackdropTransition();
        });
        EventHandler.on(window, EVENT_RESIZE$1, function () {
          if (_this27._isShown && !_this27._isTransitioning) {
            _this27._adjustDialog();
          }
        });
        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, function (event) {
          EventHandler.one(_this27._element, EVENT_CLICK_DISMISS, function (event2) {
            // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
            if (_this27._dialog.contains(event.target) || _this27._dialog.contains(event2.target)) {
              return;
            }

            if (_this27._config.backdrop === 'static') {
              _this27._triggerBackdropTransition();

              return;
            }

            if (_this27._config.backdrop) {
              _this27.hide();
            }
          });
        });
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        var _this28 = this;

        this._element.style.display = 'none';

        this._element.setAttribute('aria-hidden', true);

        this._element.removeAttribute('aria-modal');

        this._element.removeAttribute('role');

        this._isTransitioning = false;

        this._backdrop.hide(function () {
          document.body.classList.remove(CLASS_NAME_OPEN);

          _this28._resetAdjustments();

          _this28._scrollBar.reset();

          EventHandler.trigger(_this28._element, EVENT_HIDDEN$4);
        });
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
      }
    }, {
      key: "_triggerBackdropTransition",
      value: function _triggerBackdropTransition() {
        var _this29 = this;

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);

        if (hideEvent.defaultPrevented) {
          return;
        }

        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        var initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed

        if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {
          return;
        }

        if (!isModalOverflowing) {
          this._element.style.overflowY = 'hidden';
        }

        this._element.classList.add(CLASS_NAME_STATIC);

        this._queueCallback(function () {
          _this29._element.classList.remove(CLASS_NAME_STATIC);

          _this29._queueCallback(function () {
            _this29._element.style.overflowY = initialOverflowY;
          }, _this29._dialog);
        }, this._dialog);

        this._element.focus();
      }
      /**
       * The following methods are used to handle overflowing modals
       */

    }, {
      key: "_adjustDialog",
      value: function _adjustDialog() {
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        var scrollbarWidth = this._scrollBar.getWidth();

        var isBodyOverflowing = scrollbarWidth > 0;

        if (isBodyOverflowing && !isModalOverflowing) {
          var property = isRTL() ? 'paddingLeft' : 'paddingRight';
          this._element.style[property] = "".concat(scrollbarWidth, "px");
        }

        if (!isBodyOverflowing && isModalOverflowing) {
          var _property = isRTL() ? 'paddingRight' : 'paddingLeft';

          this._element.style[_property] = "".concat(scrollbarWidth, "px");
        }
      }
    }, {
      key: "_resetAdjustments",
      value: function _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$6;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config, relatedTarget) {
        return this.each(function () {
          var data = Modal.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](relatedTarget);
        });
      }
    }]);

    return Modal;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
    var _this30 = this;

    var target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    EventHandler.one(target, EVENT_SHOW$4, function (showEvent) {
      if (showEvent.defaultPrevented) {
        // only register focus restorer if modal will actually get shown
        return;
      }

      EventHandler.one(target, EVENT_HIDDEN$4, function () {
        if (isVisible(_this30)) {
          _this30.focus();
        }
      });
    }); // avoid conflict when clicking modal toggler while another one is open

    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);

    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }

    var data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  /**
   * jQuery
   */

  defineJQueryPlugin(Modal);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$6 = 'offcanvas';
  var DATA_KEY$3 = 'bs.offcanvas';
  var EVENT_KEY$3 = ".".concat(DATA_KEY$3);
  var DATA_API_KEY$1 = '.data-api';
  var EVENT_LOAD_DATA_API$2 = "load".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);
  var ESCAPE_KEY = 'Escape';
  var CLASS_NAME_SHOW$3 = 'show';
  var CLASS_NAME_SHOWING$1 = 'showing';
  var CLASS_NAME_HIDING = 'hiding';
  var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  var OPEN_SELECTOR = '.offcanvas.show';
  var EVENT_SHOW$3 = "show".concat(EVENT_KEY$3);
  var EVENT_SHOWN$3 = "shown".concat(EVENT_KEY$3);
  var EVENT_HIDE$3 = "hide".concat(EVENT_KEY$3);
  var EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY$3);
  var EVENT_HIDDEN$3 = "hidden".concat(EVENT_KEY$3);
  var EVENT_RESIZE = "resize".concat(EVENT_KEY$3);
  var EVENT_CLICK_DATA_API$1 = "click".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY$3);
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    scroll: 'boolean'
  };
  /**
   * Class definition
   */

  var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {
    _inherits(Offcanvas, _BaseComponent7);

    var _super11 = _createSuper(Offcanvas);

    function Offcanvas(element, config) {
      var _this31;

      _classCallCheck(this, Offcanvas);

      _this31 = _super11.call(this, element, config);
      _this31._isShown = false;
      _this31._backdrop = _this31._initializeBackDrop();
      _this31._focustrap = _this31._initializeFocusTrap();

      _this31._addEventListeners();

      return _this31;
    } // Getters


    _createClass(Offcanvas, [{
      key: "toggle",
      value: // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this32 = this;

        if (this._isShown) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
          relatedTarget: relatedTarget
        });

        if (showEvent.defaultPrevented) {
          return;
        }

        this._isShown = true;

        this._backdrop.show();

        if (!this._config.scroll) {
          new ScrollBarHelper().hide();
        }

        this._element.setAttribute('aria-modal', true);

        this._element.setAttribute('role', 'dialog');

        this._element.classList.add(CLASS_NAME_SHOWING$1);

        var completeCallBack = function completeCallBack() {
          if (!_this32._config.scroll || _this32._config.backdrop) {
            _this32._focustrap.activate();
          }

          _this32._element.classList.add(CLASS_NAME_SHOW$3);

          _this32._element.classList.remove(CLASS_NAME_SHOWING$1);

          EventHandler.trigger(_this32._element, EVENT_SHOWN$3, {
            relatedTarget: relatedTarget
          });
        };

        this._queueCallback(completeCallBack, this._element, true);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this33 = this;

        if (!this._isShown) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

        if (hideEvent.defaultPrevented) {
          return;
        }

        this._focustrap.deactivate();

        this._element.blur();

        this._isShown = false;

        this._element.classList.add(CLASS_NAME_HIDING);

        this._backdrop.hide();

        var completeCallback = function completeCallback() {
          _this33._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);

          _this33._element.removeAttribute('aria-modal');

          _this33._element.removeAttribute('role');

          if (!_this33._config.scroll) {
            new ScrollBarHelper().reset();
          }

          EventHandler.trigger(_this33._element, EVENT_HIDDEN$3);
        };

        this._queueCallback(completeCallback, this._element, true);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._backdrop.dispose();

        this._focustrap.deactivate();

        _get(_getPrototypeOf(Offcanvas.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        var _this34 = this;

        var clickCallback = function clickCallback() {
          if (_this34._config.backdrop === 'static') {
            EventHandler.trigger(_this34._element, EVENT_HIDE_PREVENTED);
            return;
          }

          _this34.hide();
        }; // 'static' option will be translated to true, and booleans will keep their value


        var isVisible = Boolean(this._config.backdrop);
        return new Backdrop({
          className: CLASS_NAME_BACKDROP,
          isVisible: isVisible,
          isAnimated: true,
          rootElement: this._element.parentNode,
          clickCallback: isVisible ? clickCallback : null
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this35 = this;

        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {
          if (event.key !== ESCAPE_KEY) {
            return;
          }

          if (!_this35._config.keyboard) {
            EventHandler.trigger(_this35._element, EVENT_HIDE_PREVENTED);
            return;
          }

          _this35.hide();
        });
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Offcanvas.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](this);
        });
      }
    }]);

    return Offcanvas;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
    var _this36 = this;

    var target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$3, function () {
      // focus on trigger when it is closed
      if (isVisible(_this36)) {
        _this36.focus();
      }
    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }

    var data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {
    var _iterator17 = _createForOfIteratorHelper(SelectorEngine.find(OPEN_SELECTOR)),
        _step17;

    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var selector = _step17.value;
        Offcanvas.getOrCreateInstance(selector).show();
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, function () {
    var _iterator18 = _createForOfIteratorHelper(SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')),
        _step18;

    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
        var element = _step18.value;

        if (getComputedStyle(element).position !== 'fixed') {
          Offcanvas.getOrCreateInstance(element).hide();
        }
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }
  });
  enableDismissTrigger(Offcanvas);
  /**
   * jQuery
   */

  defineJQueryPlugin(Offcanvas);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {
    var attributeName = attribute.nodeName.toLowerCase();

    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
      }

      return true;
    } // Check if a regular expression validates the attribute.


    return allowedAttributeList.filter(function (attributeRegex) {
      return attributeRegex instanceof RegExp;
    }).some(function (regex) {
      return regex.test(attributeName);
    });
  };

  var DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };

  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    var _ref7;

    if (!unsafeHtml.length) {
      return unsafeHtml;
    }

    if (sanitizeFunction && typeof sanitizeFunction === 'function') {
      return sanitizeFunction(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');

    var elements = (_ref7 = []).concat.apply(_ref7, _toConsumableArray(createdDocument.body.querySelectorAll('*')));

    var _iterator19 = _createForOfIteratorHelper(elements),
        _step19;

    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
        var _ref8;

        var element = _step19.value;
        var elementName = element.nodeName.toLowerCase();

        if (!Object.keys(allowList).includes(elementName)) {
          element.remove();
          continue;
        }

        var attributeList = (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.attributes));

        var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);

        var _iterator20 = _createForOfIteratorHelper(attributeList),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var attribute = _step20.value;

            if (!allowedAttribute(attribute, allowedAttributes)) {
              element.removeAttribute(attribute.nodeName);
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }

    return createdDocument.body.innerHTML;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): util/template-factory.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$5 = 'TemplateFactory';
  var Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
  };
  var DefaultType$4 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
  };
  var DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
  };
  /**
   * Class definition
   */

  var TemplateFactory = /*#__PURE__*/function (_Config5) {
    _inherits(TemplateFactory, _Config5);

    var _super12 = _createSuper(TemplateFactory);

    function TemplateFactory(config) {
      var _this37;

      _classCallCheck(this, TemplateFactory);

      _this37 = _super12.call(this);
      _this37._config = _this37._getConfig(config);
      return _this37;
    } // Getters


    _createClass(TemplateFactory, [{
      key: "getContent",
      value: // Public
      function getContent() {
        var _this38 = this;

        return Object.values(this._config.content).map(function (config) {
          return _this38._resolvePossibleFunction(config);
        }).filter(Boolean);
      }
    }, {
      key: "hasContent",
      value: function hasContent() {
        return this.getContent().length > 0;
      }
    }, {
      key: "changeContent",
      value: function changeContent(content) {
        this._checkContent(content);

        this._config.content = _objectSpread(_objectSpread({}, this._config.content), content);
        return this;
      }
    }, {
      key: "toHtml",
      value: function toHtml() {
        var templateWrapper = document.createElement('div');
        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);

        for (var _i8 = 0, _Object$entries2 = Object.entries(this._config.content); _i8 < _Object$entries2.length; _i8++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i8], 2),
              selector = _Object$entries2$_i[0],
              text = _Object$entries2$_i[1];

          this._setContent(templateWrapper, text, selector);
        }

        var template = templateWrapper.children[0];

        var extraClass = this._resolvePossibleFunction(this._config.extraClass);

        if (extraClass) {
          var _template$classList;

          (_template$classList = template.classList).add.apply(_template$classList, _toConsumableArray(extraClass.split(' ')));
        }

        return template;
      } // Private

    }, {
      key: "_typeCheckConfig",
      value: function _typeCheckConfig(config) {
        _get(_getPrototypeOf(TemplateFactory.prototype), "_typeCheckConfig", this).call(this, config);

        this._checkContent(config.content);
      }
    }, {
      key: "_checkContent",
      value: function _checkContent(arg) {
        for (var _i9 = 0, _Object$entries3 = Object.entries(arg); _i9 < _Object$entries3.length; _i9++) {
          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i9], 2),
              selector = _Object$entries3$_i[0],
              content = _Object$entries3$_i[1];

          _get(_getPrototypeOf(TemplateFactory.prototype), "_typeCheckConfig", this).call(this, {
            selector: selector,
            entry: content
          }, DefaultContentType);
        }
      }
    }, {
      key: "_setContent",
      value: function _setContent(template, content, selector) {
        var templateElement = SelectorEngine.findOne(selector, template);

        if (!templateElement) {
          return;
        }

        content = this._resolvePossibleFunction(content);

        if (!content) {
          templateElement.remove();
          return;
        }

        if (isElement(content)) {
          this._putElementInTemplate(getElement(content), templateElement);

          return;
        }

        if (this._config.html) {
          templateElement.innerHTML = this._maybeSanitize(content);
          return;
        }

        templateElement.textContent = content;
      }
    }, {
      key: "_maybeSanitize",
      value: function _maybeSanitize(arg) {
        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
      }
    }, {
      key: "_resolvePossibleFunction",
      value: function _resolvePossibleFunction(arg) {
        return typeof arg === 'function' ? arg(this) : arg;
      }
    }, {
      key: "_putElementInTemplate",
      value: function _putElementInTemplate(element, templateElement) {
        if (this._config.html) {
          templateElement.innerHTML = '';
          templateElement.append(element);
          return;
        }

        templateElement.textContent = element.textContent;
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$5;
      }
    }]);

    return TemplateFactory;
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */


  var NAME$4 = 'tooltip';
  var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_MODAL = 'modal';
  var CLASS_NAME_SHOW$2 = 'show';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_MODAL = ".".concat(CLASS_NAME_MODAL);
  var EVENT_MODAL_HIDE = 'hide.bs.modal';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  var EVENT_HIDE$2 = 'hide';
  var EVENT_HIDDEN$2 = 'hidden';
  var EVENT_SHOW$2 = 'show';
  var EVENT_SHOWN$2 = 'shown';
  var EVENT_INSERTED = 'inserted';
  var EVENT_CLICK$1 = 'click';
  var EVENT_FOCUSIN$1 = 'focusin';
  var EVENT_FOCUSOUT$1 = 'focusout';
  var EVENT_MOUSEENTER = 'mouseenter';
  var EVENT_MOUSELEAVE = 'mouseleave';
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };
  var Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    html: false,
    offset: [0, 0],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
    title: '',
    trigger: 'hover focus'
  };
  var DefaultType$3 = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
  };
  /**
   * Class definition
   */

  var Tooltip = /*#__PURE__*/function (_BaseComponent8) {
    _inherits(Tooltip, _BaseComponent8);

    var _super13 = _createSuper(Tooltip);

    function Tooltip(element, config) {
      var _this39;

      _classCallCheck(this, Tooltip);

      if (typeof Popper__namespace === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      }

      _this39 = _super13.call(this, element, config); // Private

      _this39._isEnabled = true;
      _this39._timeout = 0;
      _this39._isHovered = null;
      _this39._activeTrigger = {};
      _this39._popper = null;
      _this39._templateFactory = null;
      _this39._newContent = null; // Protected

      _this39.tip = null;

      _this39._setListeners();

      return _this39;
    } // Getters


    _createClass(Tooltip, [{
      key: "enable",
      value: // Public
      function enable() {
        this._isEnabled = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
    }, {
      key: "toggle",
      value: function toggle(event) {
        if (!this._isEnabled) {
          return;
        }

        if (event) {
          var context = this._initializeOnDelegatedTarget(event);

          context._activeTrigger.click = !context._activeTrigger.click;

          if (context._isWithActiveTrigger()) {
            context._enter();
          } else {
            context._leave();
          }

          return;
        }

        if (this._isShown()) {
          this._leave();

          return;
        }

        this._enter();
      }
    }, {
      key: "dispose",
      value: function dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

        if (this.tip) {
          this.tip.remove();
        }

        if (this._config.originalTitle) {
          this._element.setAttribute('title', this._config.originalTitle);
        }

        this._disposePopper();

        _get(_getPrototypeOf(Tooltip.prototype), "dispose", this).call(this);
      }
    }, {
      key: "show",
      value: function show() {
        var _this40 = this;

        if (this._element.style.display === 'none') {
          throw new Error('Please use show on visible elements');
        }

        if (!(this._isWithContent() && this._isEnabled)) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
        var shadowRoot = findShadowRoot(this._element);

        var isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);

        if (showEvent.defaultPrevented || !isInTheDom) {
          return;
        } // todo v6 remove this OR make it optional


        if (this.tip) {
          this.tip.remove();
          this.tip = null;
        }

        var tip = this._getTipElement();

        this._element.setAttribute('aria-describedby', tip.getAttribute('id'));

        var container = this._config.container;

        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
          container.append(tip);
          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
        }

        if (this._popper) {
          this._popper.update();
        } else {
          this._popper = this._createPopper(tip);
        }

        tip.classList.add(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          var _ref9;

          var _iterator21 = _createForOfIteratorHelper((_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children))),
              _step21;

          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var element = _step21.value;
              EventHandler.on(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
        }

        var complete = function complete() {
          EventHandler.trigger(_this40._element, _this40.constructor.eventName(EVENT_SHOWN$2));

          if (_this40._isHovered === false) {
            _this40._leave();
          }

          _this40._isHovered = false;
        };

        this._queueCallback(complete, this.tip, this._isAnimated());
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this41 = this;

        if (!this._isShown()) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));

        if (hideEvent.defaultPrevented) {
          return;
        }

        var tip = this._getTipElement();

        tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support

        if ('ontouchstart' in document.documentElement) {
          var _ref10;

          var _iterator22 = _createForOfIteratorHelper((_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children))),
              _step22;

          try {
            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
              var element = _step22.value;
              EventHandler.off(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator22.e(err);
          } finally {
            _iterator22.f();
          }
        }

        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        this._isHovered = null; // it is a trick to support manual triggering

        var complete = function complete() {
          if (_this41._isWithActiveTrigger()) {
            return;
          }

          if (!_this41._isHovered) {
            tip.remove();
          }

          _this41._element.removeAttribute('aria-describedby');

          EventHandler.trigger(_this41._element, _this41.constructor.eventName(EVENT_HIDDEN$2));

          _this41._disposePopper();
        };

        this._queueCallback(complete, this.tip, this._isAnimated());
      }
    }, {
      key: "update",
      value: function update() {
        if (this._popper) {
          this._popper.update();
        }
      } // Protected

    }, {
      key: "_isWithContent",
      value: function _isWithContent() {
        return Boolean(this._getTitle());
      }
    }, {
      key: "_getTipElement",
      value: function _getTipElement() {
        if (!this.tip) {
          this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
        }

        return this.tip;
      }
    }, {
      key: "_createTipElement",
      value: function _createTipElement(content) {
        var tip = this._getTemplateFactory(content).toHtml(); // todo: remove this check on v6


        if (!tip) {
          return null;
        }

        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2); // todo: on v6 the following can be achieved with CSS only

        tip.classList.add("bs-".concat(this.constructor.NAME, "-auto"));
        var tipId = getUID(this.constructor.NAME).toString();
        tip.setAttribute('id', tipId);

        if (this._isAnimated()) {
          tip.classList.add(CLASS_NAME_FADE$2);
        }

        return tip;
      }
    }, {
      key: "setContent",
      value: function setContent(content) {
        this._newContent = content;

        if (this._isShown()) {
          this._disposePopper();

          this.show();
        }
      }
    }, {
      key: "_getTemplateFactory",
      value: function _getTemplateFactory(content) {
        if (this._templateFactory) {
          this._templateFactory.changeContent(content);
        } else {
          this._templateFactory = new TemplateFactory(_objectSpread(_objectSpread({}, this._config), {}, {
            // the `content` var has to be after `this._config`
            // to override config.content in case of popover
            content: content,
            extraClass: this._resolvePossibleFunction(this._config.customClass)
          }));
        }

        return this._templateFactory;
      }
    }, {
      key: "_getContentForTemplate",
      value: function _getContentForTemplate() {
        return _defineProperty({}, SELECTOR_TOOLTIP_INNER, this._getTitle());
      }
    }, {
      key: "_getTitle",
      value: function _getTitle() {
        return this._resolvePossibleFunction(this._config.title) || this._config.originalTitle;
      } // Private

    }, {
      key: "_initializeOnDelegatedTarget",
      value: function _initializeOnDelegatedTarget(event) {
        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
      }
    }, {
      key: "_createPopper",
      value: function _createPopper(tip) {
        var placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;
        var attachment = AttachmentMap[placement.toUpperCase()];
        return Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this42 = this;

        var offset = this._config.offset;

        if (typeof offset === 'string') {
          return offset.split(',').map(function (value) {
            return Number.parseInt(value, 10);
          });
        }

        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this42._element);
          };
        }

        return offset;
      }
    }, {
      key: "_resolvePossibleFunction",
      value: function _resolvePossibleFunction(arg) {
        return typeof arg === 'function' ? arg.call(this._element) : arg;
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig(attachment) {
        var _this43 = this;

        var defaultBsPopperConfig = {
          placement: attachment,
          modifiers: [{
            name: 'flip',
            options: {
              fallbackPlacements: this._config.fallbackPlacements
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }, {
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'arrow',
            options: {
              element: ".".concat(this.constructor.NAME, "-arrow")
            }
          }, {
            name: 'preSetPlacement',
            enabled: true,
            phase: 'beforeMain',
            fn: function fn(data) {
              // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
              // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
              _this43._getTipElement().setAttribute('data-popper-placement', data.state.placement);
            }
          }]
        };
        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this44 = this;

        var triggers = this._config.trigger.split(' ');

        var _iterator23 = _createForOfIteratorHelper(triggers),
            _step23;

        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var trigger = _step23.value;

            if (trigger === 'click') {
              EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, function (event) {
                return _this44.toggle(event);
              });
            } else if (trigger !== TRIGGER_MANUAL) {
              var eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
              var eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
              EventHandler.on(this._element, eventIn, this._config.selector, function (event) {
                var context = _this44._initializeOnDelegatedTarget(event);

                context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;

                context._enter();
              });
              EventHandler.on(this._element, eventOut, this._config.selector, function (event) {
                var context = _this44._initializeOnDelegatedTarget(event);

                context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);

                context._leave();
              });
            }
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }

        this._hideModalHandler = function () {
          if (_this44._element) {
            _this44.hide();
          }
        };

        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

        if (this._config.selector) {
          this._config = _objectSpread(_objectSpread({}, this._config), {}, {
            trigger: 'manual',
            selector: ''
          });
        } else {
          this._fixTitle();
        }
      }
    }, {
      key: "_fixTitle",
      value: function _fixTitle() {
        var title = this._config.originalTitle;

        if (!title) {
          return;
        }

        if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {
          this._element.setAttribute('aria-label', title);
        }

        this._element.removeAttribute('title');
      }
    }, {
      key: "_enter",
      value: function _enter() {
        var _this45 = this;

        if (this._isShown() || this._isHovered) {
          this._isHovered = true;
          return;
        }

        this._isHovered = true;

        this._setTimeout(function () {
          if (_this45._isHovered) {
            _this45.show();
          }
        }, this._config.delay.show);
      }
    }, {
      key: "_leave",
      value: function _leave() {
        var _this46 = this;

        if (this._isWithActiveTrigger()) {
          return;
        }

        this._isHovered = false;

        this._setTimeout(function () {
          if (!_this46._isHovered) {
            _this46.hide();
          }
        }, this._config.delay.hide);
      }
    }, {
      key: "_setTimeout",
      value: function _setTimeout(handler, timeout) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(handler, timeout);
      }
    }, {
      key: "_isWithActiveTrigger",
      value: function _isWithActiveTrigger() {
        return Object.values(this._activeTrigger).includes(true);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        var dataAttributes = Manipulator.getDataAttributes(this._element);

        for (var _i10 = 0, _Object$keys5 = Object.keys(dataAttributes); _i10 < _Object$keys5.length; _i10++) {
          var dataAttribute = _Object$keys5[_i10];

          if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
            delete dataAttributes[dataAttribute];
          }
        }

        config = _objectSpread(_objectSpread({}, dataAttributes), _typeof(config) === 'object' && config ? config : {});
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);

        this._typeCheckConfig(config);

        return config;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.container = config.container === false ? document.body : getElement(config.container);

        if (typeof config.delay === 'number') {
          config.delay = {
            show: config.delay,
            hide: config.delay
          };
        }

        config.originalTitle = this._element.getAttribute('title') || '';

        if (typeof config.title === 'number') {
          config.title = config.title.toString();
        }

        if (typeof config.content === 'number') {
          config.content = config.content.toString();
        }

        return config;
      }
    }, {
      key: "_getDelegateConfig",
      value: function _getDelegateConfig() {
        var config = {};

        for (var key in this._config) {
          if (this.constructor.Default[key] !== this._config[key]) {
            config[key] = this._config[key];
          }
        } // In the future can be replaced with:
        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
        // `Object.fromEntries(keysWithDifferentValues)`


        return config;
      }
    }, {
      key: "_disposePopper",
      value: function _disposePopper() {
        if (this._popper) {
          this._popper.destroy();

          this._popper = null;
        }
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$3;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$4;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tooltip.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }]);

    return Tooltip;
  }(BaseComponent);
  /**
   * jQuery
   */


  defineJQueryPlugin(Tooltip);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$3 = 'popover';
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';

  var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {
    content: '',
    offset: [0, 8],
    placement: 'right',
    template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>',
    trigger: 'click'
  });

  var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {
    content: '(null|string|element|function)'
  });
  /**
   * Class definition
   */


  var Popover = /*#__PURE__*/function (_Tooltip) {
    _inherits(Popover, _Tooltip);

    var _super14 = _createSuper(Popover);

    function Popover() {
      _classCallCheck(this, Popover);

      return _super14.apply(this, arguments);
    }

    _createClass(Popover, [{
      key: "_isWithContent",
      value: // Overrides
      function _isWithContent() {
        return this._getTitle() || this._getContent();
      } // Private

    }, {
      key: "_getContentForTemplate",
      value: function _getContentForTemplate() {
        var _ref12;

        return _ref12 = {}, _defineProperty(_ref12, SELECTOR_TITLE, this._getTitle()), _defineProperty(_ref12, SELECTOR_CONTENT, this._getContent()), _ref12;
      }
    }, {
      key: "_getContent",
      value: function _getContent() {
        return this._resolvePossibleFunction(this._config.content);
      } // Static

    }], [{
      key: "Default",
      get: // Getters
      function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$3;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Popover.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * jQuery
   */


  defineJQueryPlugin(Popover);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$2 = 'scrollspy';
  var DATA_KEY$2 = 'bs.scrollspy';
  var EVENT_KEY$2 = ".".concat(DATA_KEY$2);
  var DATA_API_KEY = '.data-api';
  var EVENT_ACTIVATE = "activate".concat(EVENT_KEY$2);
  var EVENT_CLICK = "click".concat(EVENT_KEY$2);
  var EVENT_LOAD_DATA_API$1 = "load".concat(EVENT_KEY$2).concat(DATA_API_KEY);
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_TARGET_LINKS = '[href]';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_LINK_ITEMS = "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_NAV_ITEMS, " > ").concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS);
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: '0px 0px -25%',
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  var DefaultType$1 = {
    offset: '(number|null)',
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: 'string',
    smoothScroll: 'boolean',
    target: 'element',
    threshold: 'array'
  };
  /**
   * Class definition
   */

  var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {
    _inherits(ScrollSpy, _BaseComponent9);

    var _super15 = _createSuper(ScrollSpy);

    function ScrollSpy(element, config) {
      var _this47;

      _classCallCheck(this, ScrollSpy);

      _this47 = _super15.call(this, element, config); // this._element is the observablesContainer and config.target the menu links wrapper

      _this47._targetLinks = new Map();
      _this47._observableSections = new Map();
      _this47._rootElement = getComputedStyle(_this47._element).overflowY === 'visible' ? null : _this47._element;
      _this47._activeTarget = null;
      _this47._observer = null;
      _this47._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };

      _this47.refresh(); // initialize


      return _this47;
    } // Getters


    _createClass(ScrollSpy, [{
      key: "refresh",
      value: // Public
      function refresh() {
        this._initializeTargetsAndObservables();

        this._maybeEnableSmoothScroll();

        if (this._observer) {
          this._observer.disconnect();
        } else {
          this._observer = this._getNewObserver();
        }

        var _iterator24 = _createForOfIteratorHelper(this._observableSections.values()),
            _step24;

        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var section = _step24.value;

            this._observer.observe(section);
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._observer.disconnect();

        _get(_getPrototypeOf(ScrollSpy.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
        config.target = getElement(config.target) || document.body; // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only

        config.rootMargin = config.offset ? "".concat(config.offset, "px 0px -30%") : config.rootMargin;

        if (typeof config.threshold === 'string') {
          config.threshold = config.threshold.split(',').map(function (value) {
            return Number.parseFloat(value);
          });
        }

        return config;
      }
    }, {
      key: "_maybeEnableSmoothScroll",
      value: function _maybeEnableSmoothScroll() {
        var _this48 = this;

        if (!this._config.smoothScroll) {
          return;
        } // unregister any previous listeners


        EventHandler.off(this._config.target, EVENT_CLICK);
        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, function (event) {
          var observableSection = _this48._observableSections.get(event.target.hash);

          if (observableSection) {
            event.preventDefault();
            var root = _this48._rootElement || window;
            var height = observableSection.offsetTop - _this48._element.offsetTop;

            if (root.scrollTo) {
              root.scrollTo({
                top: height,
                behavior: 'smooth'
              });
              return;
            } // Chrome 60 doesn't support `scrollTo`


            root.scrollTop = height;
          }
        });
      }
    }, {
      key: "_getNewObserver",
      value: function _getNewObserver() {
        var _this49 = this;

        var options = {
          root: this._rootElement,
          threshold: this._config.threshold,
          rootMargin: this._config.rootMargin
        };
        return new IntersectionObserver(function (entries) {
          return _this49._observerCallback(entries);
        }, options);
      } // The logic of selection

    }, {
      key: "_observerCallback",
      value: function _observerCallback(entries) {
        var _this50 = this;

        var targetElement = function targetElement(entry) {
          return _this50._targetLinks.get("#".concat(entry.target.id));
        };

        var activate = function activate(entry) {
          _this50._previousScrollData.visibleEntryTop = entry.target.offsetTop;

          _this50._process(targetElement(entry));
        };

        var parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
        var userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
        this._previousScrollData.parentScrollTop = parentScrollTop;

        var _iterator25 = _createForOfIteratorHelper(entries),
            _step25;

        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var entry = _step25.value;

            if (!entry.isIntersecting) {
              this._activeTarget = null;

              this._clearActiveClass(targetElement(entry));

              continue;
            }

            var entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop

            if (userScrollsDown && entryIsLowerThanPrevious) {
              activate(entry); // if parent isn't scrolled, let's keep the first visible item, breaking the iteration

              if (!parentScrollTop) {
                return;
              }

              continue;
            } // if we are scrolling up, pick the smallest offsetTop


            if (!userScrollsDown && !entryIsLowerThanPrevious) {
              activate(entry);
            }
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
      }
    }, {
      key: "_initializeTargetsAndObservables",
      value: function _initializeTargetsAndObservables() {
        this._targetLinks = new Map();
        this._observableSections = new Map();
        var targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);

        var _iterator26 = _createForOfIteratorHelper(targetLinks),
            _step26;

        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var anchor = _step26.value;

            // ensure that the anchor has an id and is not disabled
            if (!anchor.hash || isDisabled(anchor)) {
              continue;
            }

            var observableSection = SelectorEngine.findOne(anchor.hash, this._element); // ensure that the observableSection exists & is visible

            if (isVisible(observableSection)) {
              this._targetLinks.set(anchor.hash, anchor);

              this._observableSections.set(anchor.hash, observableSection);
            }
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
      }
    }, {
      key: "_process",
      value: function _process(target) {
        if (this._activeTarget === target) {
          return;
        }

        this._clearActiveClass(this._config.target);

        this._activeTarget = target;
        target.classList.add(CLASS_NAME_ACTIVE$1);

        this._activateParents(target);

        EventHandler.trigger(this._element, EVENT_ACTIVATE, {
          relatedTarget: target
        });
      }
    }, {
      key: "_activateParents",
      value: function _activateParents(target) {
        // Activate dropdown parents
        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
          return;
        }

        var _iterator27 = _createForOfIteratorHelper(SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)),
            _step27;

        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var listGroup = _step27.value;

            // Set triggered links parents as active
            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
            var _iterator28 = _createForOfIteratorHelper(SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)),
                _step28;

            try {
              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                var item = _step28.value;
                item.classList.add(CLASS_NAME_ACTIVE$1);
              }
            } catch (err) {
              _iterator28.e(err);
            } finally {
              _iterator28.f();
            }
          }
        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }
      }
    }, {
      key: "_clearActiveClass",
      value: function _clearActiveClass(parent) {
        parent.classList.remove(CLASS_NAME_ACTIVE$1);
        var activeNodes = SelectorEngine.find("".concat(SELECTOR_TARGET_LINKS, ".").concat(CLASS_NAME_ACTIVE$1), parent);

        var _iterator29 = _createForOfIteratorHelper(activeNodes),
            _step29;

        try {
          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
            var node = _step29.value;
            node.classList.remove(CLASS_NAME_ACTIVE$1);
          }
        } catch (err) {
          _iterator29.e(err);
        } finally {
          _iterator29.f();
        }
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$1;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$2;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = ScrollSpy.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }]);

    return ScrollSpy;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {
    var _iterator30 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_SPY)),
        _step30;

    try {
      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
        var spy = _step30.value;
        ScrollSpy.getOrCreateInstance(spy);
      }
    } catch (err) {
      _iterator30.e(err);
    } finally {
      _iterator30.f();
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(ScrollSpy);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$1 = 'tab';
  var DATA_KEY$1 = 'bs.tab';
  var EVENT_KEY$1 = ".".concat(DATA_KEY$1);
  var EVENT_HIDE$1 = "hide".concat(EVENT_KEY$1);
  var EVENT_HIDDEN$1 = "hidden".concat(EVENT_KEY$1);
  var EVENT_SHOW$1 = "show".concat(EVENT_KEY$1);
  var EVENT_SHOWN$1 = "shown".concat(EVENT_KEY$1);
  var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY$1);
  var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY$1);
  var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY$1);
  var ARROW_LEFT_KEY = 'ArrowLeft';
  var ARROW_RIGHT_KEY = 'ArrowRight';
  var ARROW_UP_KEY = 'ArrowUp';
  var ARROW_DOWN_KEY = 'ArrowDown';
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$1 = 'show';
  var CLASS_DROPDOWN = 'dropdown';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
  var SELECTOR_DROPDOWN_ITEM = '.dropdown-item';
  var NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';
  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  var SELECTOR_OUTER = '.nav-item, .list-group-item';
  var SELECTOR_INNER = ".nav-link".concat(NOT_SELECTOR_DROPDOWN_TOGGLE, ", .list-group-item").concat(NOT_SELECTOR_DROPDOWN_TOGGLE, ", [role=\"tab\"]").concat(NOT_SELECTOR_DROPDOWN_TOGGLE);
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // todo:v6: could be only `tab`

  var SELECTOR_INNER_ELEM = "".concat(SELECTOR_INNER, ", ").concat(SELECTOR_DATA_TOGGLE);
  var SELECTOR_DATA_TOGGLE_ACTIVE = ".".concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"tab\"], .").concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"pill\"], .").concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"list\"]");
  /**
   * Class definition
   */

  var Tab = /*#__PURE__*/function (_BaseComponent10) {
    _inherits(Tab, _BaseComponent10);

    var _super16 = _createSuper(Tab);

    function Tab(element) {
      var _this51;

      _classCallCheck(this, Tab);

      _this51 = _super16.call(this, element);
      _this51._parent = _this51._element.closest(SELECTOR_TAB_PANEL);

      if (!_this51._parent) {
        return _possibleConstructorReturn(_this51); // todo: should Throw exception on v6
        // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)
      } // Set up initial aria attributes


      _this51._setInitialAttributes(_this51._parent, _this51._getChildren());

      EventHandler.on(_this51._element, EVENT_KEYDOWN, function (event) {
        return _this51._keydown(event);
      });
      return _this51;
    } // Getters


    _createClass(Tab, [{
      key: "show",
      value: // Public
      function show() {
        // Shows this elem and deactivate the active sibling if exists
        var innerElem = this._element;

        if (this._elemIsActive(innerElem)) {
          return;
        } // Search for active tab on same parent to deactivate it


        var active = this._getActiveElem();

        var hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
          relatedTarget: innerElem
        }) : null;
        var showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
          relatedTarget: active
        });

        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
          return;
        }

        this._deactivate(active, innerElem);

        this._activate(innerElem, active);
      } // Private

    }, {
      key: "_activate",
      value: function _activate(element, relatedElem) {
        var _this52 = this;

        if (!element) {
          return;
        }

        element.classList.add(CLASS_NAME_ACTIVE);

        this._activate(getElementFromSelector(element)); // Search and activate/show the proper section


        var complete = function complete() {
          if (element.getAttribute('role') !== 'tab') {
            element.classList.add(CLASS_NAME_SHOW$1);
            return;
          }

          element.focus();
          element.removeAttribute('tabindex');
          element.setAttribute('aria-selected', true);

          _this52._toggleDropDown(element, true);

          EventHandler.trigger(element, EVENT_SHOWN$1, {
            relatedTarget: relatedElem
          });
        };

        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(element, relatedElem) {
        var _this53 = this;

        if (!element) {
          return;
        }

        element.classList.remove(CLASS_NAME_ACTIVE);
        element.blur();

        this._deactivate(getElementFromSelector(element)); // Search and deactivate the shown section too


        var complete = function complete() {
          if (element.getAttribute('role') !== 'tab') {
            element.classList.remove(CLASS_NAME_SHOW$1);
            return;
          }

          element.setAttribute('aria-selected', false);
          element.setAttribute('tabindex', '-1');

          _this53._toggleDropDown(element, false);

          EventHandler.trigger(element, EVENT_HIDDEN$1, {
            relatedTarget: relatedElem
          });
        };

        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {
          return;
        }

        event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page

        event.preventDefault();
        var isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
        var nextActiveElement = getNextActiveElement(this._getChildren().filter(function (element) {
          return !isDisabled(element);
        }), event.target, isNext, true);

        if (nextActiveElement) {
          Tab.getOrCreateInstance(nextActiveElement).show();
        }
      }
    }, {
      key: "_getChildren",
      value: function _getChildren() {
        // collection of inner elements
        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
      }
    }, {
      key: "_getActiveElem",
      value: function _getActiveElem() {
        var _this54 = this;

        return this._getChildren().find(function (child) {
          return _this54._elemIsActive(child);
        }) || null;
      }
    }, {
      key: "_setInitialAttributes",
      value: function _setInitialAttributes(parent, children) {
        this._setAttributeIfNotExists(parent, 'role', 'tablist');

        var _iterator31 = _createForOfIteratorHelper(children),
            _step31;

        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var child = _step31.value;

            this._setInitialAttributesOnChild(child);
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }
      }
    }, {
      key: "_setInitialAttributesOnChild",
      value: function _setInitialAttributesOnChild(child) {
        child = this._getInnerElement(child);

        var isActive = this._elemIsActive(child);

        var outerElem = this._getOuterElement(child);

        child.setAttribute('aria-selected', isActive);

        if (outerElem !== child) {
          this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
        }

        if (!isActive) {
          child.setAttribute('tabindex', '-1');
        }

        this._setAttributeIfNotExists(child, 'role', 'tab'); // set attributes to the related panel too


        this._setInitialAttributesOnTargetPanel(child);
      }
    }, {
      key: "_setInitialAttributesOnTargetPanel",
      value: function _setInitialAttributesOnTargetPanel(child) {
        var target = getElementFromSelector(child);

        if (!target) {
          return;
        }

        this._setAttributeIfNotExists(target, 'role', 'tabpanel');

        if (child.id) {
          this._setAttributeIfNotExists(target, 'aria-labelledby', "#".concat(child.id));
        }
      }
    }, {
      key: "_toggleDropDown",
      value: function _toggleDropDown(element, open) {
        var outerElem = this._getOuterElement(element);

        if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
          return;
        }

        var toggle = function toggle(selector, className) {
          var element = SelectorEngine.findOne(selector, outerElem);

          if (element) {
            element.classList.toggle(className, open);
          }
        };

        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
        toggle(SELECTOR_DROPDOWN_ITEM, CLASS_NAME_ACTIVE);
        outerElem.setAttribute('aria-expanded', open);
      }
    }, {
      key: "_setAttributeIfNotExists",
      value: function _setAttributeIfNotExists(element, attribute, value) {
        if (!element.hasAttribute(attribute)) {
          element.setAttribute(attribute, value);
        }
      }
    }, {
      key: "_elemIsActive",
      value: function _elemIsActive(elem) {
        return elem.classList.contains(CLASS_NAME_ACTIVE);
      } // Try to get the inner element (usually the .nav-link)

    }, {
      key: "_getInnerElement",
      value: function _getInnerElement(elem) {
        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
      } // Try to get the outer element (usually the .nav-item)

    }, {
      key: "_getOuterElement",
      value: function _getOuterElement(elem) {
        return elem.closest(SELECTOR_OUTER) || elem;
      } // Static

    }], [{
      key: "NAME",
      get: function get() {
        return NAME$1;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tab.getOrCreateInstance(this);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }]);

    return Tab;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    Tab.getOrCreateInstance(this).show();
  });
  /**
   * Initialize on focus
   */

  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {
    var _iterator32 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)),
        _step32;

    try {
      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
        var element = _step32.value;
        Tab.getOrCreateInstance(element);
      }
    } catch (err) {
      _iterator32.e(err);
    } finally {
      _iterator32.f();
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Tab);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME = 'toast';
  var DATA_KEY = 'bs.toast';
  var EVENT_KEY = ".".concat(DATA_KEY);
  var EVENT_MOUSEOVER = "mouseover".concat(EVENT_KEY);
  var EVENT_MOUSEOUT = "mouseout".concat(EVENT_KEY);
  var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
  var EVENT_FOCUSOUT = "focusout".concat(EVENT_KEY);
  var EVENT_HIDE = "hide".concat(EVENT_KEY);
  var EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
  var EVENT_SHOW = "show".concat(EVENT_KEY);
  var EVENT_SHOWN = "shown".concat(EVENT_KEY);
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

  var CLASS_NAME_SHOW = 'show';
  var CLASS_NAME_SHOWING = 'showing';
  var DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5000
  };
  /**
   * Class definition
   */

  var Toast = /*#__PURE__*/function (_BaseComponent11) {
    _inherits(Toast, _BaseComponent11);

    var _super17 = _createSuper(Toast);

    function Toast(element, config) {
      var _this55;

      _classCallCheck(this, Toast);

      _this55 = _super17.call(this, element, config);
      _this55._timeout = null;
      _this55._hasMouseInteraction = false;
      _this55._hasKeyboardInteraction = false;

      _this55._setListeners();

      return _this55;
    } // Getters


    _createClass(Toast, [{
      key: "show",
      value: // Public
      function show() {
        var _this56 = this;

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

        if (showEvent.defaultPrevented) {
          return;
        }

        this._clearTimeout();

        if (this._config.animation) {
          this._element.classList.add(CLASS_NAME_FADE);
        }

        var complete = function complete() {
          _this56._element.classList.remove(CLASS_NAME_SHOWING);

          EventHandler.trigger(_this56._element, EVENT_SHOWN);

          _this56._maybeScheduleHide();
        };

        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


        reflow(this._element);

        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);

        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this57 = this;

        if (!this.isShown()) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

        if (hideEvent.defaultPrevented) {
          return;
        }

        var complete = function complete() {
          _this57._element.classList.add(CLASS_NAME_HIDE); // @deprecated


          _this57._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);

          EventHandler.trigger(_this57._element, EVENT_HIDDEN);
        };

        this._element.classList.add(CLASS_NAME_SHOWING);

        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._clearTimeout();

        if (this.isShown()) {
          this._element.classList.remove(CLASS_NAME_SHOW);
        }

        _get(_getPrototypeOf(Toast.prototype), "dispose", this).call(this);
      }
    }, {
      key: "isShown",
      value: function isShown() {
        return this._element.classList.contains(CLASS_NAME_SHOW);
      } // Private

    }, {
      key: "_maybeScheduleHide",
      value: function _maybeScheduleHide() {
        var _this58 = this;

        if (!this._config.autohide) {
          return;
        }

        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
          return;
        }

        this._timeout = setTimeout(function () {
          _this58.hide();
        }, this._config.delay);
      }
    }, {
      key: "_onInteraction",
      value: function _onInteraction(event, isInteracting) {
        switch (event.type) {
          case 'mouseover':
          case 'mouseout':
            this._hasMouseInteraction = isInteracting;
            break;

          case 'focusin':
          case 'focusout':
            this._hasKeyboardInteraction = isInteracting;
            break;
        }

        if (isInteracting) {
          this._clearTimeout();

          return;
        }

        var nextElement = event.relatedTarget;

        if (this._element === nextElement || this._element.contains(nextElement)) {
          return;
        }

        this._maybeScheduleHide();
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this59 = this;

        EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {
          return _this59._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {
          return _this59._onInteraction(event, false);
        });
        EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {
          return _this59._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {
          return _this59._onInteraction(event, false);
        });
      }
    }, {
      key: "_clearTimeout",
      value: function _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Toast.getOrCreateInstance(this, config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config](this);
          }
        });
      }
    }]);

    return Toast;
  }(BaseComponent);
  /**
   * Data API implementation
   */


  enableDismissTrigger(Toast);
  /**
   * jQuery
   */

  defineJQueryPlugin(Toast);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.2.1): index.umd.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var index_umd = {
    Alert: Alert,
    Button: Button,
    Carousel: Carousel,
    Collapse: Collapse,
    Dropdown: Dropdown,
    Modal: Modal,
    Offcanvas: Offcanvas,
    Popover: Popover,
    ScrollSpy: ScrollSpy,
    Tab: Tab,
    Toast: Toast,
    Tooltip: Tooltip
  };
  return index_umd;
});
$(function () {
  toggleConnectionStringAndPrefix(); // Show hide the connection string when a provider is selected

  $("#DatabaseProvider").change(function () {
    toggleConnectionStringAndPrefix();
  }); // Refresh the recipe description

  $("#recipes div a").on('click', function () {
    refreshDescription($(this));
  });
}); // Show or hide the connection string or table prefix section when the database provider is selected

function toggleConnectionStringAndPrefix() {
  $("#DatabaseProvider option:selected").each(function () {
    $(this).data("connection-string").toLowerCase() === "true" ? $(".connectionString").show() : $(".connectionString").hide();
    $(this).data("table-prefix").toLowerCase() === "true" ? $(".tablePrefix").show() : $(".tablePrefix").hide();
    $(this).data("connection-string").toLowerCase() === "true" ? $(".pwd").attr('required', 'required') : $(".pwd").removeAttr('required');
    $("#connectionStringHint").text($(this).data("connection-string-sample"));
  });
} // Show the recipe description


function refreshDescription(target) {
  var recipeName = $(target).data("recipe-name");
  var recipeDisplayName = $(target).data("recipe-display-name");
  var recipeDescription = $(target).data("recipe-description");
  $("#recipeButton").text(recipeDisplayName);
  $("#RecipeName").val(recipeName);
  $("#recipeButton").attr("title", recipeDescription);
  $("#recipeButton").focus();
}

function setLocalizationUrl() {
  var culturesList = document.getElementById('culturesList');
  window.location = culturesList.options[culturesList.selectedIndex].dataset.url;
}

function togglePasswordVisibility(passwordCtl, togglePasswordCtl) {
  // toggle the type attribute
  type = passwordCtl.getAttribute('type') === 'password' ? 'text' : 'password';
  passwordCtl.setAttribute('type', type); // toggle the eye slash icon

  icon = togglePasswordCtl.getElementsByClassName('icon')[0];

  if (icon.getAttribute('data-icon')) {
    // if the icon is rendered as a svg
    type === 'password' ? icon.setAttribute('data-icon', 'eye') : icon.setAttribute('data-icon', 'eye-slash');
  } else {
    // if the icon is still a <i> element
    type === 'password' ? icon.classList.remove('fa-eye-slash') : icon.classList.remove('fa-eye');
    type === 'password' ? icon.classList.add('fa-eye') : icon.classList.add('fa-eye-slash');
  }
}
(function ($) {
  $.fn.strength = function (options) {
    var settings = $.extend({
      minLength: 8,
      upperCase: false,
      lowerCase: false,
      numbers: false,
      specialchars: false,
      target: '',
      style: ''
    }, options);
    var capitalletters = 0;
    var lowerletters = 0;
    var numbers = 0;
    var specialchars = 0;
    var upperCase = new RegExp('[A-Z]');
    var lowerCase = new RegExp('[a-z]');
    var number = new RegExp('[0-9]');
    var specialchar = new RegExp('[^A-Za-z0-9]');
    var valid = false;
    createProgressBar(0, '');

    function getPercentage(a, b) {
      return (b / a * 100).toFixed(0);
    }

    function getLevel(value) {
      if (value >= 100) {
        return "bg-success";
      }

      if (value >= 50) {
        return "bg-warning";
      }

      if (value == 0) {
        return ''; // grayed
      }

      return "bg-danger";
    }

    function checkStrength(value) {
      minLength = value.length >= settings.minLength ? 1 : 0;
      capitalletters = !settings.upperCase || value.match(upperCase) ? 1 : 0;
      lowerletters = !settings.lowerCase || value.match(lowerCase) ? 1 : 0;
      numbers = !settings.numbers || value.match(number) ? 1 : 0;
      specialchars = !settings.specialchars || value.match(specialchar) ? 1 : 0;
      var total = minLength + capitalletters + lowerletters + numbers + specialchars;
      var percentage = getPercentage(5, total);
      valid = percentage >= 100;
      createProgressBar(percentage, getLevel(percentage));
    }

    function createProgressBar(percentage, level) {
      var el = $('<div class="progress" value="' + percentage + '" style="' + settings.style + '" max="100" aria-describedby=""><div class="progress-bar ' + level + '" role="progress-bar" style="width: ' + percentage + '%;"></div></div>');
      var target = $(settings.target);
      target.empty();
      target.append(el);
    }

    this.bind('keyup keydown', function (event) {
      checkStrength($(this).val());
    });
    this.bind('drop', function (event) {
      checkStrength(event.originalEvent.dataTransfer.getData("text"));
    });
    this.parents('form').on('submit', function () {
      if (!valid) {
        event.preventDefault();
      }
    });
  };
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0V2luZG93LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzIiwiLi4vLi4vc3JjL3V0aWxzL21hdGguanMiLCIuLi8uLi9zcmMvdXRpbHMvdXNlckFnZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9pc0xheW91dFZpZXdwb3J0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwiLi4vLi4vc3JjL2VudW1zLmpzIiwiLi4vLi4vc3JjL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwiLi4vLi4vc3JjL3V0aWxzL2RlYm91bmNlLmpzIiwiLi4vLi4vc3JjL3V0aWxzL2Zvcm1hdC5qcyIsIi4uLy4uL3NyYy91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qcyIsIi4uLy4uL3NyYy91dGlscy91bmlxdWVCeS5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvY29udGFpbnMuanMiLCIuLi8uLi9zcmMvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCIuLi8uLi9zcmMvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCIuLi8uLi9zcmMvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwiLi4vLi4vc3JjL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIi4uLy4uL3NyYy91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCIuLi8uLi9zcmMvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCIuLi8uLi9zcmMvY3JlYXRlUG9wcGVyLmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCIuLi8uLi9zcmMvbW9kaWZpZXJzL29mZnNldC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvZmxpcC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRBbHRBeGlzLmpzIiwiLi4vLi4vc3JjL3V0aWxzL3dpdGhpbi5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9hcnJvdy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvaGlkZS5qcyIsIi4uLy4uL3NyYy9wb3BwZXItbGl0ZS5qcyIsIi4uLy4uL3NyYy9wb3BwZXIuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9pbmRleC5qcyIsIi4uLy4uL2pzL3NyYy9kb20vZXZlbnQtaGFuZGxlci5qcyIsIi4uLy4uL2pzL3NyYy9kb20vZGF0YS5qcyIsIi4uLy4uL2pzL3NyYy9kb20vbWFuaXB1bGF0b3IuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9jb25maWcuanMiLCIuLi8uLi9qcy9zcmMvYmFzZS1jb21wb25lbnQuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzIiwiLi4vLi4vanMvc3JjL2FsZXJ0LmpzIiwiLi4vLi4vanMvc3JjL2J1dHRvbi5qcyIsIi4uLy4uL2pzL3NyYy9kb20vc2VsZWN0b3ItZW5naW5lLmpzIiwiLi4vLi4vanMvc3JjL3V0aWwvc3dpcGUuanMiLCIuLi8uLi9qcy9zcmMvY2Fyb3VzZWwuanMiLCIuLi8uLi9qcy9zcmMvY29sbGFwc2UuanMiLCIuLi8uLi9qcy9zcmMvZHJvcGRvd24uanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9zY3JvbGxiYXIuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9iYWNrZHJvcC5qcyIsIi4uLy4uL2pzL3NyYy91dGlsL2ZvY3VzdHJhcC5qcyIsIi4uLy4uL2pzL3NyYy9tb2RhbC5qcyIsIi4uLy4uL2pzL3NyYy9vZmZjYW52YXMuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9zYW5pdGl6ZXIuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC90ZW1wbGF0ZS1mYWN0b3J5LmpzIiwiLi4vLi4vanMvc3JjL3Rvb2x0aXAuanMiLCIuLi8uLi9qcy9zcmMvcG9wb3Zlci5qcyIsIi4uLy4uL2pzL3NyYy9zY3JvbGxzcHkuanMiLCIuLi8uLi9qcy9zcmMvdGFiLmpzIiwiLi4vLi4vanMvc3JjL3RvYXN0LmpzIiwiLi4vLi4vanMvaW5kZXgudW1kLmpzIiwic2V0dXAuanMiLCJzdHJlbmd0aC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJmbGF0IiwiYXJyYXkiLCJjYWxsIiwiY29uY2F0IiwiYXBwbHkiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsIml0ZW0iLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsImxlbmd0aCIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImlzQXJyYXlMaWtlIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwic2libGluZyIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiY3JlYXRlT3B0aW9ucyIsIm9iamVjdCIsIl8iLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiY3JlYXRlIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJsZXZlcmFnZU5hdGl2ZSIsInRyaWdnZXIiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsInJjdXN0b21Qcm9wIiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJydHJpbUNTUyIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJ3aWR0aCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsQm94U3R5bGVzIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJpc0N1c3RvbVByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwiYm94U2l6aW5nTmVlZGVkIiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9wdHMiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiZ2V0V2luZG93IiwiaXNFbGVtZW50IiwiT3duRWxlbWVudCIsIkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwibWluIiwiZ2V0VUFTdHJpbmciLCJ1YURhdGEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnREYXRhIiwiYnJhbmRzIiwiYnJhbmQiLCJ1c2VyQWdlbnQiLCJpc0xheW91dFZpZXdwb3J0IiwiZWxlbWVudCIsImluY2x1ZGVTY2FsZSIsImlzRml4ZWRTdHJhdGVneSIsImNsaWVudFJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJ2aXN1YWxWaWV3cG9ydCIsImFkZFZpc3VhbE9mZnNldHMiLCJ4Iiwib2Zmc2V0TGVmdCIsInkiLCJvZmZzZXRUb3AiLCJib3R0b20iLCJnZXRXaW5kb3dTY3JvbGwiLCJnZXRIVE1MRWxlbWVudFNjcm9sbCIsImdldE5vZGVTY3JvbGwiLCJnZXROb2RlTmFtZSIsImdldERvY3VtZW50RWxlbWVudCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsImlzRWxlbWVudFNjYWxlZCIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwic2Nyb2xsIiwib2Zmc2V0cyIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJnZXRMYXlvdXRSZWN0IiwiYWJzIiwiZ2V0UGFyZW50Tm9kZSIsImFzc2lnbmVkU2xvdCIsImdldFNjcm9sbFBhcmVudCIsImxpc3RTY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50IiwiaXNCb2R5IiwiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwidXBkYXRlZExpc3QiLCJpc1RhYmxlRWxlbWVudCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJnZXRDb250YWluaW5nQmxvY2siLCJpc0ZpcmVmb3giLCJpc0lFIiwiZWxlbWVudENzcyIsImN1cnJlbnROb2RlIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImdldE9mZnNldFBhcmVudCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsImNsaXBwaW5nUGFyZW50cyIsInZpZXdwb3J0IiwicG9wcGVyIiwicmVmZXJlbmNlIiwidmFyaWF0aW9uUGxhY2VtZW50cyIsInJlZHVjZSIsImFjYyIsInBsYWNlbWVudCIsInBsYWNlbWVudHMiLCJiZWZvcmVSZWFkIiwicmVhZCIsImFmdGVyUmVhZCIsImJlZm9yZU1haW4iLCJtYWluIiwiYWZ0ZXJNYWluIiwiYmVmb3JlV3JpdGUiLCJ3cml0ZSIsImFmdGVyV3JpdGUiLCJtb2RpZmllclBoYXNlcyIsIm9yZGVyIiwibW9kaWZpZXJzIiwiTWFwIiwidmlzaXRlZCIsIlNldCIsImZvckVhY2giLCJtb2RpZmllciIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcCIsImRlcE1vZGlmaWVyIiwib3JkZXJNb2RpZmllcnMiLCJvcmRlcmVkTW9kaWZpZXJzIiwicGhhc2UiLCJkZWJvdW5jZSIsInBlbmRpbmciLCJQcm9taXNlIiwiZm9ybWF0Iiwic3RyIiwiYyIsIklOVkFMSURfTU9ESUZJRVJfRVJST1IiLCJNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IiLCJWQUxJRF9QUk9QRVJUSUVTIiwidmFsaWRhdGVNb2RpZmllcnMiLCJlbmFibGVkIiwiZWZmZWN0IiwicmVxdWlyZW1lbnQiLCJtb2QiLCJ1bmlxdWVCeSIsImlkZW50aWZpZXJzIiwiZ2V0QmFzZVBsYWNlbWVudCIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiZXhpc3RpbmciLCJnZXRWaWV3cG9ydFJlY3QiLCJzdHJhdGVneSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibGF5b3V0Vmlld3BvcnQiLCJnZXREb2N1bWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImNoaWxkIiwicm9vdE5vZGUiLCJpc1NhbWVOb2RlIiwicmVjdFRvQ2xpZW50UmVjdCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUiLCJjbGlwcGluZ1BhcmVudCIsImdldENsaXBwaW5nUGFyZW50cyIsImNhbkVzY2FwZUNsaXBwaW5nIiwiY2xpcHBlckVsZW1lbnQiLCJnZXRDbGlwcGluZ1JlY3QiLCJib3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJmaXJzdENsaXBwaW5nUGFyZW50IiwiY2xpcHBpbmdSZWN0IiwiYWNjUmVjdCIsImdldFZhcmlhdGlvbiIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsImNvbXB1dGVPZmZzZXRzIiwiYmFzZVBsYWNlbWVudCIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJnZXRGcmVzaFNpZGVPYmplY3QiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsImRldGVjdE92ZXJmbG93IiwiZWxlbWVudENvbnRleHQiLCJhbHRCb3VuZGFyeSIsImFsdENvbnRleHQiLCJwb3BwZXJSZWN0IiwicmVjdHMiLCJjbGlwcGluZ0NsaWVudFJlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJPZmZzZXRzIiwicG9wcGVyQ2xpZW50UmVjdCIsImVsZW1lbnRDbGllbnRSZWN0Iiwib3ZlcmZsb3dPZmZzZXRzIiwib2Zmc2V0RGF0YSIsIm1vZGlmaWVyc0RhdGEiLCJtdWx0aXBseSIsImF4aXMiLCJJTlZBTElEX0VMRU1FTlRfRVJST1IiLCJJTkZJTklURV9MT09QX0VSUk9SIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsInNvbWUiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiZGVmYXVsdE1vZGlmaWVycyIsImRlZmF1bHRPcHRpb25zIiwiY3JlYXRlUG9wcGVyIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwiaW5zdGFuY2UiLCJzZXRPcHRpb25zIiwic2V0T3B0aW9uc0FjdGlvbiIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJzY3JvbGxQYXJlbnRzIiwiZmxpcE1vZGlmaWVyIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJydW5Nb2RpZmllckVmZmVjdHMiLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fZGVidWdfbG9vcHNfXyIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiY2xlYW51cEZuIiwibm9vcEZuIiwicGFzc2l2ZSIsInJlc2l6ZSIsInVuc2V0U2lkZXMiLCJyb3VuZE9mZnNldHNCeURQUiIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJtYXBUb1N0eWxlcyIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiaGFzWCIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiaGVpZ2h0UHJvcCIsIndpZHRoUHJvcCIsImNvbW1vblN0eWxlcyIsImNvbXB1dGVTdHlsZXMiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJwcm9wZXJ0eSIsImFycm93IiwiYXBwbHlTdHlsZXMiLCJhc3NpZ24iLCJpbml0aWFsU3R5bGVzIiwic3R5bGVQcm9wZXJ0aWVzIiwiYXR0cmlidXRlIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJmbGlwVmFyaWF0aW9ucyIsImFsbG93ZWRBdXRvUGxhY2VtZW50cyIsImFsbFBsYWNlbWVudHMiLCJhbGxvd2VkUGxhY2VtZW50cyIsIm92ZXJmbG93cyIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJmbGlwIiwiX3NraXAiLCJjaGVja01haW5BeGlzIiwiYWx0QXhpcyIsImNoZWNrQWx0QXhpcyIsInNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyIsImZhbGxiYWNrUGxhY2VtZW50cyIsInByZWZlcnJlZFBsYWNlbWVudCIsImlzQmFzZVBsYWNlbWVudCIsInJlZmVyZW5jZVJlY3QiLCJjaGVja3NNYXAiLCJtYWtlRmFsbGJhY2tDaGVja3MiLCJmaXJzdEZpdHRpbmdQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImV2ZXJ5IiwibnVtYmVyT2ZDaGVja3MiLCJmaXR0aW5nUGxhY2VtZW50IiwiZ2V0QWx0QXhpcyIsIndpdGhpbiIsIm1hdGhNYXgiLCJtYXRoTWluIiwid2l0aGluTWF4Q2xhbXAiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0ZXRoZXIiLCJ0ZXRoZXJPZmZzZXQiLCJ0ZXRoZXJPZmZzZXRWYWx1ZSIsIm5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSIsIm9mZnNldE1vZGlmaWVyU3RhdGUiLCJtYWluU2lkZSIsImFsdFNpZGUiLCJhZGRpdGl2ZSIsIm1pbkxlbiIsIm1heExlbiIsImFycm93RWxlbWVudCIsImFycm93UmVjdCIsImFycm93UGFkZGluZ09iamVjdCIsImFycm93UGFkZGluZ01pbiIsImFycm93UGFkZGluZ01heCIsImFycm93TGVuIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRPZmZzZXQiLCJvZmZzZXRNb2RpZmllclZhbHVlIiwidGV0aGVyTWluIiwidGV0aGVyTWF4IiwicHJldmVudGVkT2Zmc2V0IiwiaXNPcmlnaW5TaWRlIiwidG9QYWRkaW5nT2JqZWN0IiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiY2xpZW50U2l6ZSIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic2lkZSIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiZXZlbnRMaXN0ZW5lcnMiLCJNQVhfVUlEIiwiTUlMTElTRUNPTkRTX01VTFRJUExJRVIiLCJUUkFOU0lUSU9OX0VORCIsImdldFVJRCIsImZsb29yIiwiZ2V0U2VsZWN0b3IiLCJocmVmQXR0cmlidXRlIiwiaW5jbHVkZXMiLCJzdGFydHNXaXRoIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEVsZW1lbnRGcm9tU2VsZWN0b3IiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiTnVtYmVyIiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImRpc3BhdGNoRXZlbnQiLCJnZXRFbGVtZW50IiwiaXNWaXNpYmxlIiwiZWxlbWVudElzVmlzaWJsZSIsImNsb3NlZERldGFpbHMiLCJzdW1tYXJ5IiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImNsYXNzTGlzdCIsImhhc0F0dHJpYnV0ZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwicmVmbG93IiwiZ2V0alF1ZXJ5IiwiRE9NQ29udGVudExvYWRlZENhbGxiYWNrcyIsIm9uRE9NQ29udGVudExvYWRlZCIsImlzUlRMIiwiZGVmaW5lSlF1ZXJ5UGx1Z2luIiwicGx1Z2luIiwiTkFNRSIsIkpRVUVSWV9OT19DT05GTElDVCIsImpRdWVyeUludGVyZmFjZSIsIkNvbnN0cnVjdG9yIiwiZXhlY3V0ZSIsImV4ZWN1dGVBZnRlclRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRWxlbWVudCIsIndhaXRGb3JUcmFuc2l0aW9uIiwiZHVyYXRpb25QYWRkaW5nIiwiZW11bGF0ZWREdXJhdGlvbiIsImNhbGxlZCIsImdldE5leHRBY3RpdmVFbGVtZW50Iiwic2hvdWxkR2V0TmV4dCIsImlzQ3ljbGVBbGxvd2VkIiwibGlzdExlbmd0aCIsIm5hbWVzcGFjZVJlZ2V4Iiwic3RyaXBOYW1lUmVnZXgiLCJzdHJpcFVpZFJlZ2V4IiwiZXZlbnRSZWdpc3RyeSIsInVpZEV2ZW50IiwiY3VzdG9tRXZlbnRzIiwibmF0aXZlRXZlbnRzIiwibWFrZUV2ZW50VWlkIiwiZ2V0RWxlbWVudEV2ZW50cyIsImJvb3RzdHJhcEhhbmRsZXIiLCJoeWRyYXRlT2JqIiwib25lT2ZmIiwiRXZlbnRIYW5kbGVyIiwiYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIiLCJkb21FbGVtZW50cyIsImRvbUVsZW1lbnQiLCJmaW5kSGFuZGxlciIsImNhbGxhYmxlIiwiZGVsZWdhdGlvblNlbGVjdG9yIiwibm9ybWFsaXplUGFyYW1ldGVycyIsIm9yaWdpbmFsVHlwZUV2ZW50IiwiZGVsZWdhdGlvbkZ1bmN0aW9uIiwiaXNEZWxlZ2F0ZWQiLCJ0eXBlRXZlbnQiLCJnZXRUeXBlRXZlbnQiLCJhZGRIYW5kbGVyIiwid3JhcEZ1bmN0aW9uIiwicHJldmlvdXNGdW5jdGlvbiIsInJlbW92ZUhhbmRsZXIiLCJCb29sZWFuIiwicmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzIiwic3RvcmVFbGVtZW50RXZlbnQiLCJoYW5kbGVyS2V5IiwiaW5OYW1lc3BhY2UiLCJpc05hbWVzcGFjZSIsImVsZW1lbnRFdmVudCIsImtleUhhbmRsZXJzIiwialF1ZXJ5RXZlbnQiLCJuYXRpdmVEaXNwYXRjaCIsIm1ldGEiLCJfdW51c2VkIiwiZW50cmllcyIsImVsZW1lbnRNYXAiLCJpbnN0YW5jZU1hcCIsInNpemUiLCJmcm9tIiwibm9ybWFsaXplRGF0YSIsImRlY29kZVVSSUNvbXBvbmVudCIsIm5vcm1hbGl6ZURhdGFLZXkiLCJjaHIiLCJNYW5pcHVsYXRvciIsInNldERhdGFBdHRyaWJ1dGUiLCJyZW1vdmVEYXRhQXR0cmlidXRlIiwiZ2V0RGF0YUF0dHJpYnV0ZXMiLCJic0tleXMiLCJkYXRhc2V0IiwicHVyZUtleSIsImNoYXJBdCIsImdldERhdGFBdHRyaWJ1dGUiLCJDb25maWciLCJfZ2V0Q29uZmlnIiwiY29uZmlnIiwiX21lcmdlQ29uZmlnT2JqIiwiX2NvbmZpZ0FmdGVyTWVyZ2UiLCJfdHlwZUNoZWNrQ29uZmlnIiwianNvbkNvbmZpZyIsIkRlZmF1bHQiLCJjb25maWdUeXBlcyIsIkRlZmF1bHRUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsIlZFUlNJT04iLCJCYXNlQ29tcG9uZW50IiwiX2VsZW1lbnQiLCJfY29uZmlnIiwiREFUQV9LRVkiLCJkaXNwb3NlIiwiRVZFTlRfS0VZIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3BlcnR5TmFtZSIsIl9xdWV1ZUNhbGxiYWNrIiwiaXNBbmltYXRlZCIsImdldEluc3RhbmNlIiwiZW5hYmxlRGlzbWlzc1RyaWdnZXIiLCJjb21wb25lbnQiLCJjbGlja0V2ZW50IiwidGFnTmFtZSIsImdldE9yQ3JlYXRlSW5zdGFuY2UiLCJFVkVOVF9DTE9TRSIsIkVWRU5UX0NMT1NFRCIsIkNMQVNTX05BTUVfRkFERSIsIkNMQVNTX05BTUVfU0hPVyIsIkFsZXJ0IiwiY2xvc2UiLCJjbG9zZUV2ZW50IiwiX2Rlc3Ryb3lFbGVtZW50IiwiREFUQV9BUElfS0VZIiwiQ0xBU1NfTkFNRV9BQ1RJVkUiLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJIiwiQnV0dG9uIiwiU2VsZWN0b3JFbmdpbmUiLCJmaW5kT25lIiwiYW5jZXN0b3IiLCJwcmV2aW91cyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJmb2N1c2FibGVDaGlsZHJlbiIsImZvY3VzYWJsZXMiLCJFVkVOVF9UT1VDSFNUQVJUIiwiRVZFTlRfVE9VQ0hNT1ZFIiwiRVZFTlRfVE9VQ0hFTkQiLCJFVkVOVF9QT0lOVEVSRE9XTiIsIkVWRU5UX1BPSU5URVJVUCIsIlBPSU5URVJfVFlQRV9UT1VDSCIsIlBPSU5URVJfVFlQRV9QRU4iLCJDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQiLCJTV0lQRV9USFJFU0hPTEQiLCJlbmRDYWxsYmFjayIsImxlZnRDYWxsYmFjayIsInJpZ2h0Q2FsbGJhY2siLCJTd2lwZSIsImlzU3VwcG9ydGVkIiwiX2RlbHRhWCIsIl9zdXBwb3J0UG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsIl9pbml0RXZlbnRzIiwiX3N0YXJ0IiwiX2V2ZW50SXNQb2ludGVyUGVuVG91Y2giLCJfZW5kIiwiX2hhbmRsZVN3aXBlIiwiX21vdmUiLCJhYnNEZWx0YVgiLCJtYXhUb3VjaFBvaW50cyIsIkFSUk9XX0xFRlRfS0VZIiwiQVJST1dfUklHSFRfS0VZIiwiVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCIsIk9SREVSX05FWFQiLCJPUkRFUl9QUkVWIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJFVkVOVF9TTElERSIsIkVWRU5UX1NMSUQiLCJFVkVOVF9LRVlET1dOIiwiRVZFTlRfTU9VU0VFTlRFUiIsIkVWRU5UX01PVVNFTEVBVkUiLCJFVkVOVF9EUkFHX1NUQVJUIiwiRVZFTlRfTE9BRF9EQVRBX0FQSSIsIkNMQVNTX05BTUVfQ0FST1VTRUwiLCJDTEFTU19OQU1FX1NMSURFIiwiQ0xBU1NfTkFNRV9FTkQiLCJDTEFTU19OQU1FX1NUQVJUIiwiQ0xBU1NfTkFNRV9ORVhUIiwiQ0xBU1NfTkFNRV9QUkVWIiwiU0VMRUNUT1JfQUNUSVZFIiwiU0VMRUNUT1JfSVRFTSIsIlNFTEVDVE9SX0FDVElWRV9JVEVNIiwiU0VMRUNUT1JfSVRFTV9JTUciLCJTRUxFQ1RPUl9JTkRJQ0FUT1JTIiwiU0VMRUNUT1JfREFUQV9TTElERSIsIlNFTEVDVE9SX0RBVEFfUklERSIsIktFWV9UT19ESVJFQ1RJT04iLCJrZXlib2FyZCIsInBhdXNlIiwicmlkZSIsInRvdWNoIiwiQ2Fyb3VzZWwiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfc3dpcGVIZWxwZXIiLCJfaW5kaWNhdG9yc0VsZW1lbnQiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJjeWNsZSIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsIl9jbGVhckludGVydmFsIiwiX3VwZGF0ZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJfbWF5YmVFbmFibGVDeWNsZSIsIml0ZW1zIiwiX2dldEl0ZW1zIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiX2dldEFjdGl2ZSIsImRlZmF1bHRJbnRlcnZhbCIsIl9rZXlkb3duIiwiX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMiLCJpbWciLCJlbmRDYWxsQmFjayIsInN3aXBlQ29uZmlnIiwiX2RpcmVjdGlvblRvT3JkZXIiLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImFjdGl2ZUluZGljYXRvciIsIm5ld0FjdGl2ZUluZGljYXRvciIsImVsZW1lbnRJbnRlcnZhbCIsImlzTmV4dCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsInRyaWdnZXJFdmVudCIsImV2ZW50TmFtZSIsIl9vcmRlclRvRGlyZWN0aW9uIiwic2xpZGVFdmVudCIsImlzQ3ljbGluZyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJjb21wbGV0ZUNhbGxCYWNrIiwiX2lzQW5pbWF0ZWQiLCJjbGVhckludGVydmFsIiwiY2Fyb3VzZWwiLCJzbGlkZUluZGV4IiwiY2Fyb3VzZWxzIiwiRVZFTlRfU0hPVyIsIkVWRU5UX1NIT1dOIiwiRVZFTlRfSElERSIsIkVWRU5UX0hJRERFTiIsIkNMQVNTX05BTUVfQ09MTEFQU0UiLCJDTEFTU19OQU1FX0NPTExBUFNJTkciLCJDTEFTU19OQU1FX0NPTExBUFNFRCIsIkNMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOIiwiQ0xBU1NfTkFNRV9IT1JJWk9OVEFMIiwiV0lEVEgiLCJIRUlHSFQiLCJTRUxFQ1RPUl9BQ1RJVkVTIiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtZW50IiwiX2luaXRpYWxpemVDaGlsZHJlbiIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJfaXNTaG93biIsImFjdGl2ZUNoaWxkcmVuIiwiX2dldEZpcnN0TGV2ZWxDaGlsZHJlbiIsInN0YXJ0RXZlbnQiLCJhY3RpdmVJbnN0YW5jZSIsIl9nZXREaW1lbnNpb24iLCJjYXBpdGFsaXplZERpbWVuc2lvbiIsInNjcm9sbFNpemUiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJzZWxlY3RvckVsZW1lbnRzIiwiRVNDQVBFX0tFWSIsIlRBQl9LRVkiLCJBUlJPV19VUF9LRVkiLCJBUlJPV19ET1dOX0tFWSIsIlJJR0hUX01PVVNFX0JVVFRPTiIsIkVWRU5UX0tFWURPV05fREFUQV9BUEkiLCJFVkVOVF9LRVlVUF9EQVRBX0FQSSIsIkNMQVNTX05BTUVfRFJPUFVQIiwiQ0xBU1NfTkFNRV9EUk9QRU5EIiwiQ0xBU1NfTkFNRV9EUk9QU1RBUlQiLCJDTEFTU19OQU1FX0RST1BVUF9DRU5URVIiLCJDTEFTU19OQU1FX0RST1BET1dOX0NFTlRFUiIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFX1NIT1dOIiwiU0VMRUNUT1JfTUVOVSIsIlNFTEVDVE9SX05BVkJBUiIsIlNFTEVDVE9SX05BVkJBUl9OQVYiLCJTRUxFQ1RPUl9WSVNJQkxFX0lURU1TIiwiUExBQ0VNRU5UX1RPUCIsIlBMQUNFTUVOVF9UT1BFTkQiLCJQTEFDRU1FTlRfQk9UVE9NIiwiUExBQ0VNRU5UX0JPVFRPTUVORCIsIlBMQUNFTUVOVF9SSUdIVCIsIlBMQUNFTUVOVF9MRUZUIiwiUExBQ0VNRU5UX1RPUENFTlRFUiIsIlBMQUNFTUVOVF9CT1RUT01DRU5URVIiLCJhdXRvQ2xvc2UiLCJwb3BwZXJDb25maWciLCJEcm9wZG93biIsIl9wb3BwZXIiLCJfcGFyZW50IiwiX21lbnUiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwic2hvd0V2ZW50IiwiX2NyZWF0ZVBvcHBlciIsIl9jb21wbGV0ZUhpZGUiLCJoaWRlRXZlbnQiLCJQb3BwZXIiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsIl9nZXRQbGFjZW1lbnQiLCJwYXJlbnREcm9wZG93biIsImlzRW5kIiwiX2dldE9mZnNldCIsInBvcHBlckRhdGEiLCJkZWZhdWx0QnNQb3BwZXJDb25maWciLCJfc2VsZWN0TWVudUl0ZW0iLCJvcGVuVG9nZ2xlcyIsImNvbXBvc2VkUGF0aCIsImlzTWVudVRhcmdldCIsImlzSW5wdXQiLCJpc0VzY2FwZUV2ZW50IiwiaXNVcE9yRG93bkV2ZW50IiwiZ2V0VG9nZ2xlQnV0dG9uIiwiZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiY2xlYXJNZW51cyIsIlNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQiLCJTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCIsIlBST1BFUlRZX1BBRERJTkciLCJQUk9QRVJUWV9NQVJHSU4iLCJTY3JvbGxCYXJIZWxwZXIiLCJnZXRXaWR0aCIsImRvY3VtZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiX2Rpc2FibGVPdmVyRmxvdyIsIl9zZXRFbGVtZW50QXR0cmlidXRlcyIsImNhbGN1bGF0ZWRWYWx1ZSIsIl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiaXNPdmVyZmxvd2luZyIsIl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSIsInN0eWxlUHJvcGVydHkiLCJzY3JvbGxiYXJXaWR0aCIsIm1hbmlwdWxhdGlvbkNhbGxCYWNrIiwiX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2siLCJhY3R1YWxWYWx1ZSIsInJlbW92ZVByb3BlcnR5IiwiY2FsbEJhY2siLCJFVkVOVF9NT1VTRURPV04iLCJjbGlja0NhbGxiYWNrIiwicm9vdEVsZW1lbnQiLCJCYWNrZHJvcCIsIl9pc0FwcGVuZGVkIiwiX2FwcGVuZCIsIl9nZXRFbGVtZW50IiwiX2VtdWxhdGVBbmltYXRpb24iLCJiYWNrZHJvcCIsIkVWRU5UX0ZPQ1VTSU4iLCJFVkVOVF9LRVlET1dOX1RBQiIsIlRBQl9OQVZfRk9SV0FSRCIsIlRBQl9OQVZfQkFDS1dBUkQiLCJhdXRvZm9jdXMiLCJ0cmFwRWxlbWVudCIsIkZvY3VzVHJhcCIsIl9pc0FjdGl2ZSIsIl9sYXN0VGFiTmF2RGlyZWN0aW9uIiwiYWN0aXZhdGUiLCJfaGFuZGxlRm9jdXNpbiIsIl9oYW5kbGVLZXlkb3duIiwiZGVhY3RpdmF0ZSIsIkVWRU5UX0hJREVfUFJFVkVOVEVEIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfQ0xJQ0tfRElTTUlTUyIsIkVWRU5UX01PVVNFRE9XTl9ESVNNSVNTIiwiRVZFTlRfS0VZRE9XTl9ESVNNSVNTIiwiQ0xBU1NfTkFNRV9PUEVOIiwiQ0xBU1NfTkFNRV9TVEFUSUMiLCJPUEVOX1NFTEVDVE9SIiwiU0VMRUNUT1JfRElBTE9HIiwiU0VMRUNUT1JfTU9EQUxfQk9EWSIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZm9jdXN0cmFwIiwiX2luaXRpYWxpemVGb2N1c1RyYXAiLCJfc2Nyb2xsQmFyIiwiX2FkanVzdERpYWxvZyIsIl9zaG93RWxlbWVudCIsIl9oaWRlTW9kYWwiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIm1vZGFsQm9keSIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uIiwiZXZlbnQyIiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJpc01vZGFsT3ZlcmZsb3dpbmciLCJpbml0aWFsT3ZlcmZsb3dZIiwiaXNCb2R5T3ZlcmZsb3dpbmciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImFscmVhZHlPcGVuIiwiQ0xBU1NfTkFNRV9TSE9XSU5HIiwiQ0xBU1NfTkFNRV9ISURJTkciLCJDTEFTU19OQU1FX0JBQ0tEUk9QIiwiT2ZmY2FudmFzIiwiY29tcGxldGVDYWxsYmFjayIsInVyaUF0dHJpYnV0ZXMiLCJBUklBX0FUVFJJQlVURV9QQVRURVJOIiwiU0FGRV9VUkxfUEFUVEVSTiIsIkRBVEFfVVJMX1BBVFRFUk4iLCJhbGxvd2VkQXR0cmlidXRlIiwiYWxsb3dlZEF0dHJpYnV0ZUxpc3QiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlUmVnZXgiLCJyZWdleCIsIkRlZmF1bHRBbGxvd2xpc3QiLCJhcmVhIiwiYnIiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwibGkiLCJvbCIsInByZSIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsInNhbml0aXplSHRtbCIsInVuc2FmZUh0bWwiLCJhbGxvd0xpc3QiLCJzYW5pdGl6ZUZ1bmN0aW9uIiwiZG9tUGFyc2VyIiwiY3JlYXRlZERvY3VtZW50IiwiZWxlbWVudE5hbWUiLCJhdHRyaWJ1dGVMaXN0IiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJleHRyYUNsYXNzIiwic2FuaXRpemUiLCJzYW5pdGl6ZUZuIiwidGVtcGxhdGUiLCJEZWZhdWx0Q29udGVudFR5cGUiLCJlbnRyeSIsIlRlbXBsYXRlRmFjdG9yeSIsImdldENvbnRlbnQiLCJfcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24iLCJjaGFuZ2VDb250ZW50IiwiX2NoZWNrQ29udGVudCIsInRvSHRtbCIsInRlbXBsYXRlV3JhcHBlciIsIl9tYXliZVNhbml0aXplIiwiX3NldENvbnRlbnQiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJfcHV0RWxlbWVudEluVGVtcGxhdGUiLCJESVNBTExPV0VEX0FUVFJJQlVURVMiLCJDTEFTU19OQU1FX01PREFMIiwiU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiIsIlNFTEVDVE9SX01PREFMIiwiRVZFTlRfTU9EQUxfSElERSIsIlRSSUdHRVJfSE9WRVIiLCJUUklHR0VSX0ZPQ1VTIiwiVFJJR0dFUl9DTElDSyIsIlRSSUdHRVJfTUFOVUFMIiwiRVZFTlRfSU5TRVJURUQiLCJFVkVOVF9DTElDSyIsIkVWRU5UX0ZPQ1VTT1VUIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJjdXN0b21DbGFzcyIsInRpdGxlIiwiVG9vbHRpcCIsIl9pc0VuYWJsZWQiLCJfdGltZW91dCIsIl9pc0hvdmVyZWQiLCJfYWN0aXZlVHJpZ2dlciIsIl90ZW1wbGF0ZUZhY3RvcnkiLCJfbmV3Q29udGVudCIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJvcmlnaW5hbFRpdGxlIiwiX2Rpc3Bvc2VQb3BwZXIiLCJfaXNXaXRoQ29udGVudCIsInNoYWRvd1Jvb3QiLCJpc0luVGhlRG9tIiwiX2dldFRpcEVsZW1lbnQiLCJfZ2V0VGl0bGUiLCJfY3JlYXRlVGlwRWxlbWVudCIsIl9nZXRDb250ZW50Rm9yVGVtcGxhdGUiLCJfZ2V0VGVtcGxhdGVGYWN0b3J5IiwidGlwSWQiLCJzZXRDb250ZW50IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiYXR0YWNobWVudCIsInRyaWdnZXJzIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwiX3NldFRpbWVvdXQiLCJkYXRhQXR0cmlidXRlcyIsImRhdGFBdHRyaWJ1dGUiLCJTRUxFQ1RPUl9USVRMRSIsIlNFTEVDVE9SX0NPTlRFTlQiLCJQb3BvdmVyIiwiX2dldENvbnRlbnQiLCJFVkVOVF9BQ1RJVkFURSIsIkNMQVNTX05BTUVfRFJPUERPV05fSVRFTSIsIlNFTEVDVE9SX0RBVEFfU1BZIiwiU0VMRUNUT1JfVEFSR0VUX0xJTktTIiwiU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAiLCJTRUxFQ1RPUl9OQVZfTElOS1MiLCJTRUxFQ1RPUl9OQVZfSVRFTVMiLCJTRUxFQ1RPUl9MSVNUX0lURU1TIiwiU0VMRUNUT1JfTElOS19JVEVNUyIsIlNFTEVDVE9SX0RST1BET1dOIiwiU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFIiwicm9vdE1hcmdpbiIsInNtb290aFNjcm9sbCIsInRocmVzaG9sZCIsIlNjcm9sbFNweSIsIl90YXJnZXRMaW5rcyIsIl9vYnNlcnZhYmxlU2VjdGlvbnMiLCJfcm9vdEVsZW1lbnQiLCJfYWN0aXZlVGFyZ2V0IiwiX29ic2VydmVyIiwiX3ByZXZpb3VzU2Nyb2xsRGF0YSIsInZpc2libGVFbnRyeVRvcCIsInBhcmVudFNjcm9sbFRvcCIsInJlZnJlc2giLCJfaW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcyIsIl9tYXliZUVuYWJsZVNtb290aFNjcm9sbCIsImRpc2Nvbm5lY3QiLCJfZ2V0TmV3T2JzZXJ2ZXIiLCJzZWN0aW9uIiwib2JzZXJ2ZSIsIm9ic2VydmFibGVTZWN0aW9uIiwiYmVoYXZpb3IiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIl9vYnNlcnZlckNhbGxiYWNrIiwidGFyZ2V0RWxlbWVudCIsIl9wcm9jZXNzIiwidXNlclNjcm9sbHNEb3duIiwiaXNJbnRlcnNlY3RpbmciLCJfY2xlYXJBY3RpdmVDbGFzcyIsImVudHJ5SXNMb3dlclRoYW5QcmV2aW91cyIsInRhcmdldExpbmtzIiwiYW5jaG9yIiwiX2FjdGl2YXRlUGFyZW50cyIsImxpc3RHcm91cCIsImFjdGl2ZU5vZGVzIiwic3B5IiwiQ0xBU1NfRFJPUERPV04iLCJTRUxFQ1RPUl9EUk9QRE9XTl9NRU5VIiwiU0VMRUNUT1JfRFJPUERPV05fSVRFTSIsIk5PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUiLCJTRUxFQ1RPUl9UQUJfUEFORUwiLCJTRUxFQ1RPUl9PVVRFUiIsIlNFTEVDVE9SX0lOTkVSIiwiU0VMRUNUT1JfSU5ORVJfRUxFTSIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFX0FDVElWRSIsIlRhYiIsIl9zZXRJbml0aWFsQXR0cmlidXRlcyIsIl9nZXRDaGlsZHJlbiIsImlubmVyRWxlbSIsIl9lbGVtSXNBY3RpdmUiLCJfZ2V0QWN0aXZlRWxlbSIsIl9kZWFjdGl2YXRlIiwiX2FjdGl2YXRlIiwicmVsYXRlZEVsZW0iLCJfdG9nZ2xlRHJvcERvd24iLCJuZXh0QWN0aXZlRWxlbWVudCIsIl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyIsIl9zZXRJbml0aWFsQXR0cmlidXRlc09uQ2hpbGQiLCJfZ2V0SW5uZXJFbGVtZW50IiwiaXNBY3RpdmUiLCJvdXRlckVsZW0iLCJfZ2V0T3V0ZXJFbGVtZW50IiwiX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbCIsIkVWRU5UX01PVVNFT1ZFUiIsIkVWRU5UX01PVVNFT1VUIiwiQ0xBU1NfTkFNRV9ISURFIiwiYXV0b2hpZGUiLCJUb2FzdCIsIl9oYXNNb3VzZUludGVyYWN0aW9uIiwiX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24iLCJfY2xlYXJUaW1lb3V0IiwiX21heWJlU2NoZWR1bGVIaWRlIiwiaXNTaG93biIsIl9vbkludGVyYWN0aW9uIiwiaXNJbnRlcmFjdGluZyIsInRvZ2dsZUNvbm5lY3Rpb25TdHJpbmdBbmRQcmVmaXgiLCJjaGFuZ2UiLCJyZWZyZXNoRGVzY3JpcHRpb24iLCJyZWNpcGVOYW1lIiwicmVjaXBlRGlzcGxheU5hbWUiLCJyZWNpcGVEZXNjcmlwdGlvbiIsInNldExvY2FsaXphdGlvblVybCIsImN1bHR1cmVzTGlzdCIsInRvZ2dsZVBhc3N3b3JkVmlzaWJpbGl0eSIsInBhc3N3b3JkQ3RsIiwidG9nZ2xlUGFzc3dvcmRDdGwiLCJpY29uIiwic3RyZW5ndGgiLCJtaW5MZW5ndGgiLCJ1cHBlckNhc2UiLCJsb3dlckNhc2UiLCJudW1iZXJzIiwic3BlY2lhbGNoYXJzIiwiY2FwaXRhbGxldHRlcnMiLCJsb3dlcmxldHRlcnMiLCJudW1iZXIiLCJzcGVjaWFsY2hhciIsInZhbGlkIiwiY3JlYXRlUHJvZ3Jlc3NCYXIiLCJnZXRQZXJjZW50YWdlIiwidG9GaXhlZCIsImdldExldmVsIiwiY2hlY2tTdHJlbmd0aCIsInRvdGFsIiwicGVyY2VudGFnZSIsImxldmVsIiwiZGF0YVRyYW5zZmVyIl0s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LEVBQWlCO01BQ3hDc2dELGFBQWEsQ0FBQzU5QixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFqb0MsR0FBUixFQUFELENBQWI7SUFDSCxDQUZEO0lBR0EsS0FBSzQzQixJQUFMLENBQVUsTUFBVixFQUFrQixVQUFVclMsS0FBVixFQUFpQjtNQUMvQnNnRCxhQUFhLENBQUN0Z0QsS0FBSyxDQUFDMEMsYUFBTixDQUFvQmcrQyxZQUFwQixDQUFpQ3BtRCxPQUFqQyxDQUF5QyxNQUF6QyxDQUFELENBQWI7SUFDSCxDQUZEO0lBSUEsS0FBS3ZILE9BQUwsQ0FBYSxNQUFiLEVBQXFCNk0sRUFBckIsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBWTtNQUMxQyxJQUFJLENBQUNxZ0QsS0FBTCxFQUFZO1FBQ1JqZ0QsS0FBSyxDQUFDZ0MsY0FBTjtNQUNIO0lBQ0osQ0FKRDtFQUtILENBbkZEO0FBb0ZILENBdEZBLEVBc0ZDM21CLE1BdEZELENBQUQiLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjItMDgtMjZUMTc6NTJaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0IHRyYWMtMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKHRyYWMtOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKHRyYWMtMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgdHJhYy02NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKHRyYWMtOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlIHRyYWMtODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKHRyYWMtMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKHRyYWMtMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICh0cmFjLTE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICh0cmFjLTEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAodHJhYy0xNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKHRyYWMtMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKHRyYWMtMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICh0cmFjLTY5MTEsIHRyYWMtODE2NSwgdHJhYy0xMTM4MiwgdHJhYy0xMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICh0cmFjLTEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKHRyYWMtNTA0LCB0cmFjLTEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGVcblx0XHQvLyBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZXZlbnQudGFyZ2V0LCB0eXBlICk7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhXFxbQ0RBVEFcXFt8XFxdXFxdPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICh0cmFjLTgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVud3JhcCBhIENEQVRBIHNlY3Rpb24gY29udGFpbmluZyBzY3JpcHQgY29udGVudHMuIFRoaXMgc2hvdWxkbid0IGJlXG5cdFx0XHRcdFx0XHRcdC8vIG5lZWRlZCBhcyBpbiBYTUwgZG9jdW1lbnRzIHRoZXkncmUgYWxyZWFkeSBub3QgdmlzaWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIGluc3BlY3RpbmcgZWxlbWVudCBjb250ZW50cyBhbmQgaW4gSFRNTCBkb2N1bWVudHMgdGhleSBoYXZlIG5vXG5cdFx0XHRcdFx0XHRcdC8vIG1lYW5pbmcgYnV0IHdlJ3JlIHByZXNlcnZpbmcgdGhhdCBsb2dpYyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGNvbXBsZXRlbHkgaW4gNC4wLiBTZWUgZ2gtNDkwNC5cblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgcmN1c3RvbVByb3AgPSAvXi0tLztcblxuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAodHJhYy0xNTA5OCwgdHJhYy0xNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cbnZhciB3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiO1xuXG5cbnZhciBydHJpbUNTUyA9IG5ldyBSZWdFeHAoXG5cdFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsXG5cdFwiZ1wiXG4pO1xuXG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKHRyYWMtODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgdHJhYy0xMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoZ2gtMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdC8vIHRyaW0gd2hpdGVzcGFjZSBmb3IgY3VzdG9tIHByb3BlcnR5IChpc3N1ZSBnaC00OTI2KVxuXHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXG5cdFx0XHQvLyBydHJpbSB0cmVhdHMgVSswMDBEIENBUlJJQUdFIFJFVFVSTiBhbmQgVSswMDBDIEZPUk0gRkVFRFxuXHRcdFx0Ly8gYXMgd2hpdGVzcGFjZSB3aGlsZSBDU1MgZG9lcyBub3QsIGJ1dCB0aGlzIGlzIG5vdCBhIHByb2JsZW1cblx0XHRcdC8vIGJlY2F1c2UgQ1NTIHByZXByb2Nlc3NpbmcgcmVwbGFjZXMgdGhlbSB3aXRoIFUrMDAwQSBMSU5FIEZFRURcblx0XHRcdC8vICh3aGljaCAqaXMqIENTUyB3aGl0ZXNwYWNlKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaW5wdXQtcHJlcHJvY2Vzc2luZ1xuXHRcdFx0cmV0ID0gcmV0LnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKHRyYWMtNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnIHRyYWMtOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICh0cmFjLTcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAodHJhYy0xMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCAodHJhYy0xMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGFzc05hbWUgKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGNsYXNzTmFtZSwgaSwgc2VsZixcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKHRyYWMtMTQ2ODYsIHRyYWMtMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICh0cmFjLTI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAodHJhYy05OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAodHJhYy05NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICh0cmFjLTYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gdHJhYy03NjUzLCB0cmFjLTgxMjUsIHRyYWMtODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAodHJhYy0xMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyB0cmFjLTk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICh0cmFjLTEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0IHRyYWMtMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICh0cmFjLTE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gdHJhYy05NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICh0cmFjLTExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyB0cmFjLTE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSB0cmFjLTg2MDUsIHRyYWMtMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIHRyYWMtMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG4vLyBSZXF1aXJlIHRoYXQgdGhlIFwid2hpdGVzcGFjZSBydW5cIiBzdGFydHMgZnJvbSBhIG5vbi13aGl0ZXNwYWNlXG4vLyB0byBhdm9pZCBPKE5eMikgYmVoYXZpb3Igd2hlbiB0aGUgZW5naW5lIHdvdWxkIHRyeSBtYXRjaGluZyBcIlxccyskXCIgYXQgZWFjaCBzcGFjZSBwb3NpdGlvbi5cbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfChbXlxcc1xcdUZFRkZcXHhBMF0pW1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAodHJhYy03MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAodHJhYy0xMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5kZWNsYXJlIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlOiBOb2RlIHwgV2luZG93KTogV2luZG93O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgY29uc3Qgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbmRlY2xhcmUgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBFbGVtZW50KTtcbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIGNvbnN0IE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEhUTUxFbGVtZW50KTtcbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICBjb25zdCBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgU2hhZG93Um9vdCk7XG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9O1xuIiwiLy8gQGZsb3dcbmV4cG9ydCBjb25zdCBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCBjb25zdCBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCBjb25zdCByb3VuZCA9IE1hdGgucm91bmQ7XG4iLCIvLyBAZmxvd1xudHlwZSBOYXZpZ2F0b3IgPSBOYXZpZ2F0b3IgJiB7IHVzZXJBZ2VudERhdGE/OiBOYXZpZ2F0b3JVQURhdGEgfTtcblxuaW50ZXJmYWNlIE5hdmlnYXRvclVBRGF0YSB7XG4gIGJyYW5kczogQXJyYXk8eyBicmFuZDogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcgfT47XG4gIG1vYmlsZTogYm9vbGVhbjtcbiAgcGxhdGZvcm06IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VUFTdHJpbmcoKTogc3RyaW5nIHtcbiAgY29uc3QgdWFEYXRhID0gKG5hdmlnYXRvcjogTmF2aWdhdG9yKS51c2VyQWdlbnREYXRhO1xuXG4gIGlmICh1YURhdGE/LmJyYW5kcykge1xuICAgIHJldHVybiB1YURhdGEuYnJhbmRzXG4gICAgICAubWFwKChpdGVtKSA9PiBgJHtpdGVtLmJyYW5kfS8ke2l0ZW0udmVyc2lvbn1gKVxuICAgICAgLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRVQVN0cmluZyBmcm9tICcuLi91dGlscy91c2VyQWdlbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0xheW91dFZpZXdwb3J0KCkge1xuICByZXR1cm4gIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBDbGllbnRSZWN0T2JqZWN0LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tICcuL2lzTGF5b3V0Vmlld3BvcnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoXG4gIGVsZW1lbnQ6IEVsZW1lbnQgfCBWaXJ0dWFsRWxlbWVudCxcbiAgaW5jbHVkZVNjYWxlOiBib29sZWFuID0gZmFsc2UsXG4gIGlzRml4ZWRTdHJhdGVneTogYm9vbGVhbiA9IGZhbHNlXG4pOiBDbGllbnRSZWN0T2JqZWN0IHtcbiAgY29uc3QgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGxldCBzY2FsZVggPSAxO1xuICBsZXQgc2NhbGVZID0gMTtcblxuICBpZiAoaW5jbHVkZVNjYWxlICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBzY2FsZVggPVxuICAgICAgKGVsZW1lbnQ6IEhUTUxFbGVtZW50KS5vZmZzZXRXaWR0aCA+IDBcbiAgICAgICAgPyByb3VuZChjbGllbnRSZWN0LndpZHRoKSAvIChlbGVtZW50OiBIVE1MRWxlbWVudCkub2Zmc2V0V2lkdGggfHwgMVxuICAgICAgICA6IDE7XG4gICAgc2NhbGVZID1cbiAgICAgIChlbGVtZW50OiBIVE1MRWxlbWVudCkub2Zmc2V0SGVpZ2h0ID4gMFxuICAgICAgICA/IHJvdW5kKGNsaWVudFJlY3QuaGVpZ2h0KSAvIChlbGVtZW50OiBIVE1MRWxlbWVudCkub2Zmc2V0SGVpZ2h0IHx8IDFcbiAgICAgICAgOiAxO1xuICB9XG5cbiAgY29uc3QgeyB2aXN1YWxWaWV3cG9ydCB9ID0gaXNFbGVtZW50KGVsZW1lbnQpID8gZ2V0V2luZG93KGVsZW1lbnQpIDogd2luZG93O1xuICBjb25zdCBhZGRWaXN1YWxPZmZzZXRzID0gIWlzTGF5b3V0Vmlld3BvcnQoKSAmJiBpc0ZpeGVkU3RyYXRlZ3k7XG5cbiAgY29uc3QgeCA9XG4gICAgKGNsaWVudFJlY3QubGVmdCArXG4gICAgICAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQgOiAwKSkgL1xuICAgIHNjYWxlWDtcbiAgY29uc3QgeSA9XG4gICAgKGNsaWVudFJlY3QudG9wICtcbiAgICAgIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wIDogMCkpIC9cbiAgICBzY2FsZVk7XG4gIGNvbnN0IHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlWDtcbiAgY29uc3QgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQgLyBzY2FsZVk7XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIGxlZnQ6IHgsXG4gICAgeCxcbiAgICB5LFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi9nZXRXaW5kb3cnO1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlOiBOb2RlIHwgV2luZG93KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgY29uc3Qgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3AsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGwnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tICcuL2dldEhUTUxFbGVtZW50U2Nyb2xsJztcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGU6IE5vZGUgfCBXaW5kb3cpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQ6ID9Ob2RlIHwgV2luZG93KTogP3N0cmluZyB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgdHlwZSB7IFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KFxuICBlbGVtZW50OiBFbGVtZW50IHwgV2luZG93XG4pOiBIVE1MRWxlbWVudCB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuIChcbiAgICAoaXNFbGVtZW50KGVsZW1lbnQpXG4gICAgICA/IGVsZW1lbnQub3duZXJEb2N1bWVudFxuICAgICAgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50XG4gICkuZG9jdW1lbnRFbGVtZW50O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSAnLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50OiBFbGVtZW50KTogbnVtYmVyIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiAoXG4gICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArXG4gICAgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnRcbiAgKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShcbiAgZWxlbWVudDogRWxlbWVudFxuKTogQ1NTU3R5bGVEZWNsYXJhdGlvbiB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tICcuL2dldENvbXB1dGVkU3R5bGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIGNvbnN0IHsgb3ZlcmZsb3csIG92ZXJmbG93WCwgb3ZlcmZsb3dZIH0gPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFJlY3QsIFZpcnR1YWxFbGVtZW50LCBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gJy4vZ2V0Tm9kZVNjcm9sbCc7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsQmFyWCc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tICcuL2lzU2Nyb2xsUGFyZW50JztcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSAnLi4vdXRpbHMvbWF0aCc7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIGNvbnN0IHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG5cbiAgcmV0dXJuIHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDE7XG59XG5cbi8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoXG4gIGVsZW1lbnRPclZpcnR1YWxFbGVtZW50OiBFbGVtZW50IHwgVmlydHVhbEVsZW1lbnQsXG4gIG9mZnNldFBhcmVudDogRWxlbWVudCB8IFdpbmRvdyxcbiAgaXNGaXhlZDogYm9vbGVhbiA9IGZhbHNlXG4pOiBSZWN0IHtcbiAgY29uc3QgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IG9mZnNldFBhcmVudElzU2NhbGVkID1cbiAgICBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KFxuICAgIGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LFxuICAgIG9mZnNldFBhcmVudElzU2NhbGVkLFxuICAgIGlzRml4ZWRcbiAgKTtcblxuICBsZXQgc2Nyb2xsID0geyBzY3JvbGxMZWZ0OiAwLCBzY3JvbGxUb3A6IDAgfTtcbiAgbGV0IG9mZnNldHMgPSB7IHg6IDAsIHk6IDAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgKCFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkpIHtcbiAgICBpZiAoXG4gICAgICBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHxcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KVxuICAgICkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFJlY3QgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcblxuLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBSZWN0IHtcbiAgY29uc3QgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTtcblxuICAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG4gIGxldCB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIGxldCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQ6IE5vZGUgfCBTaGFkb3dSb290KTogTm9kZSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgKGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG4gICk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tICcuL2lzU2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuL2dldE5vZGVOYW1lJztcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZTogTm9kZSk6IEhUTUxFbGVtZW50IHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgdHlwZSB7IFdpbmRvdywgVmlzdWFsVmlld3BvcnQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSAnLi9pc1Njcm9sbFBhcmVudCc7XG5cbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoXG4gIGVsZW1lbnQ6IE5vZGUsXG4gIGxpc3Q6IEFycmF5PEVsZW1lbnQgfCBXaW5kb3c+ID0gW11cbik6IEFycmF5PEVsZW1lbnQgfCBXaW5kb3cgfCBWaXN1YWxWaWV3cG9ydD4ge1xuICBjb25zdCBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIGNvbnN0IGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gZWxlbWVudC5vd25lckRvY3VtZW50Py5ib2R5O1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgY29uc3QgdGFyZ2V0ID0gaXNCb2R5XG4gICAgPyBbd2luXS5jb25jYXQoXG4gICAgICAgIHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSxcbiAgICAgICAgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdXG4gICAgICApXG4gICAgOiBzY3JvbGxQYXJlbnQ7XG4gIGNvbnN0IHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcblxuICByZXR1cm4gaXNCb2R5XG4gICAgPyB1cGRhdGVkTGlzdFxuICAgIDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gICAgICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuL2dldE5vZGVOYW1lJztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4vZ2V0Q29tcHV0ZWRTdHlsZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gJy4vaXNUYWJsZUVsZW1lbnQnO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcbmltcG9ydCBnZXRVQVN0cmluZyBmcm9tICcuLi91dGlscy91c2VyQWdlbnQnO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiA/RWxlbWVudCB7XG4gIGlmIChcbiAgICAhaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gICAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJ1xuICApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn1cblxuLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgY29uc3QgaXNGaXJlZm94ID0gL2ZpcmVmb3gvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuICBjb25zdCBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgY29uc3QgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGxldCBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgaWYgKGlzU2hhZG93Um9vdChjdXJyZW50Tm9kZSkpIHtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmhvc3Q7XG4gIH1cblxuICB3aGlsZSAoXG4gICAgaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiZcbiAgICBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDBcbiAgKSB7XG4gICAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7XG5cbiAgICAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG4gICAgaWYgKFxuICAgICAgY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8XG4gICAgICBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fFxuICAgICAgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHxcbiAgICAgIFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8XG4gICAgICAoaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJykgfHxcbiAgICAgIChpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpXG4gICAgKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50OiBFbGVtZW50KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcblxuICBsZXQgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAoXG4gICAgb2Zmc2V0UGFyZW50ICYmXG4gICAgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJlxuICAgIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYydcbiAgKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKFxuICAgIG9mZnNldFBhcmVudCAmJlxuICAgIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHxcbiAgICAgIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiZcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpXG4gICkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59XG4iLCIvLyBAZmxvd1xuZXhwb3J0IGNvbnN0IHRvcDogJ3RvcCcgPSAndG9wJztcbmV4cG9ydCBjb25zdCBib3R0b206ICdib3R0b20nID0gJ2JvdHRvbSc7XG5leHBvcnQgY29uc3QgcmlnaHQ6ICdyaWdodCcgPSAncmlnaHQnO1xuZXhwb3J0IGNvbnN0IGxlZnQ6ICdsZWZ0JyA9ICdsZWZ0JztcbmV4cG9ydCBjb25zdCBhdXRvOiAnYXV0bycgPSAnYXV0byc7XG5leHBvcnQgdHlwZSBCYXNlUGxhY2VtZW50ID1cbiAgfCB0eXBlb2YgdG9wXG4gIHwgdHlwZW9mIGJvdHRvbVxuICB8IHR5cGVvZiByaWdodFxuICB8IHR5cGVvZiBsZWZ0O1xuZXhwb3J0IGNvbnN0IGJhc2VQbGFjZW1lbnRzOiBBcnJheTxCYXNlUGxhY2VtZW50PiA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuXG5leHBvcnQgY29uc3Qgc3RhcnQ6ICdzdGFydCcgPSAnc3RhcnQnO1xuZXhwb3J0IGNvbnN0IGVuZDogJ2VuZCcgPSAnZW5kJztcbmV4cG9ydCB0eXBlIFZhcmlhdGlvbiA9IHR5cGVvZiBzdGFydCB8IHR5cGVvZiBlbmQ7XG5cbmV4cG9ydCBjb25zdCBjbGlwcGluZ1BhcmVudHM6ICdjbGlwcGluZ1BhcmVudHMnID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgY29uc3Qgdmlld3BvcnQ6ICd2aWV3cG9ydCcgPSAndmlld3BvcnQnO1xuZXhwb3J0IHR5cGUgQm91bmRhcnkgPSBFbGVtZW50IHwgQXJyYXk8RWxlbWVudD4gfCB0eXBlb2YgY2xpcHBpbmdQYXJlbnRzO1xuZXhwb3J0IHR5cGUgUm9vdEJvdW5kYXJ5ID0gdHlwZW9mIHZpZXdwb3J0IHwgJ2RvY3VtZW50JztcblxuZXhwb3J0IGNvbnN0IHBvcHBlcjogJ3BvcHBlcicgPSAncG9wcGVyJztcbmV4cG9ydCBjb25zdCByZWZlcmVuY2U6ICdyZWZlcmVuY2UnID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdHlwZSBDb250ZXh0ID0gdHlwZW9mIHBvcHBlciB8IHR5cGVvZiByZWZlcmVuY2U7XG5cbmV4cG9ydCB0eXBlIFZhcmlhdGlvblBsYWNlbWVudCA9XG4gIHwgJ3RvcC1zdGFydCdcbiAgfCAndG9wLWVuZCdcbiAgfCAnYm90dG9tLXN0YXJ0J1xuICB8ICdib3R0b20tZW5kJ1xuICB8ICdyaWdodC1zdGFydCdcbiAgfCAncmlnaHQtZW5kJ1xuICB8ICdsZWZ0LXN0YXJ0J1xuICB8ICdsZWZ0LWVuZCc7XG5leHBvcnQgdHlwZSBBdXRvUGxhY2VtZW50ID0gJ2F1dG8nIHwgJ2F1dG8tc3RhcnQnIHwgJ2F1dG8tZW5kJztcbmV4cG9ydCB0eXBlIENvbXB1dGVkUGxhY2VtZW50ID0gVmFyaWF0aW9uUGxhY2VtZW50IHwgQmFzZVBsYWNlbWVudDtcbmV4cG9ydCB0eXBlIFBsYWNlbWVudCA9IEF1dG9QbGFjZW1lbnQgfCBCYXNlUGxhY2VtZW50IHwgVmFyaWF0aW9uUGxhY2VtZW50O1xuXG5leHBvcnQgY29uc3QgdmFyaWF0aW9uUGxhY2VtZW50czogQXJyYXk8VmFyaWF0aW9uUGxhY2VtZW50PiA9IGJhc2VQbGFjZW1lbnRzLnJlZHVjZShcbiAgKGFjYzogQXJyYXk8VmFyaWF0aW9uUGxhY2VtZW50PiwgcGxhY2VtZW50OiBCYXNlUGxhY2VtZW50KSA9PlxuICAgIGFjYy5jb25jYXQoWyhgJHtwbGFjZW1lbnR9LSR7c3RhcnR9YDogYW55KSwgKGAke3BsYWNlbWVudH0tJHtlbmR9YDogYW55KV0pLFxuICBbXVxuKTtcbmV4cG9ydCBjb25zdCBwbGFjZW1lbnRzOiBBcnJheTxQbGFjZW1lbnQ+ID0gWy4uLmJhc2VQbGFjZW1lbnRzLCBhdXRvXS5yZWR1Y2UoXG4gIChcbiAgICBhY2M6IEFycmF5PFBsYWNlbWVudD4sXG4gICAgcGxhY2VtZW50OiBCYXNlUGxhY2VtZW50IHwgdHlwZW9mIGF1dG9cbiAgKTogQXJyYXk8UGxhY2VtZW50PiA9PlxuICAgIGFjYy5jb25jYXQoW1xuICAgICAgcGxhY2VtZW50LFxuICAgICAgKGAke3BsYWNlbWVudH0tJHtzdGFydH1gOiBhbnkpLFxuICAgICAgKGAke3BsYWNlbWVudH0tJHtlbmR9YDogYW55KSxcbiAgICBdKSxcbiAgW11cbik7XG5cbi8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5leHBvcnQgY29uc3QgYmVmb3JlUmVhZDogJ2JlZm9yZVJlYWQnID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IGNvbnN0IHJlYWQ6ICdyZWFkJyA9ICdyZWFkJztcbmV4cG9ydCBjb25zdCBhZnRlclJlYWQ6ICdhZnRlclJlYWQnID0gJ2FmdGVyUmVhZCc7XG4vLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuZXhwb3J0IGNvbnN0IGJlZm9yZU1haW46ICdiZWZvcmVNYWluJyA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCBjb25zdCBtYWluOiAnbWFpbicgPSAnbWFpbic7XG5leHBvcnQgY29uc3QgYWZ0ZXJNYWluOiAnYWZ0ZXJNYWluJyA9ICdhZnRlck1haW4nO1xuLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuZXhwb3J0IGNvbnN0IGJlZm9yZVdyaXRlOiAnYmVmb3JlV3JpdGUnID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCBjb25zdCB3cml0ZTogJ3dyaXRlJyA9ICd3cml0ZSc7XG5leHBvcnQgY29uc3QgYWZ0ZXJXcml0ZTogJ2FmdGVyV3JpdGUnID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IGNvbnN0IG1vZGlmaWVyUGhhc2VzOiBBcnJheTxNb2RpZmllclBoYXNlcz4gPSBbXG4gIGJlZm9yZVJlYWQsXG4gIHJlYWQsXG4gIGFmdGVyUmVhZCxcbiAgYmVmb3JlTWFpbixcbiAgbWFpbixcbiAgYWZ0ZXJNYWluLFxuICBiZWZvcmVXcml0ZSxcbiAgd3JpdGUsXG4gIGFmdGVyV3JpdGUsXG5dO1xuXG5leHBvcnQgdHlwZSBNb2RpZmllclBoYXNlcyA9XG4gIHwgdHlwZW9mIGJlZm9yZVJlYWRcbiAgfCB0eXBlb2YgcmVhZFxuICB8IHR5cGVvZiBhZnRlclJlYWRcbiAgfCB0eXBlb2YgYmVmb3JlTWFpblxuICB8IHR5cGVvZiBtYWluXG4gIHwgdHlwZW9mIGFmdGVyTWFpblxuICB8IHR5cGVvZiBiZWZvcmVXcml0ZVxuICB8IHR5cGVvZiB3cml0ZVxuICB8IHR5cGVvZiBhZnRlcldyaXRlO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gJy4uL2VudW1zJztcblxuLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgbW9kaWZpZXJzLmZvckVhY2gobW9kaWZpZXIgPT4ge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTtcblxuICAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXI6IE1vZGlmaWVyPGFueSwgYW55Pikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuXG4gICAgY29uc3QgcmVxdWlyZXMgPSBbXG4gICAgICAuLi4obW9kaWZpZXIucmVxdWlyZXMgfHwgW10pLFxuICAgICAgLi4uKG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pLFxuICAgIF07XG5cbiAgICByZXF1aXJlcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgY29uc3QgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMoXG4gIG1vZGlmaWVyczogQXJyYXk8TW9kaWZpZXI8YW55LCBhbnk+PlxuKTogQXJyYXk8TW9kaWZpZXI8YW55LCBhbnk+PiB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICBjb25zdCBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTtcblxuICAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKChhY2MsIHBoYXNlKSA9PiB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihtb2RpZmllciA9PiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2UpXG4gICAgKTtcbiAgfSwgW10pO1xufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2U8VD4oZm46IEZ1bmN0aW9uKTogKCkgPT4gUHJvbWlzZTxUPiB7XG4gIGxldCBwZW5kaW5nO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlPFQ+KHJlc29sdmUgPT4ge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoc3RyOiBzdHJpbmcsIC4uLmFyZ3M6IEFycmF5PHN0cmluZz4pIHtcbiAgcmV0dXJuIFsuLi5hcmdzXS5yZWR1Y2UoKHAsIGMpID0+IHAucmVwbGFjZSgvJXMvLCBjKSwgc3RyKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZm9ybWF0IGZyb20gJy4vZm9ybWF0JztcbmltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSAnLi4vZW51bXMnO1xuXG5jb25zdCBJTlZBTElEX01PRElGSUVSX0VSUk9SID1cbiAgJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xuY29uc3QgTUlTU0lOR19ERVBFTkRFTkNZX0VSUk9SID1cbiAgJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHJlcXVpcmVzIFwiJXNcIiwgYnV0IFwiJXNcIiBtb2RpZmllciBpcyBub3QgYXZhaWxhYmxlJztcbmNvbnN0IFZBTElEX1BST1BFUlRJRVMgPSBbXG4gICduYW1lJyxcbiAgJ2VuYWJsZWQnLFxuICAncGhhc2UnLFxuICAnZm4nLFxuICAnZWZmZWN0JyxcbiAgJ3JlcXVpcmVzJyxcbiAgJ29wdGlvbnMnLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzOiBBcnJheTxhbnk+KTogdm9pZCB7XG4gIG1vZGlmaWVycy5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgIFsuLi5PYmplY3Qua2V5cyhtb2RpZmllciksIC4uLlZBTElEX1BST1BFUlRJRVNdXG4gICAgICAvLyBJRTExLWNvbXBhdGlibGUgcmVwbGFjZW1lbnQgZm9yIGBuZXcgU2V0KGl0ZXJhYmxlKWBcbiAgICAgIC5maWx0ZXIoKHZhbHVlLCBpbmRleCwgc2VsZikgPT4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpXG4gICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgSU5WQUxJRF9NT0RJRklFUl9FUlJPUixcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhtb2RpZmllci5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICdcIm5hbWVcIicsXG4gICAgICAgICAgICAgICAgICAnXCJzdHJpbmdcIicsXG4gICAgICAgICAgICAgICAgICBgXCIke1N0cmluZyhtb2RpZmllci5uYW1lKX1cImBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgSU5WQUxJRF9NT0RJRklFUl9FUlJPUixcbiAgICAgICAgICAgICAgICAgIG1vZGlmaWVyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAnXCJlbmFibGVkXCInLFxuICAgICAgICAgICAgICAgICAgJ1wiYm9vbGVhblwiJyxcbiAgICAgICAgICAgICAgICAgIGBcIiR7U3RyaW5nKG1vZGlmaWVyLmVuYWJsZWQpfVwiYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3BoYXNlJzpcbiAgICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoXG4gICAgICAgICAgICAgICAgICBJTlZBTElEX01PRElGSUVSX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgbW9kaWZpZXIubmFtZSxcbiAgICAgICAgICAgICAgICAgICdcInBoYXNlXCInLFxuICAgICAgICAgICAgICAgICAgYGVpdGhlciAke21vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyl9YCxcbiAgICAgICAgICAgICAgICAgIGBcIiR7U3RyaW5nKG1vZGlmaWVyLnBoYXNlKX1cImBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmbic6XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgSU5WQUxJRF9NT0RJRklFUl9FUlJPUixcbiAgICAgICAgICAgICAgICAgIG1vZGlmaWVyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAnXCJmblwiJyxcbiAgICAgICAgICAgICAgICAgICdcImZ1bmN0aW9uXCInLFxuICAgICAgICAgICAgICAgICAgYFwiJHtTdHJpbmcobW9kaWZpZXIuZm4pfVwiYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2VmZmVjdCc6XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIG1vZGlmaWVyLmVmZmVjdCAhPSBudWxsICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBtb2RpZmllci5lZmZlY3QgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChcbiAgICAgICAgICAgICAgICAgIElOVkFMSURfTU9ESUZJRVJfRVJST1IsXG4gICAgICAgICAgICAgICAgICBtb2RpZmllci5uYW1lLFxuICAgICAgICAgICAgICAgICAgJ1wiZWZmZWN0XCInLFxuICAgICAgICAgICAgICAgICAgJ1wiZnVuY3Rpb25cIicsXG4gICAgICAgICAgICAgICAgICBgXCIke1N0cmluZyhtb2RpZmllci5mbil9XCJgXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmVxdWlyZXMnOlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBtb2RpZmllci5yZXF1aXJlcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgSU5WQUxJRF9NT0RJRklFUl9FUlJPUixcbiAgICAgICAgICAgICAgICAgIG1vZGlmaWVyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAnXCJyZXF1aXJlc1wiJyxcbiAgICAgICAgICAgICAgICAgICdcImFycmF5XCInLFxuICAgICAgICAgICAgICAgICAgYFwiJHtTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpfVwiYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JlcXVpcmVzSWZFeGlzdHMnOlxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgSU5WQUxJRF9NT0RJRklFUl9FUlJPUixcbiAgICAgICAgICAgICAgICAgIG1vZGlmaWVyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAnXCJyZXF1aXJlc0lmRXhpc3RzXCInLFxuICAgICAgICAgICAgICAgICAgJ1wiYXJyYXlcIicsXG4gICAgICAgICAgICAgICAgICBgXCIke1N0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKX1cImBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvcHRpb25zJzpcbiAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBgUG9wcGVySlM6IGFuIGludmFsaWQgcHJvcGVydHkgaGFzIGJlZW4gcHJvdmlkZWQgdG8gdGhlIFwiJHtcbiAgICAgICAgICAgICAgICBtb2RpZmllci5uYW1lXG4gICAgICAgICAgICAgIH1cIiBtb2RpZmllciwgdmFsaWQgcHJvcGVydGllcyBhcmUgJHtWQUxJRF9QUk9QRVJUSUVTLm1hcChcbiAgICAgICAgICAgICAgICAocykgPT4gYFwiJHtzfVwiYFxuICAgICAgICAgICAgICApLmpvaW4oJywgJyl9OyBidXQgXCIke2tleX1cIiB3YXMgcHJvdmlkZWQuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmXG4gICAgICAgICAgbW9kaWZpZXIucmVxdWlyZXMuZm9yRWFjaCgocmVxdWlyZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMuZmluZCgobW9kKSA9PiBtb2QubmFtZSA9PT0gcmVxdWlyZW1lbnQpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoXG4gICAgICAgICAgICAgICAgICBNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IsXG4gICAgICAgICAgICAgICAgICBTdHJpbmcobW9kaWZpZXIubmFtZSksXG4gICAgICAgICAgICAgICAgICByZXF1aXJlbWVudCxcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVtZW50XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pcXVlQnk8VD4oYXJyOiBBcnJheTxUPiwgZm46IFQgPT4gYW55KTogQXJyYXk8VD4ge1xuICBjb25zdCBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcblxuICByZXR1cm4gYXJyLmZpbHRlcihpdGVtID0+IHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gZm4oaXRlbSk7XG5cbiAgICBpZiAoIWlkZW50aWZpZXJzLmhhcyhpZGVudGlmaWVyKSkge1xuICAgICAgaWRlbnRpZmllcnMuYWRkKGlkZW50aWZpZXIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyB0eXBlIEJhc2VQbGFjZW1lbnQsIHR5cGUgUGxhY2VtZW50LCBhdXRvIH0gZnJvbSAnLi4vZW51bXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCB8IHR5cGVvZiBhdXRvXG4pOiBCYXNlUGxhY2VtZW50IHtcbiAgcmV0dXJuIChwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShcbiAgbW9kaWZpZXJzOiBBcnJheTwkU2hhcGU8TW9kaWZpZXI8YW55LCBhbnk+Pj5cbik6IEFycmF5PCRTaGFwZTxNb2RpZmllcjxhbnksIGFueT4+PiB7XG4gIGNvbnN0IG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoKG1lcmdlZCwgY3VycmVudCkgPT4ge1xuICAgIGNvbnN0IGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZ1xuICAgICAgPyB7XG4gICAgICAgICAgLi4uZXhpc3RpbmcsXG4gICAgICAgICAgLi4uY3VycmVudCxcbiAgICAgICAgICBvcHRpb25zOiB7IC4uLmV4aXN0aW5nLm9wdGlvbnMsIC4uLmN1cnJlbnQub3B0aW9ucyB9LFxuICAgICAgICAgIGRhdGE6IHsgLi4uZXhpc3RpbmcuZGF0YSwgLi4uY3VycmVudC5kYXRhIH0sXG4gICAgICAgIH1cbiAgICAgIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7XG5cbiAgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGtleSA9PiBtZXJnZWRba2V5XSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsQmFyWCc7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tICcuL2lzTGF5b3V0Vmlld3BvcnQnO1xuaW1wb3J0IHR5cGUgeyBQb3NpdGlvbmluZ1N0cmF0ZWd5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXG4gIHN0cmF0ZWd5OiBQb3NpdGlvbmluZ1N0cmF0ZWd5XG4pIHtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICBjb25zdCBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcblxuICBsZXQgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICBsZXQgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuXG4gICAgY29uc3QgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgKCFsYXlvdXRWaWV3cG9ydCAmJiBzdHJhdGVneSA9PT0gJ2ZpeGVkJykpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5LFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUmVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsQmFyWCc7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsJztcbmltcG9ydCB7IG1heCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG4vLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBSZWN0IHtcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgY29uc3Qgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICBjb25zdCBib2R5ID0gZWxlbWVudC5vd25lckRvY3VtZW50Py5ib2R5O1xuXG4gIGNvbnN0IHdpZHRoID0gbWF4KFxuICAgIGh0bWwuc2Nyb2xsV2lkdGgsXG4gICAgaHRtbC5jbGllbnRXaWR0aCxcbiAgICBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsXG4gICAgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwXG4gICk7XG4gIGNvbnN0IGhlaWdodCA9IG1heChcbiAgICBodG1sLnNjcm9sbEhlaWdodCxcbiAgICBodG1sLmNsaWVudEhlaWdodCxcbiAgICBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLFxuICAgIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDBcbiAgKTtcblxuICBsZXQgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIGNvbnN0IHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0LCB4LCB5IH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50OiBFbGVtZW50LCBjaGlsZDogRWxlbWVudCkge1xuICBjb25zdCByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7XG5cbiAgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICBsZXQgbmV4dCA9IGNoaWxkO1xuICAgIGRvIHtcbiAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgfSB3aGlsZSAobmV4dCk7XG4gIH1cblxuICAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFJlY3QsIENsaWVudFJlY3RPYmplY3QgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdDogUmVjdCk6IENsaWVudFJlY3RPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIC4uLnJlY3QsXG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHQsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBDbGllbnRSZWN0T2JqZWN0LCBQb3NpdGlvbmluZ1N0cmF0ZWd5IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gJy4vZ2V0Vmlld3BvcnRSZWN0JztcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSAnLi9nZXREb2N1bWVudFJlY3QnO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gJy4vbGlzdFNjcm9sbFBhcmVudHMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4vZ2V0Q29tcHV0ZWRTdHlsZSc7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gJy4vY29udGFpbnMnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSAnLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdCc7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgc3RyYXRlZ3k6IFBvc2l0aW9uaW5nU3RyYXRlZ3lcbikge1xuICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG5cbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuXG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgY2xpcHBpbmdQYXJlbnQ6IEVsZW1lbnQgfCBSb290Qm91bmRhcnksXG4gIHN0cmF0ZWd5OiBQb3NpdGlvbmluZ1N0cmF0ZWd5XG4pOiBDbGllbnRSZWN0T2JqZWN0IHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydFxuICAgID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKVxuICAgIDogaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KVxuICAgID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KVxuICAgIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59XG5cbi8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQ6IEVsZW1lbnQpOiBBcnJheTxFbGVtZW50PiB7XG4gIGNvbnN0IGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICBjb25zdCBjYW5Fc2NhcGVDbGlwcGluZyA9XG4gICAgWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgY29uc3QgY2xpcHBlckVsZW1lbnQgPVxuICAgIGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudClcbiAgICAgID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpXG4gICAgICA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoXG4gICAgKGNsaXBwaW5nUGFyZW50KSA9PlxuICAgICAgaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJlxuICAgICAgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJlxuICAgICAgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSdcbiAgKTtcbn1cblxuLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KFxuICBlbGVtZW50OiBFbGVtZW50LFxuICBib3VuZGFyeTogQm91bmRhcnksXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICBzdHJhdGVneTogUG9zaXRpb25pbmdTdHJhdGVneVxuKTogQ2xpZW50UmVjdE9iamVjdCB7XG4gIGNvbnN0IG1haW5DbGlwcGluZ1BhcmVudHMgPVxuICAgIGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJ1xuICAgICAgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudClcbiAgICAgIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcbiAgY29uc3QgY2xpcHBpbmdQYXJlbnRzID0gWy4uLm1haW5DbGlwcGluZ1BhcmVudHMsIHJvb3RCb3VuZGFyeV07XG4gIGNvbnN0IGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG5cbiAgY29uc3QgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnRzLnJlZHVjZSgoYWNjUmVjdCwgY2xpcHBpbmdQYXJlbnQpID0+IHtcbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KTtcblxuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG5cbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpKTtcblxuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG5cbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyB0eXBlIFZhcmlhdGlvbiwgdHlwZSBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQ6IFBsYWNlbWVudCk6ID9WYXJpYXRpb24ge1xuICByZXR1cm4gKHBsYWNlbWVudC5zcGxpdCgnLScpWzFdOiBhbnkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoXG4gIHBsYWNlbWVudDogUGxhY2VtZW50XG4pOiAneCcgfCAneScge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi9nZXRCYXNlUGxhY2VtZW50JztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi9nZXRWYXJpYXRpb24nO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tICcuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudCc7XG5pbXBvcnQgdHlwZSB7XG4gIFJlY3QsXG4gIFBvc2l0aW9uaW5nU3RyYXRlZ3ksXG4gIE9mZnNldHMsXG4gIENsaWVudFJlY3RPYmplY3QsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCwgdHlwZSBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKHtcbiAgcmVmZXJlbmNlLFxuICBlbGVtZW50LFxuICBwbGFjZW1lbnQsXG59OiB7XG4gIHJlZmVyZW5jZTogUmVjdCB8IENsaWVudFJlY3RPYmplY3QsXG4gIGVsZW1lbnQ6IFJlY3QgfCBDbGllbnRSZWN0T2JqZWN0LFxuICBzdHJhdGVneTogUG9zaXRpb25pbmdTdHJhdGVneSxcbiAgcGxhY2VtZW50PzogUGxhY2VtZW50LFxufSk6IE9mZnNldHMge1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgY29uc3QgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICBjb25zdCBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIGNvbnN0IGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuXG4gIGxldCBvZmZzZXRzO1xuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHQsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZLFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55LFxuICAgICAgfTtcbiAgfVxuXG4gIGNvbnN0IG1haW5BeGlzID0gYmFzZVBsYWNlbWVudFxuICAgID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpXG4gICAgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgY29uc3QgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9XG4gICAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID1cbiAgICAgICAgICBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgU2lkZU9iamVjdCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCk6IFNpZGVPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFNpZGVPYmplY3QgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gJy4vZ2V0RnJlc2hTaWRlT2JqZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KFxuICBwYWRkaW5nT2JqZWN0OiAkU2hhcGU8U2lkZU9iamVjdD5cbik6IFNpZGVPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIC4uLmdldEZyZXNoU2lkZU9iamVjdCgpLFxuICAgIC4uLnBhZGRpbmdPYmplY3QsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBhbmRUb0hhc2hNYXA8XG4gIFQ6IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4sXG4gIEs6IHN0cmluZ1xuPih2YWx1ZTogVCwga2V5czogQXJyYXk8Sz4pOiB7IFtrZXk6IHN0cmluZ106IFQgfSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoaGFzaE1hcCwga2V5KSA9PiB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFN0YXRlLCBTaWRlT2JqZWN0LCBQYWRkaW5nLCBQb3NpdGlvbmluZ1N0cmF0ZWd5IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQsIEJvdW5kYXJ5LCBSb290Qm91bmRhcnksIENvbnRleHQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gJy4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSAnLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSAnLi9jb21wdXRlT2Zmc2V0cyc7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tICcuL3JlY3RUb0NsaWVudFJlY3QnO1xuaW1wb3J0IHtcbiAgY2xpcHBpbmdQYXJlbnRzLFxuICByZWZlcmVuY2UsXG4gIHBvcHBlcixcbiAgYm90dG9tLFxuICB0b3AsXG4gIHJpZ2h0LFxuICBiYXNlUGxhY2VtZW50cyxcbiAgdmlld3BvcnQsXG59IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4uL2RvbS11dGlscy9pbnN0YW5jZU9mJztcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSAnLi9tZXJnZVBhZGRpbmdPYmplY3QnO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tICcuL2V4cGFuZFRvSGFzaE1hcCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICBzdHJhdGVneTogUG9zaXRpb25pbmdTdHJhdGVneSxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgZWxlbWVudENvbnRleHQ6IENvbnRleHQsXG4gIGFsdEJvdW5kYXJ5OiBib29sZWFuLFxuICBwYWRkaW5nOiBQYWRkaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coXG4gIHN0YXRlOiBTdGF0ZSxcbiAgb3B0aW9uczogJFNoYXBlPE9wdGlvbnM+ID0ge31cbik6IFNpZGVPYmplY3Qge1xuICBjb25zdCB7XG4gICAgcGxhY2VtZW50ID0gc3RhdGUucGxhY2VtZW50LFxuICAgIHN0cmF0ZWd5ID0gc3RhdGUuc3RyYXRlZ3ksXG4gICAgYm91bmRhcnkgPSBjbGlwcGluZ1BhcmVudHMsXG4gICAgcm9vdEJvdW5kYXJ5ID0gdmlld3BvcnQsXG4gICAgZWxlbWVudENvbnRleHQgPSBwb3BwZXIsXG4gICAgYWx0Qm91bmRhcnkgPSBmYWxzZSxcbiAgICBwYWRkaW5nID0gMCxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdChcbiAgICB0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcidcbiAgICAgID8gcGFkZGluZ1xuICAgICAgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpXG4gICk7XG5cbiAgY29uc3QgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG5cbiAgY29uc3QgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgY29uc3QgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcblxuICBjb25zdCBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoXG4gICAgaXNFbGVtZW50KGVsZW1lbnQpXG4gICAgICA/IGVsZW1lbnRcbiAgICAgIDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgc3RyYXRlZ3lcbiAgKTtcblxuICBjb25zdCByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG5cbiAgY29uc3QgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQsXG4gIH0pO1xuXG4gIGNvbnN0IHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KHtcbiAgICAuLi5wb3BwZXJSZWN0LFxuICAgIC4uLnBvcHBlck9mZnNldHMsXG4gIH0pO1xuXG4gIGNvbnN0IGVsZW1lbnRDbGllbnRSZWN0ID1cbiAgICBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7XG5cbiAgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG4gIGNvbnN0IG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206XG4gICAgICBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLVxuICAgICAgY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArXG4gICAgICBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6XG4gICAgICBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHQsXG4gIH07XG5cbiAgY29uc3Qgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0O1xuXG4gIC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIGNvbnN0IG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcblxuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIGNvbnN0IGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHtcbiAgU3RhdGUsXG4gIE9wdGlvbnNHZW5lcmljLFxuICBNb2RpZmllcixcbiAgSW5zdGFuY2UsXG4gIFZpcnR1YWxFbGVtZW50LFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBnZXRDb21wb3NpdGVSZWN0IGZyb20gJy4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QnO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSAnLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdCc7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSAnLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZSc7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSAnLi91dGlscy9vcmRlck1vZGlmaWVycyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSAnLi91dGlscy92YWxpZGF0ZU1vZGlmaWVycyc7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSAnLi91dGlscy91bmlxdWVCeSc7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tICcuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gJy4vdXRpbHMvbWVyZ2VCeU5hbWUnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cnO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAnLi9kb20tdXRpbHMvaW5zdGFuY2VPZic7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSAnLi9lbnVtcyc7XG5cbmNvbnN0IElOVkFMSURfRUxFTUVOVF9FUlJPUiA9XG4gICdQb3BwZXI6IEludmFsaWQgcmVmZXJlbmNlIG9yIHBvcHBlciBhcmd1bWVudCBwcm92aWRlZC4gVGhleSBtdXN0IGJlIGVpdGhlciBhIERPTSBlbGVtZW50IG9yIHZpcnR1YWwgZWxlbWVudC4nO1xuY29uc3QgSU5GSU5JVEVfTE9PUF9FUlJPUiA9XG4gICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OUzogT3B0aW9uc0dlbmVyaWM8YW55PiA9IHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbW9kaWZpZXJzOiBbXSxcbiAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG59O1xuXG50eXBlIFBvcHBlckdlbmVyYXRvckFyZ3MgPSB7XG4gIGRlZmF1bHRNb2RpZmllcnM/OiBBcnJheTxNb2RpZmllcjxhbnksIGFueT4+LFxuICBkZWZhdWx0T3B0aW9ucz86ICRTaGFwZTxPcHRpb25zR2VuZXJpYzxhbnk+Pixcbn07XG5cbmZ1bmN0aW9uIGFyZVZhbGlkRWxlbWVudHMoLi4uYXJnczogQXJyYXk8YW55Pik6IGJvb2xlYW4ge1xuICByZXR1cm4gIWFyZ3Muc29tZShcbiAgICAoZWxlbWVudCkgPT5cbiAgICAgICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9uczogUG9wcGVyR2VuZXJhdG9yQXJncyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0TW9kaWZpZXJzID0gW10sXG4gICAgZGVmYXVsdE9wdGlvbnMgPSBERUZBVUxUX09QVElPTlMsXG4gIH0gPSBnZW5lcmF0b3JPcHRpb25zO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXI8VE1vZGlmaWVyOiAkU2hhcGU8TW9kaWZpZXI8YW55LCBhbnk+Pj4oXG4gICAgcmVmZXJlbmNlOiBFbGVtZW50IHwgVmlydHVhbEVsZW1lbnQsXG4gICAgcG9wcGVyOiBIVE1MRWxlbWVudCxcbiAgICBvcHRpb25zOiAkU2hhcGU8T3B0aW9uc0dlbmVyaWM8VE1vZGlmaWVyPj4gPSBkZWZhdWx0T3B0aW9uc1xuICApOiBJbnN0YW5jZSB7XG4gICAgbGV0IHN0YXRlOiAkU2hhcGU8U3RhdGU+ID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogeyAuLi5ERUZBVUxUX09QVElPTlMsIC4uLmRlZmF1bHRPcHRpb25zIH0sXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyLFxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fSxcbiAgICB9O1xuXG4gICAgbGV0IGVmZmVjdENsZWFudXBGbnM6IEFycmF5PCgpID0+IHZvaWQ+ID0gW107XG4gICAgbGV0IGlzRGVzdHJveWVkID0gZmFsc2U7XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlLFxuICAgICAgc2V0T3B0aW9ucyhzZXRPcHRpb25zQWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPVxuICAgICAgICAgIHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucylcbiAgICAgICAgICAgIDogc2V0T3B0aW9uc0FjdGlvbjtcblxuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG5cbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IHtcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2V4cG9uZW50aWFsLXNwcmVhZF1cbiAgICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAuLi5zdGF0ZS5vcHRpb25zLFxuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpXG4gICAgICAgICAgICA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSlcbiAgICAgICAgICAgIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50XG4gICAgICAgICAgICA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudClcbiAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhcbiAgICAgICAgICBtZXJnZUJ5TmFtZShbLi4uZGVmYXVsdE1vZGlmaWVycywgLi4uc3RhdGUub3B0aW9ucy5tb2RpZmllcnNdKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKChtKSA9PiBtLmVuYWJsZWQpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cbiAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICBjb25zdCBtb2RpZmllcnMgPSB1bmlxdWVCeShcbiAgICAgICAgICAgIFsuLi5vcmRlcmVkTW9kaWZpZXJzLCAuLi5zdGF0ZS5vcHRpb25zLm1vZGlmaWVyc10sXG4gICAgICAgICAgICAoeyBuYW1lIH0pID0+IG5hbWVcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgY29uc3QgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKFxuICAgICAgICAgICAgICAoeyBuYW1lIH0pID0+IG5hbWUgPT09ICdmbGlwJ1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJyxcbiAgICAgICAgICAgICAgICAgICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJyxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG1hcmdpblRvcCxcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgbWFyZ2luTGVmdCxcbiAgICAgICAgICB9ID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpO1xuXG4gICAgICAgICAgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoKG1hcmdpbikgPT5cbiAgICAgICAgICAgICAgcGFyc2VGbG9hdChtYXJnaW4pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsXG4gICAgICAgICAgICAgICAgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsXG4gICAgICAgICAgICAgICAgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLFxuICAgICAgICAgICAgICAgICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsXG4gICAgICAgICAgICAgICAgJ21vZGlmaWVycy4nLFxuICAgICAgICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcblxuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyByZWZlcmVuY2UsIHBvcHBlciB9ID0gc3RhdGUuZWxlbWVudHM7XG5cbiAgICAgICAgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QoXG4gICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSxcbiAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgICAgICAgICApLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuXG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuXG4gICAgICAgIC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKFxuICAgICAgICAgIChtb2RpZmllcikgPT5cbiAgICAgICAgICAgIChzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0ge1xuICAgICAgICAgICAgICAuLi5tb2RpZmllci5kYXRhLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgX19kZWJ1Z19sb29wc19fID0gMDtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgeyBmbiwgb3B0aW9ucyA9IHt9LCBuYW1lIH0gPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oeyBzdGF0ZSwgb3B0aW9ucywgbmFtZSwgaW5zdGFuY2UgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZTwkU2hhcGU8U3RhdGU+PihcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICBuZXcgUHJvbWlzZTwkU2hhcGU8U3RhdGU+PigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICAgIH0pXG4gICAgICApLFxuXG4gICAgICBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oKHN0YXRlKSA9PiB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKCh7IG5hbWUsIG9wdGlvbnMgPSB7fSwgZWZmZWN0IH0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb25zdCBjbGVhbnVwRm4gPSBlZmZlY3QoeyBzdGF0ZSwgbmFtZSwgaW5zdGFuY2UsIG9wdGlvbnMgfSk7XG4gICAgICAgICAgY29uc3Qgbm9vcEZuID0gKCkgPT4ge307XG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKChmbikgPT4gZm4oKSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlUG9wcGVyID0gcG9wcGVyR2VuZXJhdG9yKCk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBNb2RpZmllckFyZ3VtZW50cywgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4uL2RvbS11dGlscy9nZXRXaW5kb3cnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBzY3JvbGw6IGJvb2xlYW4sXG4gIHJlc2l6ZTogYm9vbGVhbixcbn07XG5cbmNvbnN0IHBhc3NpdmUgPSB7IHBhc3NpdmU6IHRydWUgfTtcblxuZnVuY3Rpb24gZWZmZWN0KHsgc3RhdGUsIGluc3RhbmNlLCBvcHRpb25zIH06IE1vZGlmaWVyQXJndW1lbnRzPE9wdGlvbnM+KSB7XG4gIGNvbnN0IHsgc2Nyb2xsID0gdHJ1ZSwgcmVzaXplID0gdHJ1ZSB9ID0gb3B0aW9ucztcblxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgY29uc3Qgc2Nyb2xsUGFyZW50cyA9IFtcbiAgICAuLi5zdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSxcbiAgICAuLi5zdGF0ZS5zY3JvbGxQYXJlbnRzLnBvcHBlcixcbiAgXTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKHNjcm9sbFBhcmVudCA9PiB7XG4gICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgfVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKHNjcm9sbFBhcmVudCA9PiB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBFdmVudExpc3RlbmVyc01vZGlmaWVyID0gTW9kaWZpZXI8J2V2ZW50TGlzdGVuZXJzJywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46ICgpID0+IHt9LFxuICBlZmZlY3QsXG4gIGRhdGE6IHt9LFxufTogRXZlbnRMaXN0ZW5lcnNNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBNb2RpZmllckFyZ3VtZW50cywgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMnO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKHsgc3RhdGUsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8e3x8fT4pIHtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50LFxuICB9KTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgUG9wcGVyT2Zmc2V0c01vZGlmaWVyID0gTW9kaWZpZXI8J3BvcHBlck9mZnNldHMnLCB7fHx9PjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9LFxufTogUG9wcGVyT2Zmc2V0c01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG4gIFBvc2l0aW9uaW5nU3RyYXRlZ3ksXG4gIE9mZnNldHMsXG4gIE1vZGlmaWVyLFxuICBNb2RpZmllckFyZ3VtZW50cyxcbiAgUmVjdCxcbiAgV2luZG93LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICB0eXBlIEJhc2VQbGFjZW1lbnQsXG4gIHR5cGUgVmFyaWF0aW9uLFxuICB0b3AsXG4gIGxlZnQsXG4gIHJpZ2h0LFxuICBib3R0b20sXG4gIGVuZCxcbn0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi4vZG9tLXV0aWxzL2dldFdpbmRvdyc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gJy4uL3V0aWxzL2dldFZhcmlhdGlvbic7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBSb3VuZE9mZnNldHMgPSAoXG4gIG9mZnNldHM6ICRTaGFwZTx7IHg6IG51bWJlciwgeTogbnVtYmVyLCBjZW50ZXJPZmZzZXQ6IG51bWJlciB9PlxuKSA9PiBPZmZzZXRzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBncHVBY2NlbGVyYXRpb246IGJvb2xlYW4sXG4gIGFkYXB0aXZlOiBib29sZWFuLFxuICByb3VuZE9mZnNldHM/OiBib29sZWFuIHwgUm91bmRPZmZzZXRzLFxufTtcblxuY29uc3QgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bycsXG59O1xuXG4vLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoeyB4LCB5IH0pOiBPZmZzZXRzIHtcbiAgY29uc3Qgd2luOiBXaW5kb3cgPSB3aW5kb3c7XG4gIGNvbnN0IGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IHJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDAsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyh7XG4gIHBvcHBlcixcbiAgcG9wcGVyUmVjdCxcbiAgcGxhY2VtZW50LFxuICB2YXJpYXRpb24sXG4gIG9mZnNldHMsXG4gIHBvc2l0aW9uLFxuICBncHVBY2NlbGVyYXRpb24sXG4gIGFkYXB0aXZlLFxuICByb3VuZE9mZnNldHMsXG4gIGlzRml4ZWQsXG59OiB7XG4gIHBvcHBlcjogSFRNTEVsZW1lbnQsXG4gIHBvcHBlclJlY3Q6IFJlY3QsXG4gIHBsYWNlbWVudDogQmFzZVBsYWNlbWVudCxcbiAgdmFyaWF0aW9uOiA/VmFyaWF0aW9uLFxuICBvZmZzZXRzOiAkU2hhcGU8eyB4OiBudW1iZXIsIHk6IG51bWJlciwgY2VudGVyT2Zmc2V0OiBudW1iZXIgfT4sXG4gIHBvc2l0aW9uOiBQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICBncHVBY2NlbGVyYXRpb246IGJvb2xlYW4sXG4gIGFkYXB0aXZlOiBib29sZWFuLFxuICByb3VuZE9mZnNldHM6IGJvb2xlYW4gfCBSb3VuZE9mZnNldHMsXG4gIGlzRml4ZWQ6IGJvb2xlYW4sXG59KSB7XG4gIGxldCB7IHggPSAwLCB5ID0gMCB9ID0gb2Zmc2V0cztcblxuICAoeyB4LCB5IH0gPVxuICAgIHR5cGVvZiByb3VuZE9mZnNldHMgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcm91bmRPZmZzZXRzKHsgeCwgeSB9KVxuICAgICAgOiB7IHgsIHkgfSk7XG5cbiAgY29uc3QgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgY29uc3QgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcblxuICBsZXQgc2lkZVg6IHN0cmluZyA9IGxlZnQ7XG4gIGxldCBzaWRlWTogc3RyaW5nID0gdG9wO1xuXG4gIGNvbnN0IHdpbjogV2luZG93ID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIGxldCBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICBsZXQgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIGxldCB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiZcbiAgICAgICAgcG9zaXRpb24gPT09ICdhYnNvbHV0ZSdcbiAgICAgICkge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG4gICAgb2Zmc2V0UGFyZW50ID0gKG9mZnNldFBhcmVudDogRWxlbWVudCk7XG5cbiAgICBpZiAoXG4gICAgICBwbGFjZW1lbnQgPT09IHRvcCB8fFxuICAgICAgKChwbGFjZW1lbnQgPT09IGxlZnQgfHwgcGxhY2VtZW50ID09PSByaWdodCkgJiYgdmFyaWF0aW9uID09PSBlbmQpXG4gICAgKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIGNvbnN0IG9mZnNldFkgPVxuICAgICAgICBpc0ZpeGVkICYmIG9mZnNldFBhcmVudCA9PT0gd2luICYmIHdpbi52aXN1YWxWaWV3cG9ydFxuICAgICAgICAgID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodFxuICAgICAgICAgIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgICAgICBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF07XG4gICAgICB5IC09IG9mZnNldFkgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHBsYWNlbWVudCA9PT0gbGVmdCB8fFxuICAgICAgKChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpXG4gICAgKSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgY29uc3Qgb2Zmc2V0WCA9XG4gICAgICAgIGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0XG4gICAgICAgICAgPyB3aW4udmlzdWFsVmlld3BvcnQud2lkdGhcbiAgICAgICAgICA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICAgICAgb2Zmc2V0UGFyZW50W3dpZHRoUHJvcF07XG4gICAgICB4IC09IG9mZnNldFggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29tbW9uU3R5bGVzID0ge1xuICAgIHBvc2l0aW9uLFxuICAgIC4uLihhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKSxcbiAgfTtcblxuICAoeyB4LCB5IH0gPVxuICAgIHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZVxuICAgICAgPyByb3VuZE9mZnNldHNCeURQUih7IHgsIHkgfSlcbiAgICAgIDogeyB4LCB5IH0pO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29tbW9uU3R5bGVzLFxuICAgICAgW3NpZGVZXTogaGFzWSA/ICcwJyA6ICcnLFxuICAgICAgW3NpZGVYXTogaGFzWCA/ICcwJyA6ICcnLFxuICAgICAgLy8gTGF5ZXIgYWNjZWxlcmF0aW9uIGNhbiBkaXNhYmxlIHN1YnBpeGVsIHJlbmRlcmluZyB3aGljaCBjYXVzZXMgc2xpZ2h0bHlcbiAgICAgIC8vIGJsdXJyeSB0ZXh0IG9uIGxvdyBQUEkgZGlzcGxheXMsIHNvIHdlIHdhbnQgdG8gdXNlIDJEIHRyYW5zZm9ybXNcbiAgICAgIC8vIGluc3RlYWRcbiAgICAgIHRyYW5zZm9ybTpcbiAgICAgICAgKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDFcbiAgICAgICAgICA/IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYFxuICAgICAgICAgIDogYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKWAsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uY29tbW9uU3R5bGVzLFxuICAgIFtzaWRlWV06IGhhc1kgPyBgJHt5fXB4YCA6ICcnLFxuICAgIFtzaWRlWF06IGhhc1ggPyBgJHt4fXB4YCA6ICcnLFxuICAgIHRyYW5zZm9ybTogJycsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoeyBzdGF0ZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCB7XG4gICAgZ3B1QWNjZWxlcmF0aW9uID0gdHJ1ZSxcbiAgICBhZGFwdGl2ZSA9IHRydWUsXG4gICAgLy8gZGVmYXVsdHMgdG8gdXNlIGJ1aWx0aW4gYHJvdW5kT2Zmc2V0c0J5RFBSYFxuICAgIHJvdW5kT2Zmc2V0cyA9IHRydWUsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BlcnR5ID1cbiAgICAgIGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoXG4gICAgICBhZGFwdGl2ZSAmJlxuICAgICAgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShcbiAgICAgICAgKHByb3BlcnR5KSA9PiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMFxuICAgICAgKVxuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBbXG4gICAgICAgICAgJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJyxcbiAgICAgICAgICAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJyxcbiAgICAgICAgICAnXFxuXFxuJyxcbiAgICAgICAgICAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JyxcbiAgICAgICAgICAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJyxcbiAgICAgICAgICAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJyxcbiAgICAgICAgICAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsXG4gICAgICAgICAgJ1xcblxcbicsXG4gICAgICAgICAgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsXG4gICAgICAgICAgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nLFxuICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgdmFyaWF0aW9uOiBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcsXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IHtcbiAgICAgIC4uLnN0YXRlLnN0eWxlcy5wb3BwZXIsXG4gICAgICAuLi5tYXBUb1N0eWxlcyh7XG4gICAgICAgIC4uLmNvbW1vblN0eWxlcyxcbiAgICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgICAgYWRhcHRpdmUsXG4gICAgICAgIHJvdW5kT2Zmc2V0cyxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0ge1xuICAgICAgLi4uc3RhdGUuc3R5bGVzLmFycm93LFxuICAgICAgLi4ubWFwVG9TdHlsZXMoe1xuICAgICAgICAuLi5jb21tb25TdHlsZXMsXG4gICAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBhZGFwdGl2ZTogZmFsc2UsXG4gICAgICAgIHJvdW5kT2Zmc2V0cyxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cblxuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IHtcbiAgICAuLi5zdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlcixcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50LFxuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBDb21wdXRlU3R5bGVzTW9kaWZpZXIgPSBNb2RpZmllcjwnY29tcHV0ZVN0eWxlcycsIE9wdGlvbnM+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9LFxufTogQ29tcHV0ZVN0eWxlc01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyLCBNb2RpZmllckFyZ3VtZW50cyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4uL2RvbS11dGlscy9pbnN0YW5jZU9mJztcblxuLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoeyBzdGF0ZSB9OiBNb2RpZmllckFyZ3VtZW50czx7fHx9Pikge1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGNvbnN0IHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgY29uc3QgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuXG4gICAgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG5cbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCh7IHN0YXRlIH06IE1vZGlmaWVyQXJndW1lbnRzPHt8fH0+KSB7XG4gIGNvbnN0IGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCcsXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9LFxuICB9O1xuXG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gKCkgPT4ge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcblxuICAgICAgY29uc3Qgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoXG4gICAgICAgIHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgICAgID8gc3RhdGUuc3R5bGVzW25hbWVdXG4gICAgICAgICAgOiBpbml0aWFsU3R5bGVzW25hbWVdXG4gICAgICApO1xuXG4gICAgICAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuICAgICAgY29uc3Qgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKChzdHlsZSwgcHJvcGVydHkpID0+IHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTtcblxuICAgICAgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG5cbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIEFwcGx5U3R5bGVzTW9kaWZpZXIgPSBNb2RpZmllcjwnYXBwbHlTdHlsZXMnLCB7fHx9PjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddLFxufTogQXBwbHlTdHlsZXNNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyQXJndW1lbnRzLCBNb2RpZmllciwgUmVjdCwgT2Zmc2V0cyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gJy4uL2VudW1zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT2Zmc2V0c0Z1bmN0aW9uID0gKHtcbiAgcG9wcGVyOiBSZWN0LFxuICByZWZlcmVuY2U6IFJlY3QsXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxufSkgPT4gWz9udW1iZXIsID9udW1iZXJdO1xuXG50eXBlIE9mZnNldCA9IE9mZnNldHNGdW5jdGlvbiB8IFs/bnVtYmVyLCA/bnVtYmVyXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgb2Zmc2V0OiBPZmZzZXQsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkoXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICByZWN0czogeyBwb3BwZXI6IFJlY3QsIHJlZmVyZW5jZTogUmVjdCB9LFxuICBvZmZzZXQ6IE9mZnNldFxuKTogT2Zmc2V0cyB7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGNvbnN0IGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIGxldCBbc2tpZGRpbmcsIGRpc3RhbmNlXSA9XG4gICAgdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBvZmZzZXQoe1xuICAgICAgICAgIC4uLnJlY3RzLFxuICAgICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgfSlcbiAgICAgIDogb2Zmc2V0O1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcblxuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDBcbiAgICA/IHsgeDogZGlzdGFuY2UsIHk6IHNraWRkaW5nIH1cbiAgICA6IHsgeDogc2tpZGRpbmcsIHk6IGRpc3RhbmNlIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldCh7IHN0YXRlLCBvcHRpb25zLCBuYW1lIH06IE1vZGlmaWVyQXJndW1lbnRzPE9wdGlvbnM+KSB7XG4gIGNvbnN0IHsgb2Zmc2V0ID0gWzAsIDBdIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZSgoYWNjLCBwbGFjZW1lbnQpID0+IHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIGNvbnN0IHsgeCwgeSB9ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPZmZzZXRNb2RpZmllciA9IE1vZGlmaWVyPCdvZmZzZXQnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXQsXG59OiBPZmZzZXRNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5cbmNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50OiBQbGFjZW1lbnQpOiBQbGFjZW1lbnQge1xuICByZXR1cm4gKHBsYWNlbWVudC5yZXBsYWNlKFxuICAgIC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZyxcbiAgICBtYXRjaGVkID0+IGhhc2hbbWF0Y2hlZF1cbiAgKTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuY29uc3QgaGFzaCA9IHsgc3RhcnQ6ICdlbmQnLCBlbmQ6ICdzdGFydCcgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQoXG4gIHBsYWNlbWVudDogUGxhY2VtZW50XG4pOiBQbGFjZW1lbnQge1xuICByZXR1cm4gKHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFN0YXRlLCBQYWRkaW5nIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUge1xuICBQbGFjZW1lbnQsXG4gIENvbXB1dGVkUGxhY2VtZW50LFxuICBCb3VuZGFyeSxcbiAgUm9vdEJvdW5kYXJ5LFxufSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gJy4vZ2V0VmFyaWF0aW9uJztcbmltcG9ydCB7XG4gIHZhcmlhdGlvblBsYWNlbWVudHMsXG4gIGJhc2VQbGFjZW1lbnRzLFxuICBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMsXG59IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tICcuL2RldGVjdE92ZXJmbG93JztcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4vZ2V0QmFzZVBsYWNlbWVudCc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnQsXG4gIHBhZGRpbmc6IFBhZGRpbmcsXG4gIGJvdW5kYXJ5OiBCb3VuZGFyeSxcbiAgcm9vdEJvdW5kYXJ5OiBSb290Qm91bmRhcnksXG4gIGZsaXBWYXJpYXRpb25zOiBib29sZWFuLFxuICBhbGxvd2VkQXV0b1BsYWNlbWVudHM/OiBBcnJheTxQbGFjZW1lbnQ+LFxufTtcblxudHlwZSBPdmVyZmxvd3NNYXAgPSB7IFtDb21wdXRlZFBsYWNlbWVudF06IG51bWJlciB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChcbiAgc3RhdGU6ICRTaGFwZTxTdGF0ZT4sXG4gIG9wdGlvbnM6IE9wdGlvbnMgPSB7fVxuKTogQXJyYXk8Q29tcHV0ZWRQbGFjZW1lbnQ+IHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudCxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICBmbGlwVmFyaWF0aW9ucyxcbiAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBhbGxQbGFjZW1lbnRzLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcblxuICBjb25zdCBwbGFjZW1lbnRzID0gdmFyaWF0aW9uXG4gICAgPyBmbGlwVmFyaWF0aW9uc1xuICAgICAgPyB2YXJpYXRpb25QbGFjZW1lbnRzXG4gICAgICA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKFxuICAgICAgICAgIChwbGFjZW1lbnQpID0+IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb25cbiAgICAgICAgKVxuICAgIDogYmFzZVBsYWNlbWVudHM7XG5cbiAgbGV0IGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoXG4gICAgKHBsYWNlbWVudCkgPT4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwXG4gICk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBbXG4gICAgICAgICAgJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsXG4gICAgICAgICAgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsXG4gICAgICAgICAgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJyxcbiAgICAgICAgICAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJyxcbiAgICAgICAgICAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJyxcbiAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cbiAgY29uc3Qgb3ZlcmZsb3dzOiBPdmVyZmxvd3NNYXAgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoKGFjYywgcGxhY2VtZW50KSA9PiB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nLFxuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydCgoYSwgYikgPT4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCwgQm91bmRhcnksIFJvb3RCb3VuZGFyeSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyLCBQYWRkaW5nIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50JztcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tICcuLi91dGlscy9kZXRlY3RPdmVyZmxvdyc7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi4vdXRpbHMvZ2V0VmFyaWF0aW9uJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgbWFpbkF4aXM6IGJvb2xlYW4sXG4gIGFsdEF4aXM6IGJvb2xlYW4sXG4gIGZhbGxiYWNrUGxhY2VtZW50czogQXJyYXk8UGxhY2VtZW50PixcbiAgcGFkZGluZzogUGFkZGluZyxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgYWx0Qm91bmRhcnk6IGJvb2xlYW4sXG4gIGZsaXBWYXJpYXRpb25zOiBib29sZWFuLFxuICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IEFycmF5PFBsYWNlbWVudD4sXG59O1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQ6IFBsYWNlbWVudCk6IEFycmF5PFBsYWNlbWVudD4ge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3Qgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gIHJldHVybiBbXG4gICAgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSxcbiAgICBvcHBvc2l0ZVBsYWNlbWVudCxcbiAgICBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCksXG4gIF07XG59XG5cbmZ1bmN0aW9uIGZsaXAoeyBzdGF0ZSwgb3B0aW9ucywgbmFtZSB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgYWx0QXhpczogY2hlY2tBbHRBeGlzID0gdHJ1ZSxcbiAgICBmYWxsYmFja1BsYWNlbWVudHM6IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICBwYWRkaW5nLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBhbHRCb3VuZGFyeSxcbiAgICBmbGlwVmFyaWF0aW9ucyA9IHRydWUsXG4gICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgY29uc3QgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuXG4gIGNvbnN0IGZhbGxiYWNrUGxhY2VtZW50cyA9XG4gICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8XG4gICAgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnNcbiAgICAgID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldXG4gICAgICA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuXG4gIGNvbnN0IHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50LCAuLi5mYWxsYmFja1BsYWNlbWVudHNdLnJlZHVjZShcbiAgICAoYWNjLCBwbGFjZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFxuICAgICAgICBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG9cbiAgICAgICAgICA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICAgICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgICAgICAgYm91bmRhcnksXG4gICAgICAgICAgICAgIHJvb3RCb3VuZGFyeSxcbiAgICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgICAgZmxpcFZhcmlhdGlvbnMsXG4gICAgICAgICAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBwbGFjZW1lbnRcbiAgICAgICk7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG5cbiAgY29uc3QgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICBsZXQgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgbGV0IGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcbiAgICBjb25zdCBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICAgIGNvbnN0IGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIGNvbnN0IGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICBjb25zdCBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyxcbiAgICB9KTtcblxuICAgIGxldCBtYWluVmFyaWF0aW9uU2lkZTogYW55ID0gaXNWZXJ0aWNhbFxuICAgICAgPyBpc1N0YXJ0VmFyaWF0aW9uXG4gICAgICAgID8gcmlnaHRcbiAgICAgICAgOiBsZWZ0XG4gICAgICA6IGlzU3RhcnRWYXJpYXRpb25cbiAgICAgID8gYm90dG9tXG4gICAgICA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGFsdFZhcmlhdGlvblNpZGU6IGFueSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcblxuICAgIGNvbnN0IGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKFxuICAgICAgICBvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCxcbiAgICAgICAgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KChjaGVjaykgPT4gY2hlY2spKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIGNvbnN0IG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIGZvciAobGV0IGkgPSBudW1iZXJPZkNoZWNrczsgaSA+IDA7IGktLSkge1xuICAgICAgY29uc3QgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZCgocGxhY2VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgaSkuZXZlcnkoKGNoZWNrKSA9PiBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIEZsaXBNb2RpZmllciA9IE1vZGlmaWVyPCdmbGlwJywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7IF9za2lwOiBmYWxzZSB9LFxufTogRmxpcE1vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpczogJ3gnIHwgJ3knKTogJ3gnIHwgJ3knIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tICcuL21hdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbjogbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW46IG51bWJlciwgdmFsdWU6IG51bWJlciwgbWF4OiBudW1iZXIpIHtcbiAgY29uc3QgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50LCBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHR5cGUgeyBSZWN0LCBNb2RpZmllckFyZ3VtZW50cywgTW9kaWZpZXIsIFBhZGRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tICcuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50JztcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50JztcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gJy4uL3V0aWxzL2dldEFsdEF4aXMnO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gJy4uL3V0aWxzL3dpdGhpbic7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4uL3V0aWxzL2RldGVjdE92ZXJmbG93JztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi4vdXRpbHMvZ2V0VmFyaWF0aW9uJztcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSAnLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0JztcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG50eXBlIFRldGhlck9mZnNldCA9XG4gIHwgKCh7XG4gICAgICBwb3BwZXI6IFJlY3QsXG4gICAgICByZWZlcmVuY2U6IFJlY3QsXG4gICAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgICB9KSA9PiBudW1iZXIgfCB7IG1haW5BeGlzOiBudW1iZXIsIGFsdEF4aXM6IG51bWJlciB9KVxuICB8IG51bWJlclxuICB8IHsgbWFpbkF4aXM6IG51bWJlciwgYWx0QXhpczogbnVtYmVyIH07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIC8qIFByZXZlbnRzIGJvdW5kYXJpZXMgb3ZlcmZsb3cgb24gdGhlIG1haW4gYXhpcyAqL1xuICBtYWluQXhpczogYm9vbGVhbixcbiAgLyogUHJldmVudHMgYm91bmRhcmllcyBvdmVyZmxvdyBvbiB0aGUgYWx0ZXJuYXRlIGF4aXMgKi9cbiAgYWx0QXhpczogYm9vbGVhbixcbiAgLyogVGhlIGFyZWEgdG8gY2hlY2sgdGhlIHBvcHBlciBpcyBvdmVyZmxvd2luZyBpbiAqL1xuICBib3VuZGFyeTogQm91bmRhcnksXG4gIC8qIElmIHRoZSBwb3BwZXIgaXMgbm90IG92ZXJmbG93aW5nIHRoZSBtYWluIGFyZWEsIGZhbGxiYWNrIHRvIHRoaXMgb25lICovXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICAvKiBVc2UgdGhlIHJlZmVyZW5jZSdzIFwiY2xpcHBpbmdQYXJlbnRzXCIgYm91bmRhcnkgY29udGV4dCAqL1xuICBhbHRCb3VuZGFyeTogYm9vbGVhbixcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgcG9wcGVyIHRvIG92ZXJmbG93IGZyb20gaXRzIGJvdW5kYXJpZXMgdG8ga2VlcCBpdCBuZWFyIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudFxuICAgKi9cbiAgdGV0aGVyOiBib29sZWFuLFxuICAvKiBPZmZzZXRzIHdoZW4gdGhlIGB0ZXRoZXJgIG9wdGlvbiBzaG91bGQgYWN0aXZhdGUgKi9cbiAgdGV0aGVyT2Zmc2V0OiBUZXRoZXJPZmZzZXQsXG4gIC8qIFNldHMgYSBwYWRkaW5nIHRvIHRoZSBwcm92aWRlZCBib3VuZGFyeSAqL1xuICBwYWRkaW5nOiBQYWRkaW5nLFxufTtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3Qge1xuICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICBhbHRBeGlzOiBjaGVja0FsdEF4aXMgPSBmYWxzZSxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgYWx0Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICB0ZXRoZXIgPSB0cnVlLFxuICAgIHRldGhlck9mZnNldCA9IDAsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeSxcbiAgfSk7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIGNvbnN0IHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICBjb25zdCBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgY29uc3QgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICBjb25zdCBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICBjb25zdCByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICBjb25zdCB0ZXRoZXJPZmZzZXRWYWx1ZSA9XG4gICAgdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyB0ZXRoZXJPZmZzZXQoe1xuICAgICAgICAgIC4uLnN0YXRlLnJlY3RzLFxuICAgICAgICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50LFxuICAgICAgICB9KVxuICAgICAgOiB0ZXRoZXJPZmZzZXQ7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSA9XG4gICAgdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgPyB7IG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSwgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWUgfVxuICAgICAgOiB7IG1haW5BeGlzOiAwLCBhbHRBeGlzOiAwLCAuLi50ZXRoZXJPZmZzZXRWYWx1ZSB9O1xuICBjb25zdCBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRcbiAgICA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1cbiAgICA6IG51bGw7XG5cbiAgY29uc3QgZGF0YSA9IHsgeDogMCwgeTogMCB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgY29uc3QgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICBjb25zdCBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIGNvbnN0IGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgY29uc3Qgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG5cbiAgICBjb25zdCBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgY29uc3QgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG5cbiAgICBjb25zdCBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcblxuICAgIGNvbnN0IG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgY29uc3QgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dO1xuXG4gICAgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG4gICAgY29uc3QgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgY29uc3QgYXJyb3dSZWN0ID1cbiAgICAgIHRldGhlciAmJiBhcnJvd0VsZW1lbnRcbiAgICAgICAgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudClcbiAgICAgICAgOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgICBjb25zdCBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J11cbiAgICAgID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmdcbiAgICAgIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgY29uc3QgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICBjb25zdCBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07XG5cbiAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG4gICAgY29uc3QgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG5cbiAgICBjb25zdCBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnRcbiAgICAgID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtXG4gICAgICAgIGFkZGl0aXZlIC1cbiAgICAgICAgYXJyb3dMZW4gLVxuICAgICAgICBhcnJvd1BhZGRpbmdNaW4gLVxuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXNcbiAgICAgIDogbWluTGVuIC1cbiAgICAgICAgYXJyb3dMZW4gLVxuICAgICAgICBhcnJvd1BhZGRpbmdNaW4gLVxuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgY29uc3QgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50XG4gICAgICA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICtcbiAgICAgICAgYWRkaXRpdmUgK1xuICAgICAgICBhcnJvd0xlbiArXG4gICAgICAgIGFycm93UGFkZGluZ01heCArXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpc1xuICAgICAgOiBtYXhMZW4gK1xuICAgICAgICBhcnJvd0xlbiArXG4gICAgICAgIGFycm93UGFkZGluZ01heCArXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcblxuICAgIGNvbnN0IGFycm93T2Zmc2V0UGFyZW50ID1cbiAgICAgIHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgY29uc3QgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnRcbiAgICAgID8gbWFpbkF4aXMgPT09ICd5J1xuICAgICAgICA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwXG4gICAgICAgIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwXG4gICAgICA6IDA7XG5cbiAgICBjb25zdCBvZmZzZXRNb2RpZmllclZhbHVlID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZT8uW21haW5BeGlzXSA/PyAwO1xuICAgIGNvbnN0IHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgY29uc3QgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcblxuICAgIGNvbnN0IHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbihcbiAgICAgIHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXhcbiAgICApO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgY29uc3QgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcbiAgICBjb25zdCBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICBjb25zdCBsZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBjb25zdCBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgY29uc3QgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG5cbiAgICBjb25zdCBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIGNvbnN0IG9mZnNldE1vZGlmaWVyVmFsdWUgPSBvZmZzZXRNb2RpZmllclN0YXRlPy5bYWx0QXhpc10gPz8gMDtcbiAgICBjb25zdCB0ZXRoZXJNaW4gPSBpc09yaWdpblNpZGVcbiAgICAgID8gbWluXG4gICAgICA6IG9mZnNldCAtXG4gICAgICAgIHJlZmVyZW5jZVJlY3RbbGVuXSAtXG4gICAgICAgIHBvcHBlclJlY3RbbGVuXSAtXG4gICAgICAgIG9mZnNldE1vZGlmaWVyVmFsdWUgK1xuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcbiAgICBjb25zdCB0ZXRoZXJNYXggPSBpc09yaWdpblNpZGVcbiAgICAgID8gb2Zmc2V0ICtcbiAgICAgICAgcmVmZXJlbmNlUmVjdFtsZW5dICtcbiAgICAgICAgcG9wcGVyUmVjdFtsZW5dIC1cbiAgICAgICAgb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzXG4gICAgICA6IG1heDtcblxuICAgIGNvbnN0IHByZXZlbnRlZE9mZnNldCA9XG4gICAgICB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlXG4gICAgICAgID8gd2l0aGluTWF4Q2xhbXAodGV0aGVyTWluLCBvZmZzZXQsIHRldGhlck1heClcbiAgICAgICAgOiB3aXRoaW4odGV0aGVyID8gdGV0aGVyTWluIDogbWluLCBvZmZzZXQsIHRldGhlciA/IHRldGhlck1heCA6IG1heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgUHJldmVudE92ZXJmbG93TW9kaWZpZXIgPSBNb2RpZmllcjwncHJldmVudE92ZXJmbG93JywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbn06IFByZXZlbnRPdmVyZmxvd01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyLCBNb2RpZmllckFyZ3VtZW50cywgUGFkZGluZywgUmVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi4vZG9tLXV0aWxzL2NvbnRhaW5zJztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudCc7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tICcuLi91dGlscy93aXRoaW4nO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tICcuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QnO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tICcuLi91dGlscy9leHBhbmRUb0hhc2hNYXAnO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuLi9kb20tdXRpbHMvaW5zdGFuY2VPZic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgc3RyaW5nIHwgbnVsbCxcbiAgcGFkZGluZzpcbiAgICB8IFBhZGRpbmdcbiAgICB8ICgoe3xcbiAgICAgICAgcG9wcGVyOiBSZWN0LFxuICAgICAgICByZWZlcmVuY2U6IFJlY3QsXG4gICAgICAgIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICAgICAgfH0pID0+IFBhZGRpbmcpLFxufTtcblxuY29uc3QgdG9QYWRkaW5nT2JqZWN0ID0gKHBhZGRpbmcsIHN0YXRlKSA9PiB7XG4gIHBhZGRpbmcgPVxuICAgIHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHBhZGRpbmcoeyAuLi5zdGF0ZS5yZWN0cywgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnQgfSlcbiAgICAgIDogcGFkZGluZztcblxuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KFxuICAgIHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJ1xuICAgICAgPyBwYWRkaW5nXG4gICAgICA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cylcbiAgKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KHsgc3RhdGUsIG5hbWUsIG9wdGlvbnMgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3QgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gIGNvbnN0IHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIGNvbnN0IGF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgY29uc3QgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHBhZGRpbmdPYmplY3QgPSB0b1BhZGRpbmdPYmplY3Qob3B0aW9ucy5wYWRkaW5nLCBzdGF0ZSk7XG4gIGNvbnN0IGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgY29uc3QgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIGNvbnN0IG1heFByb3AgPSBheGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcblxuICBjb25zdCBlbmREaWZmID1cbiAgICBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbbGVuXSArXG4gICAgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC1cbiAgICBwb3BwZXJPZmZzZXRzW2F4aXNdIC1cbiAgICBzdGF0ZS5yZWN0cy5wb3BwZXJbbGVuXTtcbiAgY29uc3Qgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcblxuICBjb25zdCBhcnJvd09mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChhcnJvd0VsZW1lbnQpO1xuICBjb25zdCBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnRcbiAgICA/IGF4aXMgPT09ICd5J1xuICAgICAgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMFxuICAgICAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRXaWR0aCB8fCAwXG4gICAgOiAwO1xuXG4gIGNvbnN0IGNlbnRlclRvUmVmZXJlbmNlID0gZW5kRGlmZiAvIDIgLSBzdGFydERpZmYgLyAyO1xuXG4gIC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuICBjb25zdCBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICBjb25zdCBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICBjb25zdCBjZW50ZXIgPSBjbGllbnRTaXplIC8gMiAtIGFycm93UmVjdFtsZW5dIC8gMiArIGNlbnRlclRvUmVmZXJlbmNlO1xuICBjb25zdCBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7XG5cbiAgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuICBjb25zdCBheGlzUHJvcDogc3RyaW5nID0gYXhpcztcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICBbYXhpc1Byb3BdOiBvZmZzZXQsXG4gICAgY2VudGVyT2Zmc2V0OiBvZmZzZXQgLSBjZW50ZXIsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCh7IHN0YXRlLCBvcHRpb25zIH06IE1vZGlmaWVyQXJndW1lbnRzPE9wdGlvbnM+KSB7XG4gIGxldCB7IGVsZW1lbnQ6IGFycm93RWxlbWVudCA9ICdbZGF0YS1wb3BwZXItYXJyb3ddJyB9ID0gb3B0aW9ucztcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgW1xuICAgICAgICAgICdQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLFxuICAgICAgICAgICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJyxcbiAgICAgICAgICAndGhlIGFycm93LicsXG4gICAgICAgIF0uam9pbignICcpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFtcbiAgICAgICAgICAnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsXG4gICAgICAgICAgJ2VsZW1lbnQuJyxcbiAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIEFycm93TW9kaWZpZXIgPSBNb2RpZmllcjwnYXJyb3cnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG59OiBBcnJvd01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG4gIE1vZGlmaWVyQXJndW1lbnRzLFxuICBNb2RpZmllcixcbiAgUmVjdCxcbiAgU2lkZU9iamVjdCxcbiAgT2Zmc2V0cyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4uL3V0aWxzL2RldGVjdE92ZXJmbG93JztcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMoXG4gIG92ZXJmbG93OiBTaWRlT2JqZWN0LFxuICByZWN0OiBSZWN0LFxuICBwcmV2ZW50ZWRPZmZzZXRzOiBPZmZzZXRzID0geyB4OiAwLCB5OiAwIH1cbik6IFNpZGVPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54LFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3c6IFNpZGVPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoKHNpZGUpID0+IG92ZXJmbG93W3NpZGVdID49IDApO1xufVxuXG5mdW5jdGlvbiBoaWRlKHsgc3RhdGUsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8e3x8fT4pIHtcbiAgY29uc3QgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgY29uc3QgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgY29uc3QgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuXG4gIGNvbnN0IHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZScsXG4gIH0pO1xuICBjb25zdCBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKFxuICAgIHJlZmVyZW5jZU92ZXJmbG93LFxuICAgIHJlZmVyZW5jZVJlY3RcbiAgKTtcbiAgY29uc3QgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKFxuICAgIHBvcHBlckFsdE92ZXJmbG93LFxuICAgIHBvcHBlclJlY3QsXG4gICAgcHJldmVudGVkT2Zmc2V0c1xuICApO1xuXG4gIGNvbnN0IGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIGNvbnN0IGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkLFxuICB9O1xuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0ge1xuICAgIC4uLnN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLFxuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkLFxuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBIaWRlTW9kaWZpZXIgPSBNb2RpZmllcjwnaGlkZScsIHt8fH0+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZSxcbn06IEhpZGVNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gJy4vY3JlYXRlUG9wcGVyJztcblxuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gJy4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gJy4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMnO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcyc7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMnO1xuXG5leHBvcnQgdHlwZSAqIGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBkZWZhdWx0TW9kaWZpZXJzID0gW1xuICBldmVudExpc3RlbmVycyxcbiAgcG9wcGVyT2Zmc2V0cyxcbiAgY29tcHV0ZVN0eWxlcyxcbiAgYXBwbHlTdHlsZXMsXG5dO1xuXG5jb25zdCBjcmVhdGVQb3BwZXIgPSBwb3BwZXJHZW5lcmF0b3IoeyBkZWZhdWx0TW9kaWZpZXJzIH0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSAnLi9jcmVhdGVQb3BwZXInO1xuXG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSAnLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cyc7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tICcuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzJztcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tICcuL21vZGlmaWVycy9hcHBseVN0eWxlcyc7XG5pbXBvcnQgb2Zmc2V0IGZyb20gJy4vbW9kaWZpZXJzL29mZnNldCc7XG5pbXBvcnQgZmxpcCBmcm9tICcuL21vZGlmaWVycy9mbGlwJztcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSAnLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93JztcbmltcG9ydCBhcnJvdyBmcm9tICcuL21vZGlmaWVycy9hcnJvdyc7XG5pbXBvcnQgaGlkZSBmcm9tICcuL21vZGlmaWVycy9oaWRlJztcblxuZXhwb3J0IHR5cGUgKiBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdE1vZGlmaWVycyA9IFtcbiAgZXZlbnRMaXN0ZW5lcnMsXG4gIHBvcHBlck9mZnNldHMsXG4gIGNvbXB1dGVTdHlsZXMsXG4gIGFwcGx5U3R5bGVzLFxuICBvZmZzZXQsXG4gIGZsaXAsXG4gIHByZXZlbnRPdmVyZmxvdyxcbiAgYXJyb3csXG4gIGhpZGUsXG5dO1xuXG5jb25zdCBjcmVhdGVQb3BwZXIgPSBwb3BwZXJHZW5lcmF0b3IoeyBkZWZhdWx0TW9kaWZpZXJzIH0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSAnLi9wb3BwZXItbGl0ZSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgKiBmcm9tICcuL21vZGlmaWVycyc7XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IHV0aWwvaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBNQVhfVUlEID0gMV8wMDBfMDAwXG5jb25zdCBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDBcbmNvbnN0IFRSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnXG5cbi8vIFNob3V0LW91dCBBbmd1cyBDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuY29uc3QgdG9UeXBlID0gb2JqZWN0ID0+IHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBgJHtvYmplY3R9YFxuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogUHVibGljIFV0aWwgQVBJXG4gKi9cblxuY29uc3QgZ2V0VUlEID0gcHJlZml4ID0+IHtcbiAgZG8ge1xuICAgIHByZWZpeCArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKVxuICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKVxuXG4gIHJldHVybiBwcmVmaXhcbn1cblxuY29uc3QgZ2V0U2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgbGV0IHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtdGFyZ2V0JylcblxuICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICBsZXQgaHJlZkF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcblxuICAgIC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuICAgIGlmICghaHJlZkF0dHJpYnV0ZSB8fCAoIWhyZWZBdHRyaWJ1dGUuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHJpYnV0ZS5zdGFydHNXaXRoKCcuJykpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuICAgIGlmIChocmVmQXR0cmlidXRlLmluY2x1ZGVzKCcjJykgJiYgIWhyZWZBdHRyaWJ1dGUuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICBocmVmQXR0cmlidXRlID0gYCMke2hyZWZBdHRyaWJ1dGUuc3BsaXQoJyMnKVsxXX1gXG4gICAgfVxuXG4gICAgc2VsZWN0b3IgPSBocmVmQXR0cmlidXRlICYmIGhyZWZBdHRyaWJ1dGUgIT09ICcjJyA/IGhyZWZBdHRyaWJ1dGUudHJpbSgpIDogbnVsbFxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9yXG59XG5cbmNvbnN0IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KVxuXG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbFxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuY29uc3QgZ2V0RWxlbWVudEZyb21TZWxlY3RvciA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpXG5cbiAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsXG59XG5cbmNvbnN0IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiAwXG4gIH1cblxuICAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxuICBsZXQgeyB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25EZWxheSB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcblxuICBjb25zdCBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbilcbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpXG5cbiAgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgIHJldHVybiAwXG4gIH1cblxuICAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG4gIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdXG4gIHRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheS5zcGxpdCgnLCcpWzBdXG5cbiAgcmV0dXJuIChOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUlxufVxuXG5jb25zdCB0cmlnZ2VyVHJhbnNpdGlvbkVuZCA9IGVsZW1lbnQgPT4ge1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFRSQU5TSVRJT05fRU5EKSlcbn1cblxuY29uc3QgaXNFbGVtZW50ID0gb2JqZWN0ID0+IHtcbiAgaWYgKCFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqZWN0LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbMF1cbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlICE9PSAndW5kZWZpbmVkJ1xufVxuXG5jb25zdCBnZXRFbGVtZW50ID0gb2JqZWN0ID0+IHtcbiAgLy8gaXQncyBhIGpRdWVyeSBvYmplY3Qgb3IgYSBub2RlIGVsZW1lbnRcbiAgaWYgKGlzRWxlbWVudChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG9iamVjdC5qcXVlcnkgPyBvYmplY3RbMF0gOiBvYmplY3RcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9iamVjdClcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmNvbnN0IGlzVmlzaWJsZSA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWlzRWxlbWVudChlbGVtZW50KSB8fCBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjb25zdCBlbGVtZW50SXNWaXNpYmxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCd2aXNpYmlsaXR5JykgPT09ICd2aXNpYmxlJ1xuICAvLyBIYW5kbGUgYGRldGFpbHNgIGVsZW1lbnQgYXMgaXRzIGNvbnRlbnQgbWF5IGZhbHNpZSBhcHBlYXIgdmlzaWJsZSB3aGVuIGl0IGlzIGNsb3NlZFxuICBjb25zdCBjbG9zZWREZXRhaWxzID0gZWxlbWVudC5jbG9zZXN0KCdkZXRhaWxzOm5vdChbb3Blbl0pJylcblxuICBpZiAoIWNsb3NlZERldGFpbHMpIHtcbiAgICByZXR1cm4gZWxlbWVudElzVmlzaWJsZVxuICB9XG5cbiAgaWYgKGNsb3NlZERldGFpbHMgIT09IGVsZW1lbnQpIHtcbiAgICBjb25zdCBzdW1tYXJ5ID0gZWxlbWVudC5jbG9zZXN0KCdzdW1tYXJ5JylcbiAgICBpZiAoc3VtbWFyeSAmJiBzdW1tYXJ5LnBhcmVudE5vZGUgIT09IGNsb3NlZERldGFpbHMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzdW1tYXJ5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudElzVmlzaWJsZVxufVxuXG5jb25zdCBpc0Rpc2FibGVkID0gZWxlbWVudCA9PiB7XG4gIGlmICghZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiBlbGVtZW50LmRpc2FibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBlbGVtZW50LmRpc2FibGVkXG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgIT09ICdmYWxzZSdcbn1cblxuY29uc3QgZmluZFNoYWRvd1Jvb3QgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCByb290ID0gZWxlbWVudC5nZXRSb290Tm9kZSgpXG4gICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGxcbiAgfVxuXG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxuICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZmluZFNoYWRvd1Jvb3QoZWxlbWVudC5wYXJlbnROb2RlKVxufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuLyoqXG4gKiBUcmljayB0byByZXN0YXJ0IGFuIGVsZW1lbnQncyBhbmltYXRpb25cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHZvaWRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3LmNoYXJpc3RoZW8uaW8vYmxvZy8yMDIxLzAyL3Jlc3RhcnQtYS1jc3MtYW5pbWF0aW9uLXdpdGgtamF2YXNjcmlwdC8jcmVzdGFydGluZy1hLWNzcy1hbmltYXRpb25cbiAqL1xuY29uc3QgcmVmbG93ID0gZWxlbWVudCA9PiB7XG4gIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG59XG5cbmNvbnN0IGdldGpRdWVyeSA9ICgpID0+IHtcbiAgaWYgKHdpbmRvdy5qUXVlcnkgJiYgIWRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKCdkYXRhLWJzLW5vLWpxdWVyeScpKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5qUXVlcnlcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmNvbnN0IERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MgPSBbXVxuXG5jb25zdCBvbkRPTUNvbnRlbnRMb2FkZWQgPSBjYWxsYmFjayA9PiB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAvLyBhZGQgbGlzdGVuZXIgb24gdGhlIGZpcnN0IGNhbGwgd2hlbiB0aGUgZG9jdW1lbnQgaXMgaW4gbG9hZGluZyBzdGF0ZVxuICAgIGlmICghRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcykge1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spXG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKVxuICB9XG59XG5cbmNvbnN0IGlzUlRMID0gKCkgPT4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciA9PT0gJ3J0bCdcblxuY29uc3QgZGVmaW5lSlF1ZXJ5UGx1Z2luID0gcGx1Z2luID0+IHtcbiAgb25ET01Db250ZW50TG9hZGVkKCgpID0+IHtcbiAgICBjb25zdCAkID0gZ2V0alF1ZXJ5KClcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoJCkge1xuICAgICAgY29uc3QgbmFtZSA9IHBsdWdpbi5OQU1FXG4gICAgICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW25hbWVdXG4gICAgICAkLmZuW25hbWVdID0gcGx1Z2luLmpRdWVyeUludGVyZmFjZVxuICAgICAgJC5mbltuYW1lXS5Db25zdHJ1Y3RvciA9IHBsdWdpblxuICAgICAgJC5mbltuYW1lXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAgICAgICAkLmZuW25hbWVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgICAgIHJldHVybiBwbHVnaW4ualF1ZXJ5SW50ZXJmYWNlXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBleGVjdXRlID0gY2FsbGJhY2sgPT4ge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2soKVxuICB9XG59XG5cbmNvbnN0IGV4ZWN1dGVBZnRlclRyYW5zaXRpb24gPSAoY2FsbGJhY2ssIHRyYW5zaXRpb25FbGVtZW50LCB3YWl0Rm9yVHJhbnNpdGlvbiA9IHRydWUpID0+IHtcbiAgaWYgKCF3YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBkdXJhdGlvblBhZGRpbmcgPSA1XG4gIGNvbnN0IGVtdWxhdGVkRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0cmFuc2l0aW9uRWxlbWVudCkgKyBkdXJhdGlvblBhZGRpbmdcblxuICBsZXQgY2FsbGVkID0gZmFsc2VcblxuICBjb25zdCBoYW5kbGVyID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICBpZiAodGFyZ2V0ICE9PSB0cmFuc2l0aW9uRWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2FsbGVkID0gdHJ1ZVxuICAgIHRyYW5zaXRpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpXG4gICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgfVxuXG4gIHRyYW5zaXRpb25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRWxlbWVudClcbiAgICB9XG4gIH0sIGVtdWxhdGVkRHVyYXRpb24pXG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBwcmV2aW91cy9uZXh0IGVsZW1lbnQgb2YgYSBsaXN0LlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGxpc3QgICAgVGhlIGxpc3Qgb2YgZWxlbWVudHNcbiAqIEBwYXJhbSBhY3RpdmVFbGVtZW50ICAgVGhlIGFjdGl2ZSBlbGVtZW50XG4gKiBAcGFyYW0gc2hvdWxkR2V0TmV4dCAgIENob29zZSB0byBnZXQgbmV4dCBvciBwcmV2aW91cyBlbGVtZW50XG4gKiBAcGFyYW0gaXNDeWNsZUFsbG93ZWRcbiAqIEByZXR1cm4ge0VsZW1lbnR8ZWxlbX0gVGhlIHByb3BlciBlbGVtZW50XG4gKi9cbmNvbnN0IGdldE5leHRBY3RpdmVFbGVtZW50ID0gKGxpc3QsIGFjdGl2ZUVsZW1lbnQsIHNob3VsZEdldE5leHQsIGlzQ3ljbGVBbGxvd2VkKSA9PiB7XG4gIGNvbnN0IGxpc3RMZW5ndGggPSBsaXN0Lmxlbmd0aFxuICBsZXQgaW5kZXggPSBsaXN0LmluZGV4T2YoYWN0aXZlRWxlbWVudClcblxuICAvLyBpZiB0aGUgZWxlbWVudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbGlzdCByZXR1cm4gYW4gZWxlbWVudFxuICAvLyBkZXBlbmRpbmcgb24gdGhlIGRpcmVjdGlvbiBhbmQgaWYgY3ljbGUgaXMgYWxsb3dlZFxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuICFzaG91bGRHZXROZXh0ICYmIGlzQ3ljbGVBbGxvd2VkID8gbGlzdFtsaXN0TGVuZ3RoIC0gMV0gOiBsaXN0WzBdXG4gIH1cblxuICBpbmRleCArPSBzaG91bGRHZXROZXh0ID8gMSA6IC0xXG5cbiAgaWYgKGlzQ3ljbGVBbGxvd2VkKSB7XG4gICAgaW5kZXggPSAoaW5kZXggKyBsaXN0TGVuZ3RoKSAlIGxpc3RMZW5ndGhcbiAgfVxuXG4gIHJldHVybiBsaXN0W01hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBsaXN0TGVuZ3RoIC0gMSkpXVxufVxuXG5leHBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGV4ZWN1dGUsXG4gIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24sXG4gIGZpbmRTaGFkb3dSb290LFxuICBnZXRFbGVtZW50LFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBnZXRqUXVlcnksXG4gIGdldE5leHRBY3RpdmVFbGVtZW50LFxuICBnZXRTZWxlY3RvckZyb21FbGVtZW50LFxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgZ2V0VUlELFxuICBpc0Rpc2FibGVkLFxuICBpc0VsZW1lbnQsXG4gIGlzUlRMLFxuICBpc1Zpc2libGUsXG4gIG5vb3AsXG4gIG9uRE9NQ29udGVudExvYWRlZCxcbiAgcmVmbG93LFxuICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCxcbiAgdG9UeXBlXG59XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IGRvbS9ldmVudC1oYW5kbGVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgZ2V0alF1ZXJ5IH0gZnJvbSAnLi4vdXRpbC9pbmRleCdcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBuYW1lc3BhY2VSZWdleCA9IC9bXi5dKig/PVxcLi4qKVxcLnwuKi9cbmNvbnN0IHN0cmlwTmFtZVJlZ2V4ID0gL1xcLi4qL1xuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskL1xuY29uc3QgZXZlbnRSZWdpc3RyeSA9IHt9IC8vIEV2ZW50cyBzdG9yYWdlXG5sZXQgdWlkRXZlbnQgPSAxXG5jb25zdCBjdXN0b21FdmVudHMgPSB7XG4gIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICBtb3VzZWxlYXZlOiAnbW91c2VvdXQnXG59XG5cbmNvbnN0IG5hdGl2ZUV2ZW50cyA9IG5ldyBTZXQoW1xuICAnY2xpY2snLFxuICAnZGJsY2xpY2snLFxuICAnbW91c2V1cCcsXG4gICdtb3VzZWRvd24nLFxuICAnY29udGV4dG1lbnUnLFxuICAnbW91c2V3aGVlbCcsXG4gICdET01Nb3VzZVNjcm9sbCcsXG4gICdtb3VzZW92ZXInLFxuICAnbW91c2VvdXQnLFxuICAnbW91c2Vtb3ZlJyxcbiAgJ3NlbGVjdHN0YXJ0JyxcbiAgJ3NlbGVjdGVuZCcsXG4gICdrZXlkb3duJyxcbiAgJ2tleXByZXNzJyxcbiAgJ2tleXVwJyxcbiAgJ29yaWVudGF0aW9uY2hhbmdlJyxcbiAgJ3RvdWNoc3RhcnQnLFxuICAndG91Y2htb3ZlJyxcbiAgJ3RvdWNoZW5kJyxcbiAgJ3RvdWNoY2FuY2VsJyxcbiAgJ3BvaW50ZXJkb3duJyxcbiAgJ3BvaW50ZXJtb3ZlJyxcbiAgJ3BvaW50ZXJ1cCcsXG4gICdwb2ludGVybGVhdmUnLFxuICAncG9pbnRlcmNhbmNlbCcsXG4gICdnZXN0dXJlc3RhcnQnLFxuICAnZ2VzdHVyZWNoYW5nZScsXG4gICdnZXN0dXJlZW5kJyxcbiAgJ2ZvY3VzJyxcbiAgJ2JsdXInLFxuICAnY2hhbmdlJyxcbiAgJ3Jlc2V0JyxcbiAgJ3NlbGVjdCcsXG4gICdzdWJtaXQnLFxuICAnZm9jdXNpbicsXG4gICdmb2N1c291dCcsXG4gICdsb2FkJyxcbiAgJ3VubG9hZCcsXG4gICdiZWZvcmV1bmxvYWQnLFxuICAncmVzaXplJyxcbiAgJ21vdmUnLFxuICAnRE9NQ29udGVudExvYWRlZCcsXG4gICdyZWFkeXN0YXRlY2hhbmdlJyxcbiAgJ2Vycm9yJyxcbiAgJ2Fib3J0JyxcbiAgJ3Njcm9sbCdcbl0pXG5cbi8qKlxuICogUHJpdmF0ZSBtZXRob2RzXG4gKi9cblxuZnVuY3Rpb24gbWFrZUV2ZW50VWlkKGVsZW1lbnQsIHVpZCkge1xuICByZXR1cm4gKHVpZCAmJiBgJHt1aWR9Ojoke3VpZEV2ZW50Kyt9YCkgfHwgZWxlbWVudC51aWRFdmVudCB8fCB1aWRFdmVudCsrXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRFdmVudHMoZWxlbWVudCkge1xuICBjb25zdCB1aWQgPSBtYWtlRXZlbnRVaWQoZWxlbWVudClcblxuICBlbGVtZW50LnVpZEV2ZW50ID0gdWlkXG4gIGV2ZW50UmVnaXN0cnlbdWlkXSA9IGV2ZW50UmVnaXN0cnlbdWlkXSB8fCB7fVxuXG4gIHJldHVybiBldmVudFJlZ2lzdHJ5W3VpZF1cbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwSGFuZGxlcihlbGVtZW50LCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgIGh5ZHJhdGVPYmooZXZlbnQsIHsgZGVsZWdhdGVUYXJnZXQ6IGVsZW1lbnQgfSlcblxuICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBmbilcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgW2V2ZW50XSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBzZWxlY3RvciwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBkb21FbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcblxuICAgIGZvciAobGV0IHsgdGFyZ2V0IH0gPSBldmVudDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpczsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgIGZvciAoY29uc3QgZG9tRWxlbWVudCBvZiBkb21FbGVtZW50cykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGh5ZHJhdGVPYmooZXZlbnQsIHsgZGVsZWdhdGVUYXJnZXQ6IHRhcmdldCB9KVxuXG4gICAgICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgc2VsZWN0b3IsIGZuKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRhcmdldCwgW2V2ZW50XSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEhhbmRsZXIoZXZlbnRzLCBjYWxsYWJsZSwgZGVsZWdhdGlvblNlbGVjdG9yID0gbnVsbCkge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhldmVudHMpXG4gICAgLmZpbmQoZXZlbnQgPT4gZXZlbnQuY2FsbGFibGUgPT09IGNhbGxhYmxlICYmIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvciA9PT0gZGVsZWdhdGlvblNlbGVjdG9yKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgY29uc3QgaXNEZWxlZ2F0ZWQgPSB0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZydcbiAgLy8gdG9kbzogdG9vbHRpcCBwYXNzZXMgYGZhbHNlYCBpbnN0ZWFkIG9mIHNlbGVjdG9yLCBzbyB3ZSBuZWVkIHRvIGNoZWNrXG4gIGNvbnN0IGNhbGxhYmxlID0gaXNEZWxlZ2F0ZWQgPyBkZWxlZ2F0aW9uRnVuY3Rpb24gOiAoaGFuZGxlciB8fCBkZWxlZ2F0aW9uRnVuY3Rpb24pXG4gIGxldCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQob3JpZ2luYWxUeXBlRXZlbnQpXG5cbiAgaWYgKCFuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudCkpIHtcbiAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudFxuICB9XG5cbiAgcmV0dXJuIFtpc0RlbGVnYXRlZCwgY2FsbGFibGUsIHR5cGVFdmVudF1cbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCBvbmVPZmYpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGxldCBbaXNEZWxlZ2F0ZWQsIGNhbGxhYmxlLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1ldGVycyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKVxuXG4gIC8vIGluIGNhc2Ugb2YgbW91c2VlbnRlciBvciBtb3VzZWxlYXZlIHdyYXAgdGhlIGhhbmRsZXIgd2l0aGluIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgZm9yIGl0cyBET00gcG9zaXRpb25cbiAgLy8gdGhpcyBwcmV2ZW50cyB0aGUgaGFuZGxlciBmcm9tIGJlaW5nIGRpc3BhdGNoZWQgdGhlIHNhbWUgd2F5IGFzIG1vdXNlb3ZlciBvciBtb3VzZW91dCBkb2VzXG4gIGlmIChvcmlnaW5hbFR5cGVFdmVudCBpbiBjdXN0b21FdmVudHMpIHtcbiAgICBjb25zdCB3cmFwRnVuY3Rpb24gPSBmbiA9PiB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FsbGFibGUgPSB3cmFwRnVuY3Rpb24oY2FsbGFibGUpXG4gIH1cblxuICBjb25zdCBldmVudHMgPSBnZXRFbGVtZW50RXZlbnRzKGVsZW1lbnQpXG4gIGNvbnN0IGhhbmRsZXJzID0gZXZlbnRzW3R5cGVFdmVudF0gfHwgKGV2ZW50c1t0eXBlRXZlbnRdID0ge30pXG4gIGNvbnN0IHByZXZpb3VzRnVuY3Rpb24gPSBmaW5kSGFuZGxlcihoYW5kbGVycywgY2FsbGFibGUsIGlzRGVsZWdhdGVkID8gaGFuZGxlciA6IG51bGwpXG5cbiAgaWYgKHByZXZpb3VzRnVuY3Rpb24pIHtcbiAgICBwcmV2aW91c0Z1bmN0aW9uLm9uZU9mZiA9IHByZXZpb3VzRnVuY3Rpb24ub25lT2ZmICYmIG9uZU9mZlxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB1aWQgPSBtYWtlRXZlbnRVaWQoY2FsbGFibGUsIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSlcbiAgY29uc3QgZm4gPSBpc0RlbGVnYXRlZCA/XG4gICAgYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgaGFuZGxlciwgY2FsbGFibGUpIDpcbiAgICBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGNhbGxhYmxlKVxuXG4gIGZuLmRlbGVnYXRpb25TZWxlY3RvciA9IGlzRGVsZWdhdGVkID8gaGFuZGxlciA6IG51bGxcbiAgZm4uY2FsbGFibGUgPSBjYWxsYWJsZVxuICBmbi5vbmVPZmYgPSBvbmVPZmZcbiAgZm4udWlkRXZlbnQgPSB1aWRcbiAgaGFuZGxlcnNbdWlkXSA9IGZuXG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIGlzRGVsZWdhdGVkKVxufVxuXG5mdW5jdGlvbiByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpIHtcbiAgY29uc3QgZm4gPSBmaW5kSGFuZGxlcihldmVudHNbdHlwZUV2ZW50XSwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKVxuXG4gIGlmICghZm4pIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlRXZlbnQsIGZuLCBCb29sZWFuKGRlbGVnYXRpb25TZWxlY3RvcikpXG4gIGRlbGV0ZSBldmVudHNbdHlwZUV2ZW50XVtmbi51aWRFdmVudF1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBuYW1lc3BhY2UpIHtcbiAgY29uc3Qgc3RvcmVFbGVtZW50RXZlbnQgPSBldmVudHNbdHlwZUV2ZW50XSB8fCB7fVxuXG4gIGZvciAoY29uc3QgaGFuZGxlcktleSBvZiBPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkpIHtcbiAgICBpZiAoaGFuZGxlcktleS5pbmNsdWRlcyhuYW1lc3BhY2UpKSB7XG4gICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2hhbmRsZXJLZXldXG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5jYWxsYWJsZSwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlRXZlbnQoZXZlbnQpIHtcbiAgLy8gYWxsb3cgdG8gZ2V0IHRoZSBuYXRpdmUgZXZlbnRzIGZyb20gbmFtZXNwYWNlZCBldmVudHMgKCdjbGljay5icy5idXR0b24nIC0tPiAnY2xpY2snKVxuICBldmVudCA9IGV2ZW50LnJlcGxhY2Uoc3RyaXBOYW1lUmVnZXgsICcnKVxuICByZXR1cm4gY3VzdG9tRXZlbnRzW2V2ZW50XSB8fCBldmVudFxufVxuXG5jb25zdCBFdmVudEhhbmRsZXIgPSB7XG4gIG9uKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24sIGZhbHNlKVxuICB9LFxuXG4gIG9uZShlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKSB7XG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCB0cnVlKVxuICB9LFxuXG4gIG9mZihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IFtpc0RlbGVnYXRlZCwgY2FsbGFibGUsIHR5cGVFdmVudF0gPSBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pXG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSB0eXBlRXZlbnQgIT09IG9yaWdpbmFsVHlwZUV2ZW50XG4gICAgY29uc3QgZXZlbnRzID0gZ2V0RWxlbWVudEV2ZW50cyhlbGVtZW50KVxuICAgIGNvbnN0IHN0b3JlRWxlbWVudEV2ZW50ID0gZXZlbnRzW3R5cGVFdmVudF0gfHwge31cbiAgICBjb25zdCBpc05hbWVzcGFjZSA9IG9yaWdpbmFsVHlwZUV2ZW50LnN0YXJ0c1dpdGgoJy4nKVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFNpbXBsZXN0IGNhc2U6IGhhbmRsZXIgaXMgcGFzc2VkLCByZW1vdmUgdGhhdCBsaXN0ZW5lciBPTkxZLlxuICAgICAgaWYgKCFPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBjYWxsYWJsZSwgaXNEZWxlZ2F0ZWQgPyBoYW5kbGVyIDogbnVsbClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc05hbWVzcGFjZSkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50RXZlbnQgb2YgT2JqZWN0LmtleXMoZXZlbnRzKSkge1xuICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCBlbGVtZW50RXZlbnQsIG9yaWdpbmFsVHlwZUV2ZW50LnNsaWNlKDEpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5SGFuZGxlcnMgb2YgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpKSB7XG4gICAgICBjb25zdCBoYW5kbGVyS2V5ID0ga2V5SGFuZGxlcnMucmVwbGFjZShzdHJpcFVpZFJlZ2V4LCAnJylcblxuICAgICAgaWYgKCFpbk5hbWVzcGFjZSB8fCBvcmlnaW5hbFR5cGVFdmVudC5pbmNsdWRlcyhoYW5kbGVyS2V5KSkge1xuICAgICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2tleUhhbmRsZXJzXVxuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5jYWxsYWJsZSwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyKGVsZW1lbnQsIGV2ZW50LCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpXG4gICAgY29uc3QgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KGV2ZW50KVxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudFxuXG4gICAgbGV0IGpRdWVyeUV2ZW50ID0gbnVsbFxuICAgIGxldCBidWJibGVzID0gdHJ1ZVxuICAgIGxldCBuYXRpdmVEaXNwYXRjaCA9IHRydWVcbiAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlXG5cbiAgICBpZiAoaW5OYW1lc3BhY2UgJiYgJCkge1xuICAgICAgalF1ZXJ5RXZlbnQgPSAkLkV2ZW50KGV2ZW50LCBhcmdzKVxuXG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoalF1ZXJ5RXZlbnQpXG4gICAgICBidWJibGVzID0gIWpRdWVyeUV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIG5hdGl2ZURpc3BhdGNoID0gIWpRdWVyeUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBqUXVlcnlFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKVxuICAgIH1cblxuICAgIGxldCBldnQgPSBuZXcgRXZlbnQoZXZlbnQsIHsgYnViYmxlcywgY2FuY2VsYWJsZTogdHJ1ZSB9KVxuICAgIGV2dCA9IGh5ZHJhdGVPYmooZXZ0LCBhcmdzKVxuXG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KVxuICAgIH1cblxuICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCAmJiBqUXVlcnlFdmVudCkge1xuICAgICAgalF1ZXJ5RXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIHJldHVybiBldnRcbiAgfVxufVxuXG5mdW5jdGlvbiBoeWRyYXRlT2JqKG9iaiwgbWV0YSkge1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtZXRhIHx8IHt9KSkge1xuICAgIHRyeSB7XG4gICAgICBvYmpba2V5XSA9IHZhbHVlXG4gICAgfSBjYXRjaCB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9ialxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEhhbmRsZXJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogZG9tL2RhdGEuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IGVsZW1lbnRNYXAgPSBuZXcgTWFwKClcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZXQoZWxlbWVudCwga2V5LCBpbnN0YW5jZSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnQsIG5ldyBNYXAoKSlcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZU1hcCA9IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnQpXG5cbiAgICAvLyBtYWtlIGl0IGNsZWFyIHdlIG9ubHkgd2FudCBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnRcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZCBsYXRlciB3aGVuIG11bHRpcGxlIGtleS9pbnN0YW5jZXMgYXJlIGZpbmUgdG8gYmUgdXNlZFxuICAgIGlmICghaW5zdGFuY2VNYXAuaGFzKGtleSkgJiYgaW5zdGFuY2VNYXAuc2l6ZSAhPT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEJvb3RzdHJhcCBkb2Vzbid0IGFsbG93IG1vcmUgdGhhbiBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnQuIEJvdW5kIGluc3RhbmNlOiAke0FycmF5LmZyb20oaW5zdGFuY2VNYXAua2V5cygpKVswXX0uYClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGluc3RhbmNlTWFwLnNldChrZXksIGluc3RhbmNlKVxuICB9LFxuXG4gIGdldChlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50TWFwLmdldChlbGVtZW50KS5nZXQoa2V5KSB8fCBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfSxcblxuICByZW1vdmUoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKCFlbGVtZW50TWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KVxuXG4gICAgaW5zdGFuY2VNYXAuZGVsZXRlKGtleSlcblxuICAgIC8vIGZyZWUgdXAgZWxlbWVudCByZWZlcmVuY2VzIGlmIHRoZXJlIGFyZSBubyBpbnN0YW5jZXMgbGVmdCBmb3IgYW4gZWxlbWVudFxuICAgIGlmIChpbnN0YW5jZU1hcC5zaXplID09PSAwKSB7XG4gICAgICBlbGVtZW50TWFwLmRlbGV0ZShlbGVtZW50KVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiBkb20vbWFuaXB1bGF0b3IuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKHZhbHVlID09PSBOdW1iZXIodmFsdWUpLnRvU3RyaW5nKCkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gJ251bGwnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURhdGFLZXkoa2V5KSB7XG4gIHJldHVybiBrZXkucmVwbGFjZSgvW0EtWl0vZywgY2hyID0+IGAtJHtjaHIudG9Mb3dlckNhc2UoKX1gKVxufVxuXG5jb25zdCBNYW5pcHVsYXRvciA9IHtcbiAgc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYGRhdGEtYnMtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCwgdmFsdWUpXG4gIH0sXG5cbiAgcmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKVxuICB9LFxuXG4gIGdldERhdGFBdHRyaWJ1dGVzKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB7fVxuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fVxuICAgIGNvbnN0IGJzS2V5cyA9IE9iamVjdC5rZXlzKGVsZW1lbnQuZGF0YXNldCkuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnYnMnKSAmJiAha2V5LnN0YXJ0c1dpdGgoJ2JzQ29uZmlnJykpXG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBic0tleXMpIHtcbiAgICAgIGxldCBwdXJlS2V5ID0ga2V5LnJlcGxhY2UoL15icy8sICcnKVxuICAgICAgcHVyZUtleSA9IHB1cmVLZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBwdXJlS2V5LnNsaWNlKDEsIHB1cmVLZXkubGVuZ3RoKVxuICAgICAgYXR0cmlidXRlc1twdXJlS2V5XSA9IG5vcm1hbGl6ZURhdGEoZWxlbWVudC5kYXRhc2V0W2tleV0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXNcbiAgfSxcblxuICBnZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgIHJldHVybiBub3JtYWxpemVEYXRhKGVsZW1lbnQuZ2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWApKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hbmlwdWxhdG9yXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IHV0aWwvY29uZmlnLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgaXNFbGVtZW50LCB0b1R5cGUgfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4uL2RvbS9tYW5pcHVsYXRvcidcblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgQ29uZmlnIHtcbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiB7fVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gaW1wbGVtZW50IHRoZSBzdGF0aWMgbWV0aG9kIFwiTkFNRVwiLCBmb3IgZWFjaCBjb21wb25lbnQhJylcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0gdGhpcy5fbWVyZ2VDb25maWdPYmooY29uZmlnKVxuICAgIGNvbmZpZyA9IHRoaXMuX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKVxuICAgIHRoaXMuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX21lcmdlQ29uZmlnT2JqKGNvbmZpZywgZWxlbWVudCkge1xuICAgIGNvbnN0IGpzb25Db25maWcgPSBpc0VsZW1lbnQoZWxlbWVudCkgPyBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsICdjb25maWcnKSA6IHt9IC8vIHRyeSB0byBwYXJzZVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLih0eXBlb2YganNvbkNvbmZpZyA9PT0gJ29iamVjdCcgPyBqc29uQ29uZmlnIDoge30pLFxuICAgICAgLi4uKGlzRWxlbWVudChlbGVtZW50KSA/IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKGVsZW1lbnQpIDoge30pLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfVxuICB9XG5cbiAgX3R5cGVDaGVja0NvbmZpZyhjb25maWcsIGNvbmZpZ1R5cGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSkge1xuICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgT2JqZWN0LmtleXMoY29uZmlnVHlwZXMpKSB7XG4gICAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldXG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV1cbiAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IGlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpXG5cbiAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUUudG9VcHBlckNhc2UoKX06IE9wdGlvbiBcIiR7cHJvcGVydHl9XCIgcHJvdmlkZWQgdHlwZSBcIiR7dmFsdWVUeXBlfVwiIGJ1dCBleHBlY3RlZCB0eXBlIFwiJHtleHBlY3RlZFR5cGVzfVwiLmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maWdcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogYmFzZS1jb21wb25lbnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRGF0YSBmcm9tICcuL2RvbS9kYXRhJ1xuaW1wb3J0IHsgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiwgZ2V0RWxlbWVudCB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBDb25maWcgZnJvbSAnLi91dGlsL2NvbmZpZydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBWRVJTSU9OID0gJzUuMi4xJ1xuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBCYXNlQ29tcG9uZW50IGV4dGVuZHMgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgZWxlbWVudCA9IGdldEVsZW1lbnQoZWxlbWVudClcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcblxuICAgIERhdGEuc2V0KHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZGlzcG9zZSgpIHtcbiAgICBEYXRhLnJlbW92ZSh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKVxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpXG5cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9xdWV1ZUNhbGxiYWNrKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkID0gdHJ1ZSkge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIGVsZW1lbnQsIGlzQW5pbWF0ZWQpXG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHRoaXMuX21lcmdlQ29uZmlnT2JqKGNvbmZpZywgdGhpcy5fZWxlbWVudClcbiAgICBjb25maWcgPSB0aGlzLl9jb25maWdBZnRlck1lcmdlKGNvbmZpZylcbiAgICB0aGlzLl90eXBlQ2hlY2tDb25maWcoY29uZmlnKVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudCkge1xuICAgIHJldHVybiBEYXRhLmdldChnZXRFbGVtZW50KGVsZW1lbnQpLCB0aGlzLkRBVEFfS0VZKVxuICB9XG5cbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fCBuZXcgdGhpcyhlbGVtZW50LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGwpXG4gIH1cblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgREFUQV9LRVkoKSB7XG4gICAgcmV0dXJuIGBicy4ke3RoaXMuTkFNRX1gXG4gIH1cblxuICBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHtcbiAgICByZXR1cm4gYC4ke3RoaXMuREFUQV9LRVl9YFxuICB9XG5cbiAgc3RhdGljIGV2ZW50TmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIGAke25hbWV9JHt0aGlzLkVWRU5UX0tFWX1gXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZUNvbXBvbmVudFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiB1dGlsL2NvbXBvbmVudC1mdW5jdGlvbnMuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21TZWxlY3RvciwgaXNEaXNhYmxlZCB9IGZyb20gJy4vaW5kZXgnXG5cbmNvbnN0IGVuYWJsZURpc21pc3NUcmlnZ2VyID0gKGNvbXBvbmVudCwgbWV0aG9kID0gJ2hpZGUnKSA9PiB7XG4gIGNvbnN0IGNsaWNrRXZlbnQgPSBgY2xpY2suZGlzbWlzcyR7Y29tcG9uZW50LkVWRU5UX0tFWX1gXG4gIGNvbnN0IG5hbWUgPSBjb21wb25lbnQuTkFNRVxuXG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgY2xpY2tFdmVudCwgYFtkYXRhLWJzLWRpc21pc3M9XCIke25hbWV9XCJdYCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpIHx8IHRoaXMuY2xvc2VzdChgLiR7bmFtZX1gKVxuICAgIGNvbnN0IGluc3RhbmNlID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KVxuXG4gICAgLy8gTWV0aG9kIGFyZ3VtZW50IGlzIGxlZnQsIGZvciBBbGVydCBhbmQgb25seSwgYXMgaXQgZG9lc24ndCBpbXBsZW1lbnQgdGhlICdoaWRlJyBtZXRob2RcbiAgICBpbnN0YW5jZVttZXRob2RdKClcbiAgfSlcbn1cblxuZXhwb3J0IHtcbiAgZW5hYmxlRGlzbWlzc1RyaWdnZXJcbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogYWxlcnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgeyBkZWZpbmVKUXVlcnlQbHVnaW4gfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IHsgZW5hYmxlRGlzbWlzc1RyaWdnZXIgfSBmcm9tICcuL3V0aWwvY29tcG9uZW50LWZ1bmN0aW9ucydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ2FsZXJ0J1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYWxlcnQnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuXG5jb25zdCBFVkVOVF9DTE9TRSA9IGBjbG9zZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMT1NFRCA9IGBjbG9zZWQke0VWRU5UX0tFWX1gXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBBbGVydCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIGNsb3NlKCkge1xuICAgIGNvbnN0IGNsb3NlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTE9TRSlcblxuICAgIGlmIChjbG9zZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5fZGVzdHJveUVsZW1lbnQoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZClcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2Rlc3Ryb3lFbGVtZW50KCkge1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKClcbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTE9TRUQpXG4gICAgdGhpcy5kaXNwb3NlKClcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IEFsZXJ0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcylcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5lbmFibGVEaXNtaXNzVHJpZ2dlcihBbGVydCwgJ2Nsb3NlJylcblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQWxlcnQpXG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdidXR0b24nXG5jb25zdCBEQVRBX0tFWSA9ICdicy5idXR0b24nXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJ1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZSgpIHtcbiAgICAvLyBUb2dnbGUgY2xhc3MgYW5kIHN5bmMgdGhlIGBhcmlhLXByZXNzZWRgIGF0dHJpYnV0ZSB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGAudG9nZ2xlKClgIG1ldGhvZFxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoQ0xBU1NfTkFNRV9BQ1RJVkUpKVxuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZXZlbnQgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfREFUQV9UT0dHTEUpXG4gIGNvbnN0IGRhdGEgPSBCdXR0b24uZ2V0T3JDcmVhdGVJbnN0YW5jZShidXR0b24pXG5cbiAgZGF0YS50b2dnbGUoKVxufSlcblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQnV0dG9uKVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGlzRGlzYWJsZWQsIGlzVmlzaWJsZSB9IGZyb20gJy4uL3V0aWwvaW5kZXgnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgU2VsZWN0b3JFbmdpbmUgPSB7XG4gIGZpbmQoc2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLkVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlbGVtZW50LCBzZWxlY3RvcikpXG4gIH0sXG5cbiAgZmluZE9uZShzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpXG4gIH0sXG5cbiAgY2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLmVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5tYXRjaGVzKHNlbGVjdG9yKSlcbiAgfSxcblxuICBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcGFyZW50cyA9IFtdXG4gICAgbGV0IGFuY2VzdG9yID0gZWxlbWVudC5wYXJlbnROb2RlLmNsb3Nlc3Qoc2VsZWN0b3IpXG5cbiAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgIHBhcmVudHMucHVzaChhbmNlc3RvcilcbiAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZS5jbG9zZXN0KHNlbGVjdG9yKVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRzXG4gIH0sXG5cbiAgcHJldihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGxldCBwcmV2aW91cyA9IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZ1xuXG4gICAgd2hpbGUgKHByZXZpb3VzKSB7XG4gICAgICBpZiAocHJldmlvdXMubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIFtwcmV2aW91c11cbiAgICAgIH1cblxuICAgICAgcHJldmlvdXMgPSBwcmV2aW91cy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgfVxuXG4gICAgcmV0dXJuIFtdXG4gIH0sXG4gIC8vIFRPRE86IHRoaXMgaXMgbm93IHVudXNlZDsgcmVtb3ZlIGxhdGVyIGFsb25nIHdpdGggcHJldigpXG4gIG5leHQoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBsZXQgbmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXG5cbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIFtuZXh0XVxuICAgICAgfVxuXG4gICAgICBuZXh0ID0gbmV4dC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG5cbiAgICByZXR1cm4gW11cbiAgfSxcblxuICBmb2N1c2FibGVDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgY29uc3QgZm9jdXNhYmxlcyA9IFtcbiAgICAgICdhJyxcbiAgICAgICdidXR0b24nLFxuICAgICAgJ2lucHV0JyxcbiAgICAgICd0ZXh0YXJlYScsXG4gICAgICAnc2VsZWN0JyxcbiAgICAgICdkZXRhaWxzJyxcbiAgICAgICdbdGFiaW5kZXhdJyxcbiAgICAgICdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSdcbiAgICBdLm1hcChzZWxlY3RvciA9PiBgJHtzZWxlY3Rvcn06bm90KFt0YWJpbmRleF49XCItXCJdKWApLmpvaW4oJywnKVxuXG4gICAgcmV0dXJuIHRoaXMuZmluZChmb2N1c2FibGVzLCBlbGVtZW50KS5maWx0ZXIoZWwgPT4gIWlzRGlzYWJsZWQoZWwpICYmIGlzVmlzaWJsZShlbCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JFbmdpbmVcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogdXRpbC9zd2lwZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IHsgZXhlY3V0ZSB9IGZyb20gJy4vaW5kZXgnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdzd2lwZSdcbmNvbnN0IEVWRU5UX0tFWSA9ICcuYnMuc3dpcGUnXG5jb25zdCBFVkVOVF9UT1VDSFNUQVJUID0gYHRvdWNoc3RhcnQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9UT1VDSE1PVkUgPSBgdG91Y2htb3ZlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfVE9VQ0hFTkQgPSBgdG91Y2hlbmQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9QT0lOVEVSRE9XTiA9IGBwb2ludGVyZG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1BPSU5URVJVUCA9IGBwb2ludGVydXAke0VWRU5UX0tFWX1gXG5jb25zdCBQT0lOVEVSX1RZUEVfVE9VQ0ggPSAndG91Y2gnXG5jb25zdCBQT0lOVEVSX1RZUEVfUEVOID0gJ3BlbidcbmNvbnN0IENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCA9ICdwb2ludGVyLWV2ZW50J1xuY29uc3QgU1dJUEVfVEhSRVNIT0xEID0gNDBcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgZW5kQ2FsbGJhY2s6IG51bGwsXG4gIGxlZnRDYWxsYmFjazogbnVsbCxcbiAgcmlnaHRDYWxsYmFjazogbnVsbFxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgZW5kQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknLFxuICBsZWZ0Q2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknLFxuICByaWdodENhbGxiYWNrOiAnKGZ1bmN0aW9ufG51bGwpJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBTd2lwZSBleHRlbmRzIENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuXG4gICAgaWYgKCFlbGVtZW50IHx8ICFTd2lwZS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2RlbHRhWCA9IDBcbiAgICB0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cyA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudClcbiAgICB0aGlzLl9pbml0RXZlbnRzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZGlzcG9zZSgpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWSlcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX3N0YXJ0KGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cykge1xuICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYXG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudElzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQuY2xpZW50WFxuICAgIH1cbiAgfVxuXG4gIF9lbmQoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5fZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaChldmVudCkpIHtcbiAgICAgIHRoaXMuX2RlbHRhWCA9IGV2ZW50LmNsaWVudFggLSB0aGlzLl9kZWx0YVhcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVTd2lwZSgpXG4gICAgZXhlY3V0ZSh0aGlzLl9jb25maWcuZW5kQ2FsbGJhY2spXG4gIH1cblxuICBfbW92ZShldmVudCkge1xuICAgIHRoaXMuX2RlbHRhWCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxID9cbiAgICAgIDAgOlxuICAgICAgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy5fZGVsdGFYXG4gIH1cblxuICBfaGFuZGxlU3dpcGUoKSB7XG4gICAgY29uc3QgYWJzRGVsdGFYID0gTWF0aC5hYnModGhpcy5fZGVsdGFYKVxuXG4gICAgaWYgKGFic0RlbHRhWCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRhWCAvIHRoaXMuX2RlbHRhWFxuXG4gICAgdGhpcy5fZGVsdGFYID0gMFxuXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGV4ZWN1dGUoZGlyZWN0aW9uID4gMCA/IHRoaXMuX2NvbmZpZy5yaWdodENhbGxiYWNrIDogdGhpcy5fY29uZmlnLmxlZnRDYWxsYmFjaylcbiAgfVxuXG4gIF9pbml0RXZlbnRzKCkge1xuICAgIGlmICh0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCBldmVudCA9PiB0aGlzLl9zdGFydChldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUlVQLCBldmVudCA9PiB0aGlzLl9lbmQoZXZlbnQpKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UKVxuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hTVEFSVCwgZXZlbnQgPT4gdGhpcy5fc3RhcnQoZXZlbnQpKVxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNITU9WRSwgZXZlbnQgPT4gdGhpcy5fbW92ZShldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hFTkQsIGV2ZW50ID0+IHRoaXMuX2VuZChldmVudCkpXG4gICAgfVxuICB9XG5cbiAgX2V2ZW50SXNQb2ludGVyUGVuVG91Y2goZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fc3VwcG9ydFBvaW50ZXJFdmVudHMgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGlzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXBlXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcbiAgaXNSVEwsXG4gIGlzVmlzaWJsZSxcbiAgcmVmbG93LFxuICB0cmlnZ2VyVHJhbnNpdGlvbkVuZFxufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IFN3aXBlIGZyb20gJy4vdXRpbC9zd2lwZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdjYXJvdXNlbCdcbmNvbnN0IERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IEFSUk9XX0xFRlRfS0VZID0gJ0Fycm93TGVmdCdcbmNvbnN0IEFSUk9XX1JJR0hUX0tFWSA9ICdBcnJvd1JpZ2h0J1xuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMCAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuY29uc3QgT1JERVJfTkVYVCA9ICduZXh0J1xuY29uc3QgT1JERVJfUFJFViA9ICdwcmV2J1xuY29uc3QgRElSRUNUSU9OX0xFRlQgPSAnbGVmdCdcbmNvbnN0IERJUkVDVElPTl9SSUdIVCA9ICdyaWdodCdcblxuY29uc3QgRVZFTlRfU0xJREUgPSBgc2xpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TTElEID0gYHNsaWQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOID0gYGtleWRvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9NT1VTRUVOVEVSID0gYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9NT1VTRUxFQVZFID0gYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9EUkFHX1NUQVJUID0gYGRyYWdzdGFydCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0xPQURfREFUQV9BUEkgPSBgbG9hZCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX0NBUk9VU0VMID0gJ2Nhcm91c2VsJ1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TTElERSA9ICdzbGlkZSdcbmNvbnN0IENMQVNTX05BTUVfRU5EID0gJ2Nhcm91c2VsLWl0ZW0tZW5kJ1xuY29uc3QgQ0xBU1NfTkFNRV9TVEFSVCA9ICdjYXJvdXNlbC1pdGVtLXN0YXJ0J1xuY29uc3QgQ0xBU1NfTkFNRV9ORVhUID0gJ2Nhcm91c2VsLWl0ZW0tbmV4dCdcbmNvbnN0IENMQVNTX05BTUVfUFJFViA9ICdjYXJvdXNlbC1pdGVtLXByZXYnXG5cbmNvbnN0IFNFTEVDVE9SX0FDVElWRSA9ICcuYWN0aXZlJ1xuY29uc3QgU0VMRUNUT1JfSVRFTSA9ICcuY2Fyb3VzZWwtaXRlbSdcbmNvbnN0IFNFTEVDVE9SX0FDVElWRV9JVEVNID0gU0VMRUNUT1JfQUNUSVZFICsgU0VMRUNUT1JfSVRFTVxuY29uc3QgU0VMRUNUT1JfSVRFTV9JTUcgPSAnLmNhcm91c2VsLWl0ZW0gaW1nJ1xuY29uc3QgU0VMRUNUT1JfSU5ESUNBVE9SUyA9ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycydcbmNvbnN0IFNFTEVDVE9SX0RBVEFfU0xJREUgPSAnW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b10nXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1JJREUgPSAnW2RhdGEtYnMtcmlkZT1cImNhcm91c2VsXCJdJ1xuXG5jb25zdCBLRVlfVE9fRElSRUNUSU9OID0ge1xuICBbQVJST1dfTEVGVF9LRVldOiBESVJFQ1RJT05fUklHSFQsXG4gIFtBUlJPV19SSUdIVF9LRVldOiBESVJFQ1RJT05fTEVGVFxufVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBpbnRlcnZhbDogNTAwMCxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHBhdXNlOiAnaG92ZXInLFxuICByaWRlOiBmYWxzZSxcbiAgdG91Y2g6IHRydWUsXG4gIHdyYXA6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsIC8vIFRPRE86djYgcmVtb3ZlIGJvb2xlYW4gc3VwcG9ydFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICByaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIHRvdWNoOiAnYm9vbGVhbicsXG4gIHdyYXA6ICdib29sZWFuJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBDYXJvdXNlbCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50LCBjb25maWcpXG5cbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsXG4gICAgdGhpcy5fc3dpcGVIZWxwZXIgPSBudWxsXG5cbiAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfSU5ESUNBVE9SUywgdGhpcy5fZWxlbWVudClcbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnJpZGUgPT09IENMQVNTX05BTUVfQ0FST1VTRUwpIHtcbiAgICAgIHRoaXMuY3ljbGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgbmV4dCgpIHtcbiAgICB0aGlzLl9zbGlkZShPUkRFUl9ORVhUKVxuICB9XG5cbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIC8vIEZJWE1FIFRPRE8gdXNlIGBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGVgXG4gICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiBpc1Zpc2libGUodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIHRoaXMubmV4dCgpXG4gICAgfVxuICB9XG5cbiAgcHJldigpIHtcbiAgICB0aGlzLl9zbGlkZShPUkRFUl9QUkVWKVxuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhckludGVydmFsKClcbiAgfVxuXG4gIGN5Y2xlKCkge1xuICAgIHRoaXMuX2NsZWFySW50ZXJ2YWwoKVxuICAgIHRoaXMuX3VwZGF0ZUludGVydmFsKClcblxuICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5uZXh0V2hlblZpc2libGUoKSwgdGhpcy5fY29uZmlnLmludGVydmFsKVxuICB9XG5cbiAgX21heWJlRW5hYmxlQ3ljbGUoKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcucmlkZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLmN5Y2xlKCkpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmN5Y2xlKClcbiAgfVxuXG4gIHRvKGluZGV4KSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9nZXRJdGVtcygpXG4gICAgaWYgKGluZGV4ID4gaXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwgKCkgPT4gdGhpcy50byhpbmRleCkpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9nZXRBY3RpdmUoKSlcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBvcmRlciA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBPUkRFUl9ORVhUIDogT1JERVJfUFJFVlxuXG4gICAgdGhpcy5fc2xpZGUob3JkZXIsIGl0ZW1zW2luZGV4XSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX3N3aXBlSGVscGVyKSB7XG4gICAgICB0aGlzLl9zd2lwZUhlbHBlci5kaXNwb3NlKClcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IGNvbmZpZy5pbnRlcnZhbFxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTiwgZXZlbnQgPT4gdGhpcy5fa2V5ZG93bihldmVudCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFRU5URVIsICgpID0+IHRoaXMucGF1c2UoKSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRUxFQVZFLCAoKSA9PiB0aGlzLl9tYXliZUVuYWJsZUN5Y2xlKCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b3VjaCAmJiBTd2lwZS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKClcbiAgICB9XG4gIH1cblxuICBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICBmb3IgKGNvbnN0IGltZyBvZiBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU1fSU1HLCB0aGlzLl9lbGVtZW50KSkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKGltZywgRVZFTlRfRFJBR19TVEFSVCwgZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKSlcbiAgICB9XG5cbiAgICBjb25zdCBlbmRDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgIT09ICdob3ZlcicpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG5cbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dClcbiAgICAgIH1cblxuICAgICAgdGhpcy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX21heWJlRW5hYmxlQ3ljbGUoKSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIHRoaXMuX2NvbmZpZy5pbnRlcnZhbClcbiAgICB9XG5cbiAgICBjb25zdCBzd2lwZUNvbmZpZyA9IHtcbiAgICAgIGxlZnRDYWxsYmFjazogKCkgPT4gdGhpcy5fc2xpZGUodGhpcy5fZGlyZWN0aW9uVG9PcmRlcihESVJFQ1RJT05fTEVGVCkpLFxuICAgICAgcmlnaHRDYWxsYmFjazogKCkgPT4gdGhpcy5fc2xpZGUodGhpcy5fZGlyZWN0aW9uVG9PcmRlcihESVJFQ1RJT05fUklHSFQpKSxcbiAgICAgIGVuZENhbGxiYWNrOiBlbmRDYWxsQmFja1xuICAgIH1cblxuICAgIHRoaXMuX3N3aXBlSGVscGVyID0gbmV3IFN3aXBlKHRoaXMuX2VsZW1lbnQsIHN3aXBlQ29uZmlnKVxuICB9XG5cbiAgX2tleWRvd24oZXZlbnQpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IEtFWV9UT19ESVJFQ1RJT05bZXZlbnQua2V5XVxuICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuX3NsaWRlKHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uKSlcbiAgICB9XG4gIH1cblxuICBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0SXRlbXMoKS5pbmRleE9mKGVsZW1lbnQpXG4gIH1cblxuICBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChpbmRleCkge1xuICAgIGlmICghdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudClcblxuICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIGFjdGl2ZUluZGljYXRvci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcpXG5cbiAgICBjb25zdCBuZXdBY3RpdmVJbmRpY2F0b3IgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKGBbZGF0YS1icy1zbGlkZS10bz1cIiR7aW5kZXh9XCJdYCwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpXG5cbiAgICBpZiAobmV3QWN0aXZlSW5kaWNhdG9yKSB7XG4gICAgICBuZXdBY3RpdmVJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcbiAgICAgIG5ld0FjdGl2ZUluZGljYXRvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJylcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQgfHwgdGhpcy5fZ2V0QWN0aXZlKClcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudEludGVydmFsID0gTnVtYmVyLnBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLWludGVydmFsJyksIDEwKVxuXG4gICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWxcbiAgfVxuXG4gIF9zbGlkZShvcmRlciwgZWxlbWVudCA9IG51bGwpIHtcbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZ2V0QWN0aXZlKClcbiAgICBjb25zdCBpc05leHQgPSBvcmRlciA9PT0gT1JERVJfTkVYVFxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBnZXROZXh0QWN0aXZlRWxlbWVudCh0aGlzLl9nZXRJdGVtcygpLCBhY3RpdmVFbGVtZW50LCBpc05leHQsIHRoaXMuX2NvbmZpZy53cmFwKVxuXG4gICAgaWYgKG5leHRFbGVtZW50ID09PSBhY3RpdmVFbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KVxuXG4gICAgY29uc3QgdHJpZ2dlckV2ZW50ID0gZXZlbnROYW1lID0+IHtcbiAgICAgIHJldHVybiBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBldmVudE5hbWUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogdGhpcy5fb3JkZXJUb0RpcmVjdGlvbihvcmRlciksXG4gICAgICAgIGZyb206IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KSxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgc2xpZGVFdmVudCA9IHRyaWdnZXJFdmVudChFVkVOVF9TTElERSlcblxuICAgIGlmIChzbGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgIC8vIFNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgLy8gdG9kbzogY2hhbmdlIHRlc3RzIHRoYXQgdXNlIGVtcHR5IGRpdnMgdG8gYXZvaWQgdGhpcyBjaGVja1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbClcbiAgICB0aGlzLnBhdXNlKClcblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWVcblxuICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnRJbmRleClcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV4dEVsZW1lbnRcblxuICAgIGNvbnN0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9TVEFSVCA6IENMQVNTX05BTUVfRU5EXG4gICAgY29uc3Qgb3JkZXJDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX05FWFQgOiBDTEFTU19OQU1FX1BSRVZcblxuICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQob3JkZXJDbGFzc05hbWUpXG5cbiAgICByZWZsb3cobmV4dEVsZW1lbnQpXG5cbiAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG4gICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSlcblxuICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGRpcmVjdGlvbmFsQ2xhc3NOYW1lLCBvcmRlckNsYXNzTmFtZSlcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZVxuXG4gICAgICB0cmlnZ2VyRXZlbnQoRVZFTlRfU0xJRClcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbEJhY2ssIGFjdGl2ZUVsZW1lbnQsIHRoaXMuX2lzQW5pbWF0ZWQoKSlcblxuICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgIHRoaXMuY3ljbGUoKVxuICAgIH1cbiAgfVxuXG4gIF9pc0FuaW1hdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NMSURFKVxuICB9XG5cbiAgX2dldEFjdGl2ZSgpIHtcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudClcbiAgfVxuXG4gIF9nZXRJdGVtcygpIHtcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JVEVNLCB0aGlzLl9lbGVtZW50KVxuICB9XG5cbiAgX2NsZWFySW50ZXJ2YWwoKSB7XG4gICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uKSB7XG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFRcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWXG4gIH1cblxuICBfb3JkZXJUb0RpcmVjdGlvbihvcmRlcikge1xuICAgIGlmIChpc1JUTCgpKSB7XG4gICAgICByZXR1cm4gb3JkZXIgPT09IE9SREVSX1BSRVYgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVFxuICAgIH1cblxuICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9SSUdIVCA6IERJUkVDVElPTl9MRUZUXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRhdGEudG8oY29uZmlnKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9TTElERSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcylcblxuICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0NBUk9VU0VMKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gIGNvbnN0IGNhcm91c2VsID0gQ2Fyb3VzZWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpXG4gIGNvbnN0IHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1icy1zbGlkZS10bycpXG5cbiAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICBjYXJvdXNlbC50byhzbGlkZUluZGV4KVxuICAgIGNhcm91c2VsLl9tYXliZUVuYWJsZUN5Y2xlKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKHRoaXMsICdzbGlkZScpID09PSAnbmV4dCcpIHtcbiAgICBjYXJvdXNlbC5uZXh0KClcbiAgICBjYXJvdXNlbC5fbWF5YmVFbmFibGVDeWNsZSgpXG4gICAgcmV0dXJuXG4gIH1cblxuICBjYXJvdXNlbC5wcmV2KClcbiAgY2Fyb3VzZWwuX21heWJlRW5hYmxlQ3ljbGUoKVxufSlcblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBjb25zdCBjYXJvdXNlbHMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfUklERSlcblxuICBmb3IgKGNvbnN0IGNhcm91c2VsIG9mIGNhcm91c2Vscykge1xuICAgIENhcm91c2VsLmdldE9yQ3JlYXRlSW5zdGFuY2UoY2Fyb3VzZWwpXG4gIH1cbn0pXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKENhcm91c2VsKVxuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiBjb2xsYXBzZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcbiAgcmVmbG93XG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnY29sbGFwc2UnXG5jb25zdCBEQVRBX0tFWSA9ICdicy5jb2xsYXBzZSdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX0NPTExBUFNFID0gJ2NvbGxhcHNlJ1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTSU5HID0gJ2NvbGxhcHNpbmcnXG5jb25zdCBDTEFTU19OQU1FX0NPTExBUFNFRCA9ICdjb2xsYXBzZWQnXG5jb25zdCBDTEFTU19OQU1FX0RFRVBFUl9DSElMRFJFTiA9IGA6c2NvcGUgLiR7Q0xBU1NfTkFNRV9DT0xMQVBTRX0gLiR7Q0xBU1NfTkFNRV9DT0xMQVBTRX1gXG5jb25zdCBDTEFTU19OQU1FX0hPUklaT05UQUwgPSAnY29sbGFwc2UtaG9yaXpvbnRhbCdcblxuY29uc3QgV0lEVEggPSAnd2lkdGgnXG5jb25zdCBIRUlHSFQgPSAnaGVpZ2h0J1xuXG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVTID0gJy5jb2xsYXBzZS5zaG93LCAuY29sbGFwc2UuY29sbGFwc2luZydcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBwYXJlbnQ6IG51bGwsXG4gIHRvZ2dsZTogdHJ1ZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgcGFyZW50OiAnKG51bGx8ZWxlbWVudCknLFxuICB0b2dnbGU6ICdib29sZWFuJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBDb2xsYXBzZSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50LCBjb25maWcpXG5cbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFtdXG5cbiAgICBjb25zdCB0b2dnbGVMaXN0ID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSlcblxuICAgIGZvciAoY29uc3QgZWxlbSBvZiB0b2dnbGVMaXN0KSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSlcbiAgICAgIGNvbnN0IGZpbHRlckVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKVxuICAgICAgICAuZmlsdGVyKGZvdW5kRWxlbWVudCA9PiBmb3VuZEVsZW1lbnQgPT09IHRoaXMuX2VsZW1lbnQpXG5cbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRpYWxpemVDaGlsZHJlbigpXG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksIHRoaXMuX2lzU2hvd24oKSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgdGhpcy50b2dnbGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpXG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZUNoaWxkcmVuID0gW11cblxuICAgIC8vIGZpbmQgYWN0aXZlIGNoaWxkcmVuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIGFjdGl2ZUNoaWxkcmVuID0gdGhpcy5fZ2V0Rmlyc3RMZXZlbENoaWxkcmVuKFNFTEVDVE9SX0FDVElWRVMpXG4gICAgICAgIC5maWx0ZXIoZWxlbWVudCA9PiBlbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50KVxuICAgICAgICAubWFwKGVsZW1lbnQgPT4gQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCB7IHRvZ2dsZTogZmFsc2UgfSkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUNoaWxkcmVuLmxlbmd0aCAmJiBhY3RpdmVDaGlsZHJlblswXS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVylcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGFjdGl2ZUluc3RhbmNlIG9mIGFjdGl2ZUNoaWxkcmVuKSB7XG4gICAgICBhY3RpdmVJbnN0YW5jZS5oaWRlKClcbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0lORylcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDBcblxuICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksIHRydWUpXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UsIENMQVNTX05BTUVfU0hPVylcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJydcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pXG4gICAgfVxuXG4gICAgY29uc3QgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKVxuICAgIGNvbnN0IHNjcm9sbFNpemUgPSBgc2Nyb2xsJHtjYXBpdGFsaXplZERpbWVuc2lvbn1gXG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IGAke3RoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV19cHhgXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG4gICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKClcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IGAke3RoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXX1weGBcblxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0lORylcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSwgQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRoaXMuX3RyaWdnZXJBcnJheSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodHJpZ2dlcilcblxuICAgICAgaWYgKGVsZW1lbnQgJiYgIXRoaXMuX2lzU2hvd24oZWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFt0cmlnZ2VyXSwgZmFsc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgX2lzU2hvd24oZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfY29uZmlnQWZ0ZXJNZXJnZShjb25maWcpIHtcbiAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKSAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuICAgIGNvbmZpZy5wYXJlbnQgPSBnZXRFbGVtZW50KGNvbmZpZy5wYXJlbnQpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldERpbWVuc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9IT1JJWk9OVEFMKSA/IFdJRFRIIDogSEVJR0hUXG4gIH1cblxuICBfaW5pdGlhbGl6ZUNoaWxkcmVuKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLl9nZXRGaXJzdExldmVsQ2hpbGRyZW4oU0VMRUNUT1JfREFUQV9UT0dHTEUpXG5cbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KVxuXG4gICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFtlbGVtZW50XSwgdGhpcy5faXNTaG93bihzZWxlY3RlZCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2dldEZpcnN0TGV2ZWxDaGlsZHJlbihzZWxlY3Rvcikge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gU2VsZWN0b3JFbmdpbmUuZmluZChDTEFTU19OQU1FX0RFRVBFUl9DSElMRFJFTiwgdGhpcy5fY29uZmlnLnBhcmVudClcbiAgICAvLyByZW1vdmUgY2hpbGRyZW4gaWYgZ3JlYXRlciBkZXB0aFxuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yLCB0aGlzLl9jb25maWcucGFyZW50KS5maWx0ZXIoZWxlbWVudCA9PiAhY2hpbGRyZW4uaW5jbHVkZXMoZWxlbWVudCkpXG4gIH1cblxuICBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRyaWdnZXJBcnJheSwgaXNPcGVuKSB7XG4gICAgaWYgKCF0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdHJpZ2dlckFycmF5KSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoQ0xBU1NfTkFNRV9DT0xMQVBTRUQsICFpc09wZW4pXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICBjb25zdCBfY29uZmlnID0ge31cbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBfY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnQScgfHwgKGV2ZW50LmRlbGVnYXRlVGFyZ2V0ICYmIGV2ZW50LmRlbGVnYXRlVGFyZ2V0LnRhZ05hbWUgPT09ICdBJykpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcylcbiAgY29uc3Qgc2VsZWN0b3JFbGVtZW50cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpXG5cbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIHNlbGVjdG9yRWxlbWVudHMpIHtcbiAgICBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIHsgdG9nZ2xlOiBmYWxzZSB9KS50b2dnbGUoKVxuICB9XG59KVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihDb2xsYXBzZSlcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgKiBhcyBQb3BwZXIgZnJvbSAnQHBvcHBlcmpzL2NvcmUnXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGdldEVsZW1lbnQsXG4gIGdldE5leHRBY3RpdmVFbGVtZW50LFxuICBpc0Rpc2FibGVkLFxuICBpc0VsZW1lbnQsXG4gIGlzUlRMLFxuICBpc1Zpc2libGUsXG4gIG5vb3Bcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4vZG9tL21hbmlwdWxhdG9yJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdkcm9wZG93bidcbmNvbnN0IERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IEVTQ0FQRV9LRVkgPSAnRXNjYXBlJ1xuY29uc3QgVEFCX0tFWSA9ICdUYWInXG5jb25zdCBBUlJPV19VUF9LRVkgPSAnQXJyb3dVcCdcbmNvbnN0IEFSUk9XX0RPV05fS0VZID0gJ0Fycm93RG93bidcbmNvbnN0IFJJR0hUX01PVVNFX0JVVFRPTiA9IDIgLy8gTW91c2VFdmVudC5idXR0b24gdmFsdWUgZm9yIHRoZSBzZWNvbmRhcnkgYnV0dG9uLCB1c3VhbGx5IHRoZSByaWdodCBidXR0b25cblxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElEREVOID0gYGhpZGRlbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJID0gYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IGBrZXl1cCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX0RST1BVUCA9ICdkcm9wdXAnXG5jb25zdCBDTEFTU19OQU1FX0RST1BFTkQgPSAnZHJvcGVuZCdcbmNvbnN0IENMQVNTX05BTUVfRFJPUFNUQVJUID0gJ2Ryb3BzdGFydCdcbmNvbnN0IENMQVNTX05BTUVfRFJPUFVQX0NFTlRFUiA9ICdkcm9wdXAtY2VudGVyJ1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRE9XTl9DRU5URVIgPSAnZHJvcGRvd24tY2VudGVyJ1xuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFX1NIT1dOID0gYCR7U0VMRUNUT1JfREFUQV9UT0dHTEV9LiR7Q0xBU1NfTkFNRV9TSE9XfWBcbmNvbnN0IFNFTEVDVE9SX01FTlUgPSAnLmRyb3Bkb3duLW1lbnUnXG5jb25zdCBTRUxFQ1RPUl9OQVZCQVIgPSAnLm5hdmJhcidcbmNvbnN0IFNFTEVDVE9SX05BVkJBUl9OQVYgPSAnLm5hdmJhci1uYXYnXG5jb25zdCBTRUxFQ1RPUl9WSVNJQkxFX0lURU1TID0gJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJ1xuXG5jb25zdCBQTEFDRU1FTlRfVE9QID0gaXNSVEwoKSA/ICd0b3AtZW5kJyA6ICd0b3Atc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfVE9QRU5EID0gaXNSVEwoKSA/ICd0b3Atc3RhcnQnIDogJ3RvcC1lbmQnXG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NID0gaXNSVEwoKSA/ICdib3R0b20tZW5kJyA6ICdib3R0b20tc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NRU5EID0gaXNSVEwoKSA/ICdib3R0b20tc3RhcnQnIDogJ2JvdHRvbS1lbmQnXG5jb25zdCBQTEFDRU1FTlRfUklHSFQgPSBpc1JUTCgpID8gJ2xlZnQtc3RhcnQnIDogJ3JpZ2h0LXN0YXJ0J1xuY29uc3QgUExBQ0VNRU5UX0xFRlQgPSBpc1JUTCgpID8gJ3JpZ2h0LXN0YXJ0JyA6ICdsZWZ0LXN0YXJ0J1xuY29uc3QgUExBQ0VNRU5UX1RPUENFTlRFUiA9ICd0b3AnXG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NQ0VOVEVSID0gJ2JvdHRvbSdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYXV0b0Nsb3NlOiB0cnVlLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIGRpc3BsYXk6ICdkeW5hbWljJyxcbiAgb2Zmc2V0OiBbMCwgMl0sXG4gIHBvcHBlckNvbmZpZzogbnVsbCxcbiAgcmVmZXJlbmNlOiAndG9nZ2xlJ1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYXV0b0Nsb3NlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gIGRpc3BsYXk6ICdzdHJpbmcnLFxuICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknLFxuICByZWZlcmVuY2U6ICcoc3RyaW5nfGVsZW1lbnR8b2JqZWN0KSdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgRHJvcGRvd24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCwgY29uZmlnKVxuXG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAvLyBkcm9wZG93biB3cmFwcGVyXG4gICAgLy8gdG9kbzogdjYgcmV2ZXJ0ICMzNzAxMSAmIGNoYW5nZSBtYXJrdXAgaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNS4yL2Zvcm1zL2lucHV0LWdyb3VwL1xuICAgIHRoaXMuX21lbnUgPSBTZWxlY3RvckVuZ2luZS5uZXh0KHRoaXMuX2VsZW1lbnQsIFNFTEVDVE9SX01FTlUpWzBdIHx8IFNlbGVjdG9yRW5naW5lLnByZXYodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF1cbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTaG93bigpID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzLl9lbGVtZW50KSB8fCB0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVywgcmVsYXRlZFRhcmdldClcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fY3JlYXRlUG9wcGVyKClcblxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhdGhpcy5fcGFyZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSX05BVikpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgIHRoaXMuX21lbnUuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiwgcmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG5cbiAgICB0aGlzLl9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgIH1cblxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKClcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIudXBkYXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUsIHJlbGF0ZWRUYXJnZXQpXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKSkge1xuICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KClcbiAgICB9XG5cbiAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgIE1hbmlwdWxhdG9yLnJlbW92ZURhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicpXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOLCByZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSBzdXBlci5fZ2V0Q29uZmlnKGNvbmZpZylcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnJlZmVyZW5jZSA9PT0gJ29iamVjdCcgJiYgIWlzRWxlbWVudChjb25maWcucmVmZXJlbmNlKSAmJlxuICAgICAgdHlwZW9mIGNvbmZpZy5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAnZnVuY3Rpb24nXG4gICAgKSB7XG4gICAgICAvLyBQb3BwZXIgdmlydHVhbCBlbGVtZW50cyByZXF1aXJlIGEgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG1ldGhvZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtOQU1FLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2NyZWF0ZVBvcHBlcigpIHtcbiAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJylcbiAgICB9XG5cbiAgICBsZXQgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnRcblxuICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX3BhcmVudFxuICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpKSB7XG4gICAgICByZWZlcmVuY2VFbGVtZW50ID0gZ2V0RWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdvYmplY3QnKSB7XG4gICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVxuICAgIH1cblxuICAgIGNvbnN0IHBvcHBlckNvbmZpZyA9IHRoaXMuX2dldFBvcHBlckNvbmZpZygpXG4gICAgdGhpcy5fcG9wcGVyID0gUG9wcGVyLmNyZWF0ZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCBwb3BwZXJDb25maWcpXG4gIH1cblxuICBfaXNTaG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuICB9XG5cbiAgX2dldFBsYWNlbWVudCgpIHtcbiAgICBjb25zdCBwYXJlbnREcm9wZG93biA9IHRoaXMuX3BhcmVudFxuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BFTkQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX1JJR0hUXG4gICAgfVxuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BTVEFSVCkpIHtcbiAgICAgIHJldHVybiBQTEFDRU1FTlRfTEVGVFxuICAgIH1cblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QVVBfQ0VOVEVSKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9UT1BDRU5URVJcbiAgICB9XG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fQ0VOVEVSKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9CT1RUT01DRU5URVJcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIHRvIHRyaW0gdGhlIHZhbHVlIGJlY2F1c2UgY3VzdG9tIHByb3BlcnRpZXMgY2FuIGFsc28gaW5jbHVkZSBzcGFjZXNcbiAgICBjb25zdCBpc0VuZCA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5fbWVudSkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1icy1wb3NpdGlvbicpLnRyaW0oKSA9PT0gJ2VuZCdcblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QVVApKSB7XG4gICAgICByZXR1cm4gaXNFbmQgPyBQTEFDRU1FTlRfVE9QRU5EIDogUExBQ0VNRU5UX1RPUFxuICAgIH1cblxuICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NXG4gIH1cblxuICBfZGV0ZWN0TmF2YmFyKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSKSAhPT0gbnVsbFxuICB9XG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsdWUgPT4gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCAxMCkpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgY29uc3QgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgIG1vZGlmaWVyczogW3tcbiAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBib3VuZGFyeTogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH1cblxuICAgIC8vIERpc2FibGUgUG9wcGVyIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheSBvciBEcm9wZG93biBpcyBpbiBOYXZiYXJcbiAgICBpZiAodGhpcy5faW5OYXZiYXIgfHwgdGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInLCAnc3RhdGljJykgLy8gdG9kbzp2NiByZW1vdmVcbiAgICAgIGRlZmF1bHRCc1BvcHBlckNvbmZpZy5tb2RpZmllcnMgPSBbe1xuICAgICAgICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfV1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxuICAgICAgLi4uKHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhkZWZhdWx0QnNQb3BwZXJDb25maWcpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZylcbiAgICB9XG4gIH1cblxuICBfc2VsZWN0TWVudUl0ZW0oeyBrZXksIHRhcmdldCB9KSB7XG4gICAgY29uc3QgaXRlbXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMsIHRoaXMuX21lbnUpLmZpbHRlcihlbGVtZW50ID0+IGlzVmlzaWJsZShlbGVtZW50KSlcblxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxuICAgIC8vIGFsbG93IGN5Y2xpbmcgdG8gZ2V0IHRoZSBsYXN0IGl0ZW0gaW4gY2FzZSBrZXkgZXF1YWxzIEFSUk9XX1VQX0tFWVxuICAgIGdldE5leHRBY3RpdmVFbGVtZW50KGl0ZW1zLCB0YXJnZXQsIGtleSA9PT0gQVJST1dfRE9XTl9LRVksICFpdGVtcy5pbmNsdWRlcyh0YXJnZXQpKS5mb2N1cygpXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IFJJR0hUX01PVVNFX0JVVFRPTiB8fCAoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBvcGVuVG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04pXG5cbiAgICBmb3IgKGNvbnN0IHRvZ2dsZSBvZiBvcGVuVG9nZ2xlcykge1xuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZSlcbiAgICAgIGlmICghY29udGV4dCB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21wb3NlZFBhdGggPSBldmVudC5jb21wb3NlZFBhdGgoKVxuICAgICAgY29uc3QgaXNNZW51VGFyZ2V0ID0gY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX21lbnUpXG4gICAgICBpZiAoXG4gICAgICAgIGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9lbGVtZW50KSB8fFxuICAgICAgICAoY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gJ2luc2lkZScgJiYgIWlzTWVudVRhcmdldCkgfHxcbiAgICAgICAgKGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdvdXRzaWRlJyAmJiBpc01lbnVUYXJnZXQpXG4gICAgICApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gVGFiIG5hdmlnYXRpb24gdGhyb3VnaCB0aGUgZHJvcGRvd24gbWVudSBvciBldmVudHMgZnJvbSBjb250YWluZWQgaW5wdXRzIHNob3VsZG4ndCBjbG9zZSB0aGUgbWVudVxuICAgICAgaWYgKGNvbnRleHQuX21lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAoKGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ID09PSBUQUJfS0VZKSB8fCAvaW5wdXR8c2VsZWN0fG9wdGlvbnx0ZXh0YXJlYXxmb3JtL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IGNvbnRleHQuX2VsZW1lbnQgfVxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudFxuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldClcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgLy8gSWYgbm90IGFuIFVQIHwgRE9XTiB8IEVTQ0FQRSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vIElmIGlucHV0L3RleHRhcmVhICYmIGlmIGtleSBpcyBvdGhlciB0aGFuIEVTQ0FQRSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG5cbiAgICBjb25zdCBpc0lucHV0ID0gL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSlcbiAgICBjb25zdCBpc0VzY2FwZUV2ZW50ID0gZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZXG4gICAgY29uc3QgaXNVcE9yRG93bkV2ZW50ID0gW0FSUk9XX1VQX0tFWSwgQVJST1dfRE9XTl9LRVldLmluY2x1ZGVzKGV2ZW50LmtleSlcblxuICAgIGlmICghaXNVcE9yRG93bkV2ZW50ICYmICFpc0VzY2FwZUV2ZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNJbnB1dCAmJiAhaXNFc2NhcGVFdmVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgLy8gdG9kbzogdjYgcmV2ZXJ0ICMzNzAxMSAmIGNoYW5nZSBtYXJrdXAgaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNS4yL2Zvcm1zL2lucHV0LWdyb3VwL1xuICAgIGNvbnN0IGdldFRvZ2dsZUJ1dHRvbiA9IHRoaXMubWF0Y2hlcyhTRUxFQ1RPUl9EQVRBX1RPR0dMRSkgPyB0aGlzIDogU2VsZWN0b3JFbmdpbmUucHJldih0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSlbMF0gfHwgU2VsZWN0b3JFbmdpbmUubmV4dCh0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSlbMF1cbiAgICBjb25zdCBpbnN0YW5jZSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKVxuXG4gICAgaWYgKGlzVXBPckRvd25FdmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGluc3RhbmNlLnNob3coKVxuICAgICAgaW5zdGFuY2UuX3NlbGVjdE1lbnVJdGVtKGV2ZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLl9pc1Nob3duKCkpIHsgLy8gZWxzZSBpcyBlc2NhcGUgYW5kIHdlIGNoZWNrIGlmIGl0IGlzIHNob3duXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgaW5zdGFuY2UuaGlkZSgpXG4gICAgICBnZXRUb2dnbGVCdXR0b24uZm9jdXMoKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgRHJvcGRvd24uZGF0YUFwaUtleWRvd25IYW5kbGVyKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9NRU5VLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBEcm9wZG93bi5jbGVhck1lbnVzKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uY2xlYXJNZW51cylcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnRvZ2dsZSgpXG59KVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihEcm9wZG93bilcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogdXRpbC9zY3JvbGxCYXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2luZGV4J1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQgPSAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCdcbmNvbnN0IFNFTEVDVE9SX1NUSUNLWV9DT05URU5UID0gJy5zdGlja3ktdG9wJ1xuY29uc3QgUFJPUEVSVFlfUEFERElORyA9ICdwYWRkaW5nLXJpZ2h0J1xuY29uc3QgUFJPUEVSVFlfTUFSR0lOID0gJ21hcmdpbi1yaWdodCdcblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgU2Nyb2xsQmFySGVscGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmJvZHlcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICBnZXRXaWR0aCgpIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgICBjb25zdCBkb2N1bWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG4gICAgcmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnRXaWR0aClcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLmdldFdpZHRoKClcbiAgICB0aGlzLl9kaXNhYmxlT3ZlckZsb3coKVxuICAgIC8vIGdpdmUgcGFkZGluZyB0byBlbGVtZW50IHRvIGJhbGFuY2UgdGhlIGhpZGRlbiBzY3JvbGxiYXIgd2lkdGhcbiAgICB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCBQUk9QRVJUWV9QQURESU5HLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpXG4gICAgLy8gdHJpY2s6IFdlIGFkanVzdCBwb3NpdGl2ZSBwYWRkaW5nUmlnaHQgYW5kIG5lZ2F0aXZlIG1hcmdpblJpZ2h0IHRvIHN0aWNreS10b3AgZWxlbWVudHMgdG8ga2VlcCBzaG93aW5nIGZ1bGx3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsIFBST1BFUlRZX1BBRERJTkcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aClcbiAgICB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgUFJPUEVSVFlfTUFSR0lOLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlIC0gd2lkdGgpXG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdvdmVyZmxvdycpXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCBQUk9QRVJUWV9QQURESU5HKVxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgUFJPUEVSVFlfUEFERElORylcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX1NUSUNLWV9DT05URU5ULCBQUk9QRVJUWV9NQVJHSU4pXG4gIH1cblxuICBpc092ZXJmbG93aW5nKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdpZHRoKCkgPiAwXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgfVxuXG4gIF9zZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoKVxuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wZXJ0eSlcbiAgICAgIGNvbnN0IGNhbGN1bGF0ZWRWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoc3R5bGVQcm9wZXJ0eSlcbiAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVQcm9wZXJ0eSwgYCR7Y2FsbGJhY2soTnVtYmVyLnBhcnNlRmxvYXQoY2FsY3VsYXRlZFZhbHVlKSl9cHhgKVxuICAgIH1cblxuICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKVxuICB9XG5cbiAgX3NhdmVJbml0aWFsQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHkpIHtcbiAgICBjb25zdCBhY3R1YWxWYWx1ZSA9IGVsZW1lbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZVByb3BlcnR5KVxuICAgIGlmIChhY3R1YWxWYWx1ZSkge1xuICAgICAgTWFuaXB1bGF0b3Iuc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3BlcnR5LCBhY3R1YWxWYWx1ZSlcbiAgICB9XG4gIH1cblxuICBfcmVzZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wZXJ0eSkge1xuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wZXJ0eSlcbiAgICAgIC8vIFdlIG9ubHkgd2FudCB0byByZW1vdmUgdGhlIHByb3BlcnR5IGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGA7IHRoZSB2YWx1ZSBjYW4gYWxzbyBiZSB6ZXJvXG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShzdHlsZVByb3BlcnR5KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3BlcnR5KVxuICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzdHlsZVByb3BlcnR5LCB2YWx1ZSlcbiAgICB9XG5cbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjaylcbiAgfVxuXG4gIF9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBjYWxsQmFjaykge1xuICAgIGlmIChpc0VsZW1lbnQoc2VsZWN0b3IpKSB7XG4gICAgICBjYWxsQmFjayhzZWxlY3RvcilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGZvciAoY29uc3Qgc2VsIG9mIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICBjYWxsQmFjayhzZWwpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbEJhckhlbHBlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiB1dGlsL2JhY2tkcm9wLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCB7IGV4ZWN1dGUsIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24sIGdldEVsZW1lbnQsIHJlZmxvdyB9IGZyb20gJy4vaW5kZXgnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnYmFja2Ryb3AnXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgRVZFTlRfTU9VU0VET1dOID0gYG1vdXNlZG93bi5icy4ke05BTUV9YFxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBjbGFzc05hbWU6ICdtb2RhbC1iYWNrZHJvcCcsXG4gIGNsaWNrQ2FsbGJhY2s6IG51bGwsXG4gIGlzQW5pbWF0ZWQ6IGZhbHNlLFxuICBpc1Zpc2libGU6IHRydWUsIC8vIGlmIGZhbHNlLCB3ZSB1c2UgdGhlIGJhY2tkcm9wIGhlbHBlciB3aXRob3V0IGFkZGluZyBhbnkgZWxlbWVudCB0byB0aGUgZG9tXG4gIHJvb3RFbGVtZW50OiAnYm9keScgLy8gZ2l2ZSB0aGUgY2hvaWNlIHRvIHBsYWNlIGJhY2tkcm9wIHVuZGVyIGRpZmZlcmVudCBlbGVtZW50c1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgY2xpY2tDYWxsYmFjazogJyhmdW5jdGlvbnxudWxsKScsXG4gIGlzQW5pbWF0ZWQ6ICdib29sZWFuJyxcbiAgaXNWaXNpYmxlOiAnYm9vbGVhbicsXG4gIHJvb3RFbGVtZW50OiAnKGVsZW1lbnR8c3RyaW5nKSdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgQmFja2Ryb3AgZXh0ZW5kcyBDb25maWcge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gZmFsc2VcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICB9XG5cbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICBzaG93KGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fYXBwZW5kKClcblxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9nZXRFbGVtZW50KClcbiAgICBpZiAodGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpIHtcbiAgICAgIHJlZmxvdyhlbGVtZW50KVxuICAgIH1cblxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgfSlcbiAgfVxuXG4gIGhpZGUoY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpXG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgIH0pXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICghdGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRURPV04pXG5cbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpXG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9nZXRFbGVtZW50KCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgYmFja2Ryb3AuY2xhc3NOYW1lID0gdGhpcy5fY29uZmlnLmNsYXNzTmFtZVxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICAgIGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gYmFja2Ryb3BcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFxuICB9XG5cbiAgX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgLy8gdXNlIGdldEVsZW1lbnQoKSB3aXRoIHRoZSBkZWZhdWx0IFwiYm9keVwiIHRvIGdldCBhIGZyZXNoIEVsZW1lbnQgb24gZWFjaCBpbnN0YW50aWF0aW9uXG4gICAgY29uZmlnLnJvb3RFbGVtZW50ID0gZ2V0RWxlbWVudChjb25maWcucm9vdEVsZW1lbnQpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2FwcGVuZCgpIHtcbiAgICBpZiAodGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2dldEVsZW1lbnQoKVxuICAgIHRoaXMuX2NvbmZpZy5yb290RWxlbWVudC5hcHBlbmQoZWxlbWVudClcblxuICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCBFVkVOVF9NT1VTRURPV04sICgpID0+IHtcbiAgICAgIGV4ZWN1dGUodGhpcy5fY29uZmlnLmNsaWNrQ2FsbGJhY2spXG4gICAgfSlcblxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSB0cnVlXG4gIH1cblxuICBfZW11bGF0ZUFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIHRoaXMuX2dldEVsZW1lbnQoKSwgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3BcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogdXRpbC9mb2N1c3RyYXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4uL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnZm9jdXN0cmFwJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuZm9jdXN0cmFwJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSBgZm9jdXNpbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV05fVEFCID0gYGtleWRvd24udGFiJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBUQUJfS0VZID0gJ1RhYidcbmNvbnN0IFRBQl9OQVZfRk9SV0FSRCA9ICdmb3J3YXJkJ1xuY29uc3QgVEFCX05BVl9CQUNLV0FSRCA9ICdiYWNrd2FyZCdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYXV0b2ZvY3VzOiB0cnVlLFxuICB0cmFwRWxlbWVudDogbnVsbCAvLyBUaGUgZWxlbWVudCB0byB0cmFwIGZvY3VzIGluc2lkZSBvZlxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYXV0b2ZvY3VzOiAnYm9vbGVhbicsXG4gIHRyYXBFbGVtZW50OiAnZWxlbWVudCdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgRm9jdXNUcmFwIGV4dGVuZHMgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZVxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBudWxsXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hdXRvZm9jdXMpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy50cmFwRWxlbWVudC5mb2N1cygpXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfS0VZKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUZvY3VzaW4oZXZlbnQpKVxuICAgIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9UQUIsIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUtleWRvd24oZXZlbnQpKVxuXG4gICAgdGhpcy5faXNBY3RpdmUgPSB0cnVlXG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2VcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9oYW5kbGVGb2N1c2luKGV2ZW50KSB7XG4gICAgY29uc3QgeyB0cmFwRWxlbWVudCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudCB8fCBldmVudC50YXJnZXQgPT09IHRyYXBFbGVtZW50IHx8IHRyYXBFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZm9jdXNhYmxlQ2hpbGRyZW4odHJhcEVsZW1lbnQpXG5cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cmFwRWxlbWVudC5mb2N1cygpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID09PSBUQUJfTkFWX0JBQ0tXQVJEKSB7XG4gICAgICBlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXS5mb2N1cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRzWzBdLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgIT09IFRBQl9LRVkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBldmVudC5zaGlmdEtleSA/IFRBQl9OQVZfQkFDS1dBUkQgOiBUQUJfTkFWX0ZPUldBUkRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb2N1c1RyYXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgeyBkZWZpbmVKUXVlcnlQbHVnaW4sIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IsIGlzUlRMLCBpc1Zpc2libGUsIHJlZmxvdyB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgU2Nyb2xsQmFySGVscGVyIGZyb20gJy4vdXRpbC9zY3JvbGxiYXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4vdXRpbC9iYWNrZHJvcCdcbmltcG9ydCBGb2N1c1RyYXAgZnJvbSAnLi91dGlsL2ZvY3VzdHJhcCdcbmltcG9ydCB7IGVuYWJsZURpc21pc3NUcmlnZ2VyIH0gZnJvbSAnLi91dGlsL2NvbXBvbmVudC1mdW5jdGlvbnMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdtb2RhbCdcbmNvbnN0IERBVEFfS0VZID0gJ2JzLm1vZGFsJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5jb25zdCBFU0NBUEVfS0VZID0gJ0VzY2FwZSdcblxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1JFU0laRSA9IGByZXNpemUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19ESVNNSVNTID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyA9IGBtb3VzZWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9PUEVOID0gJ21vZGFsLW9wZW4nXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9TVEFUSUMgPSAnbW9kYWwtc3RhdGljJ1xuXG5jb25zdCBPUEVOX1NFTEVDVE9SID0gJy5tb2RhbC5zaG93J1xuY29uc3QgU0VMRUNUT1JfRElBTE9HID0gJy5tb2RhbC1kaWFsb2cnXG5jb25zdCBTRUxFQ1RPUl9NT0RBTF9CT0RZID0gJy5tb2RhbC1ib2R5J1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIl0nXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBmb2N1czogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIGZvY3VzOiAnYm9vbGVhbicsXG4gIGtleWJvYXJkOiAnYm9vbGVhbidcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCwgY29uZmlnKVxuXG4gICAgdGhpcy5fZGlhbG9nID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9ESUFMT0csIHRoaXMuX2VsZW1lbnQpXG4gICAgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKVxuICAgIHRoaXMuX2ZvY3VzdHJhcCA9IHRoaXMuX2luaXRpYWxpemVGb2N1c1RyYXAoKVxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgdGhpcy5fc2Nyb2xsQmFyID0gbmV3IFNjcm9sbEJhckhlbHBlcigpXG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0XG4gICAgfSlcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWVcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG5cbiAgICB0aGlzLl9zY3JvbGxCYXIuaGlkZSgpXG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9PUEVOKVxuXG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcblxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBmb3IgKGNvbnN0IGh0bWxFbGVtZW50IG9mIFt3aW5kb3csIHRoaXMuX2RpYWxvZ10pIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYoaHRtbEVsZW1lbnQsIEVWRU5UX0tFWSlcbiAgICB9XG5cbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKClcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tkcm9wKHtcbiAgICAgIGlzVmlzaWJsZTogQm9vbGVhbih0aGlzLl9jb25maWcuYmFja2Ryb3ApLCAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWUsXG4gICAgICBpc0FuaW1hdGVkOiB0aGlzLl9pc0FuaW1hdGVkKClcbiAgICB9KVxuICB9XG5cbiAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgdHJhcEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KVxuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAvLyB0cnkgdG8gYXBwZW5kIGR5bmFtaWMgbW9kYWxcbiAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpXG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwXG5cbiAgICBjb25zdCBtb2RhbEJvZHkgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX01PREFMX0JPRFksIHRoaXMuX2RpYWxvZylcbiAgICBpZiAobW9kYWxCb2R5KSB7XG4gICAgICBtb2RhbEJvZHkuc2Nyb2xsVG9wID0gMFxuICAgIH1cblxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayh0cmFuc2l0aW9uQ29tcGxldGUsIHRoaXMuX2RpYWxvZywgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC5rZXkgIT09IEVTQ0FQRV9LRVkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpXG4gICAgfSlcblxuICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX1JFU0laRSwgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgIXRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICB0aGlzLl9hZGp1c3REaWFsb2coKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgZXZlbnQyID0+IHtcbiAgICAgICAgLy8gYSBiYWQgdHJpY2sgdG8gc2VncmVnYXRlIGNsaWNrcyB0aGF0IG1heSBzdGFydCBpbnNpZGUgZGlhbG9nIGJ1dCBlbmQgb3V0c2lkZSwgYW5kIGF2b2lkIGxpc3RlbiB0byBzY3JvbGxiYXIgY2xpY2tzXG4gICAgICAgIGlmICh0aGlzLl9kaWFsb2cuY29udGFpbnMoZXZlbnQudGFyZ2V0KSB8fCB0aGlzLl9kaWFsb2cuY29udGFpbnMoZXZlbnQyLnRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgX2hpZGVNb2RhbCgpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJylcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcblxuICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfT1BFTilcbiAgICAgIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KClcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9KVxuICB9XG5cbiAgX2lzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSlcbiAgfVxuXG4gIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKVxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgY29uc3QgaW5pdGlhbE92ZXJmbG93WSA9IHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZXG4gICAgLy8gcmV0dXJuIGlmIHRoZSBmb2xsb3dpbmcgYmFja2dyb3VuZCB0cmFuc2l0aW9uIGhhc24ndCB5ZXQgY29tcGxldGVkXG4gICAgaWYgKGluaXRpYWxPdmVyZmxvd1kgPT09ICdoaWRkZW4nIHx8IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU1RBVElDKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbidcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TVEFUSUMpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSBpbml0aWFsT3ZlcmZsb3dZXG4gICAgICB9LCB0aGlzLl9kaWFsb2cpXG4gICAgfSwgdGhpcy5fZGlhbG9nKVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICovXG5cbiAgX2FkanVzdERpYWxvZygpIHtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpXG4gICAgY29uc3QgaXNCb2R5T3ZlcmZsb3dpbmcgPSBzY3JvbGxiYXJXaWR0aCA+IDBcblxuICAgIGlmIChpc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IGlzUlRMKCkgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCdcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgfVxuXG4gICAgaWYgKCFpc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5ID0gaXNSVEwoKSA/ICdwYWRkaW5nUmlnaHQnIDogJ3BhZGRpbmdMZWZ0J1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gPSBgJHtzY3JvbGxiYXJXaWR0aH1weGBcbiAgICB9XG4gIH1cblxuICBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJydcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcylcblxuICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX1NIT1csIHNob3dFdmVudCA9PiB7XG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOLCAoKSA9PiB7XG4gICAgICBpZiAoaXNWaXNpYmxlKHRoaXMpKSB7XG4gICAgICAgIHRoaXMuZm9jdXMoKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBtb2RhbCB0b2dnbGVyIHdoaWxlIGFub3RoZXIgb25lIGlzIG9wZW5cbiAgY29uc3QgYWxyZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKE9QRU5fU0VMRUNUT1IpXG4gIGlmIChhbHJlYWR5T3Blbikge1xuICAgIE1vZGFsLmdldEluc3RhbmNlKGFscmVhZHlPcGVuKS5oaWRlKClcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldClcblxuICBkYXRhLnRvZ2dsZSh0aGlzKVxufSlcblxuZW5hYmxlRGlzbWlzc1RyaWdnZXIoTW9kYWwpXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKE1vZGFsKVxuXG5leHBvcnQgZGVmYXVsdCBNb2RhbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiBvZmZjYW52YXMuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IsXG4gIGlzRGlzYWJsZWQsXG4gIGlzVmlzaWJsZVxufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgU2Nyb2xsQmFySGVscGVyIGZyb20gJy4vdXRpbC9zY3JvbGxiYXInXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AnXG5pbXBvcnQgRm9jdXNUcmFwIGZyb20gJy4vdXRpbC9mb2N1c3RyYXAnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnb2ZmY2FudmFzJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMub2ZmY2FudmFzJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFU0NBUEVfS0VZID0gJ0VzY2FwZSdcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX1NIT1dJTkcgPSAnc2hvd2luZydcbmNvbnN0IENMQVNTX05BTUVfSElESU5HID0gJ2hpZGluZydcbmNvbnN0IENMQVNTX05BTUVfQkFDS0RST1AgPSAnb2ZmY2FudmFzLWJhY2tkcm9wJ1xuY29uc3QgT1BFTl9TRUxFQ1RPUiA9ICcub2ZmY2FudmFzLnNob3cnXG5cbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2Nyb2xsOiBmYWxzZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2Nyb2xsOiAnYm9vbGVhbidcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgT2ZmY2FudmFzIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKClcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKClcbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1csIHsgcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZVxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coKVxuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORylcblxuICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5zY3JvbGwgfHwgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzdHJhcC5hY3RpdmF0ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHsgcmVsYXRlZFRhcmdldCB9KVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgdGhpcy5fZWxlbWVudC5ibHVyKClcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURJTkcpXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpXG5cbiAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVywgQ0xBU1NfTkFNRV9ISURJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpXG5cbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkucmVzZXQoKVxuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxiYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKClcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgY29uc3QgY2xpY2tDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5oaWRlKClcbiAgICB9XG5cbiAgICAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcbiAgICBjb25zdCBpc1Zpc2libGUgPSBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcClcblxuICAgIHJldHVybiBuZXcgQmFja2Ryb3Aoe1xuICAgICAgY2xhc3NOYW1lOiBDTEFTU19OQU1FX0JBQ0tEUk9QLFxuICAgICAgaXNWaXNpYmxlLFxuICAgICAgaXNBbmltYXRlZDogdHJ1ZSxcbiAgICAgIHJvb3RFbGVtZW50OiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICBjbGlja0NhbGxiYWNrOiBpc1Zpc2libGUgPyBjbGlja0NhbGxiYWNrIDogbnVsbFxuICAgIH0pXG4gIH1cblxuICBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh7XG4gICAgICB0cmFwRWxlbWVudDogdGhpcy5fZWxlbWVudFxuICAgIH0pXG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50LmtleSAhPT0gRVNDQVBFX0tFWSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERV9QUkVWRU5URUQpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH0pXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpXG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOLCAoKSA9PiB7XG4gICAgLy8gZm9jdXMgb24gdHJpZ2dlciB3aGVuIGl0IGlzIGNsb3NlZFxuICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcbiAgICAgIHRoaXMuZm9jdXMoKVxuICAgIH1cbiAgfSlcblxuICAvLyBhdm9pZCBjb25mbGljdCB3aGVuIGNsaWNraW5nIGEgdG9nZ2xlciBvZiBhbiBvZmZjYW52YXMsIHdoaWxlIGFub3RoZXIgaXMgb3BlblxuICBjb25zdCBhbHJlYWR5T3BlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoT1BFTl9TRUxFQ1RPUilcbiAgaWYgKGFscmVhZHlPcGVuICYmIGFscmVhZHlPcGVuICE9PSB0YXJnZXQpIHtcbiAgICBPZmZjYW52YXMuZ2V0SW5zdGFuY2UoYWxyZWFkeU9wZW4pLmhpZGUoKVxuICB9XG5cbiAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldClcbiAgZGF0YS50b2dnbGUodGhpcylcbn0pXG5cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcbiAgZm9yIChjb25zdCBzZWxlY3RvciBvZiBTZWxlY3RvckVuZ2luZS5maW5kKE9QRU5fU0VMRUNUT1IpKSB7XG4gICAgT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2Uoc2VsZWN0b3IpLnNob3coKVxuICB9XG59KVxuXG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9SRVNJWkUsICgpID0+IHtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIFNlbGVjdG9yRW5naW5lLmZpbmQoJ1thcmlhLW1vZGFsXVtjbGFzcyo9c2hvd11bY2xhc3MqPW9mZmNhbnZhcy1dJykpIHtcbiAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCkuaGlkZSgpXG4gICAgfVxuICB9XG59KVxuXG5lbmFibGVEaXNtaXNzVHJpZ2dlcihPZmZjYW52YXMpXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKE9mZmNhbnZhcylcblxuZXhwb3J0IGRlZmF1bHQgT2ZmY2FudmFzXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IHV0aWwvc2FuaXRpemVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgdXJpQXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAnYmFja2dyb3VuZCcsXG4gICdjaXRlJyxcbiAgJ2hyZWYnLFxuICAnaXRlbXR5cGUnLFxuICAnbG9uZ2Rlc2MnLFxuICAncG9zdGVyJyxcbiAgJ3NyYycsXG4gICd4bGluazpocmVmJ1xuXSlcblxuY29uc3QgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pXG5cbi8qKlxuICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBhIGNvbW1vbmx5IHVzZWZ1bCBzdWJzZXQgb2YgVVJMcyB0aGF0IGFyZSBzYWZlLlxuICpcbiAqIFNob3V0LW91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuY29uc3QgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGV8c21zKTp8W14jJi86P10qKD86WyMvP118JCkpL2lcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAqXG4gKiBTaG91dC1vdXQgdG8gQW5ndWxhciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvMTIuMi54L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pXG5cbmNvbnN0IGFsbG93ZWRBdHRyaWJ1dGUgPSAoYXR0cmlidXRlLCBhbGxvd2VkQXR0cmlidXRlTGlzdCkgPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICBpZiAoYWxsb3dlZEF0dHJpYnV0ZUxpc3QuaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICBpZiAodXJpQXR0cmlidXRlcy5oYXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKFNBRkVfVVJMX1BBVFRFUk4udGVzdChhdHRyaWJ1dGUubm9kZVZhbHVlKSB8fCBEQVRBX1VSTF9QQVRURVJOLnRlc3QoYXR0cmlidXRlLm5vZGVWYWx1ZSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGEgcmVndWxhciBleHByZXNzaW9uIHZhbGlkYXRlcyB0aGUgYXR0cmlidXRlLlxuICByZXR1cm4gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGF0dHJpYnV0ZVJlZ2V4ID0+IGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKVxuICAgIC5zb21lKHJlZ2V4ID0+IHJlZ2V4LnRlc3QoYXR0cmlidXRlTmFtZSkpXG59XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0QWxsb3dsaXN0ID0ge1xuICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICBhOiBbJ3RhcmdldCcsICdocmVmJywgJ3RpdGxlJywgJ3JlbCddLFxuICBhcmVhOiBbXSxcbiAgYjogW10sXG4gIGJyOiBbXSxcbiAgY29sOiBbXSxcbiAgY29kZTogW10sXG4gIGRpdjogW10sXG4gIGVtOiBbXSxcbiAgaHI6IFtdLFxuICBoMTogW10sXG4gIGgyOiBbXSxcbiAgaDM6IFtdLFxuICBoNDogW10sXG4gIGg1OiBbXSxcbiAgaDY6IFtdLFxuICBpOiBbXSxcbiAgaW1nOiBbJ3NyYycsICdzcmNzZXQnLCAnYWx0JywgJ3RpdGxlJywgJ3dpZHRoJywgJ2hlaWdodCddLFxuICBsaTogW10sXG4gIG9sOiBbXSxcbiAgcDogW10sXG4gIHByZTogW10sXG4gIHM6IFtdLFxuICBzbWFsbDogW10sXG4gIHNwYW46IFtdLFxuICBzdWI6IFtdLFxuICBzdXA6IFtdLFxuICBzdHJvbmc6IFtdLFxuICB1OiBbXSxcbiAgdWw6IFtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgYWxsb3dMaXN0LCBzYW5pdGl6ZUZ1bmN0aW9uKSB7XG4gIGlmICghdW5zYWZlSHRtbC5sZW5ndGgpIHtcbiAgICByZXR1cm4gdW5zYWZlSHRtbFxuICB9XG5cbiAgaWYgKHNhbml0aXplRnVuY3Rpb24gJiYgdHlwZW9mIHNhbml0aXplRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc2FuaXRpemVGdW5jdGlvbih1bnNhZmVIdG1sKVxuICB9XG5cbiAgY29uc3QgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKVxuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKVxuICBjb25zdCBlbGVtZW50cyA9IFtdLmNvbmNhdCguLi5jcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpXG5cbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgY29uc3QgZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIGlmICghT2JqZWN0LmtleXMoYWxsb3dMaXN0KS5pbmNsdWRlcyhlbGVtZW50TmFtZSkpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKClcblxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVMaXN0ID0gW10uY29uY2F0KC4uLmVsZW1lbnQuYXR0cmlidXRlcylcbiAgICBjb25zdCBhbGxvd2VkQXR0cmlidXRlcyA9IFtdLmNvbmNhdChhbGxvd0xpc3RbJyonXSB8fCBbXSwgYWxsb3dMaXN0W2VsZW1lbnROYW1lXSB8fCBbXSlcblxuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZUxpc3QpIHtcbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGFsbG93ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTFxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiB1dGlsL3RlbXBsYXRlLWZhY3RvcnkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgeyBEZWZhdWx0QWxsb3dsaXN0LCBzYW5pdGl6ZUh0bWwgfSBmcm9tICcuL3Nhbml0aXplcidcbmltcG9ydCB7IGdldEVsZW1lbnQsIGlzRWxlbWVudCB9IGZyb20gJy4uL3V0aWwvaW5kZXgnXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBDb25maWcgZnJvbSAnLi9jb25maWcnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdUZW1wbGF0ZUZhY3RvcnknXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgY29udGVudDoge30sIC8vIHsgc2VsZWN0b3IgOiB0ZXh0ICwgIHNlbGVjdG9yMiA6IHRleHQyICwgfVxuICBleHRyYUNsYXNzOiAnJyxcbiAgaHRtbDogZmFsc2UsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICB0ZW1wbGF0ZTogJzxkaXY+PC9kaXY+J1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYWxsb3dMaXN0OiAnb2JqZWN0JyxcbiAgY29udGVudDogJ29iamVjdCcsXG4gIGV4dHJhQ2xhc3M6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIGh0bWw6ICdib29sZWFuJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJ1xufVxuXG5jb25zdCBEZWZhdWx0Q29udGVudFR5cGUgPSB7XG4gIGVudHJ5OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9ufG51bGwpJyxcbiAgc2VsZWN0b3I6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBUZW1wbGF0ZUZhY3RvcnkgZXh0ZW5kcyBDb25maWcge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZ2V0Q29udGVudCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9jb25maWcuY29udGVudClcbiAgICAgIC5tYXAoY29uZmlnID0+IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbmZpZykpXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBoYXNDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldENvbnRlbnQoKS5sZW5ndGggPiAwXG4gIH1cblxuICBjaGFuZ2VDb250ZW50KGNvbnRlbnQpIHtcbiAgICB0aGlzLl9jaGVja0NvbnRlbnQoY29udGVudClcbiAgICB0aGlzLl9jb25maWcuY29udGVudCA9IHsgLi4udGhpcy5fY29uZmlnLmNvbnRlbnQsIC4uLmNvbnRlbnQgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0h0bWwoKSB7XG4gICAgY29uc3QgdGVtcGxhdGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0ZW1wbGF0ZVdyYXBwZXIuaW5uZXJIVE1MID0gdGhpcy5fbWF5YmVTYW5pdGl6ZSh0aGlzLl9jb25maWcudGVtcGxhdGUpXG5cbiAgICBmb3IgKGNvbnN0IFtzZWxlY3RvciwgdGV4dF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnLmNvbnRlbnQpKSB7XG4gICAgICB0aGlzLl9zZXRDb250ZW50KHRlbXBsYXRlV3JhcHBlciwgdGV4dCwgc2VsZWN0b3IpXG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZVdyYXBwZXIuY2hpbGRyZW5bMF1cbiAgICBjb25zdCBleHRyYUNsYXNzID0gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmV4dHJhQ2xhc3MpXG5cbiAgICBpZiAoZXh0cmFDbGFzcykge1xuICAgICAgdGVtcGxhdGUuY2xhc3NMaXN0LmFkZCguLi5leHRyYUNsYXNzLnNwbGl0KCcgJykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRlbXBsYXRlXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF90eXBlQ2hlY2tDb25maWcoY29uZmlnKSB7XG4gICAgc3VwZXIuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fY2hlY2tDb250ZW50KGNvbmZpZy5jb250ZW50KVxuICB9XG5cbiAgX2NoZWNrQ29udGVudChhcmcpIHtcbiAgICBmb3IgKGNvbnN0IFtzZWxlY3RvciwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoYXJnKSkge1xuICAgICAgc3VwZXIuX3R5cGVDaGVja0NvbmZpZyh7IHNlbGVjdG9yLCBlbnRyeTogY29udGVudCB9LCBEZWZhdWx0Q29udGVudFR5cGUpXG4gICAgfVxuICB9XG5cbiAgX3NldENvbnRlbnQodGVtcGxhdGUsIGNvbnRlbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgdGVtcGxhdGVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShzZWxlY3RvciwgdGVtcGxhdGUpXG5cbiAgICBpZiAoIXRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29udGVudCA9IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbnRlbnQpXG5cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHRlbXBsYXRlRWxlbWVudC5yZW1vdmUoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRWxlbWVudChjb250ZW50KSkge1xuICAgICAgdGhpcy5fcHV0RWxlbWVudEluVGVtcGxhdGUoZ2V0RWxlbWVudChjb250ZW50KSwgdGVtcGxhdGVFbGVtZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fbWF5YmVTYW5pdGl6ZShjb250ZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGVtcGxhdGVFbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudFxuICB9XG5cbiAgX21heWJlU2FuaXRpemUoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSA/IHNhbml0aXplSHRtbChhcmcsIHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKSA6IGFyZ1xuICB9XG5cbiAgX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nID8gYXJnKHRoaXMpIDogYXJnXG4gIH1cblxuICBfcHV0RWxlbWVudEluVGVtcGxhdGUoZWxlbWVudCwgdGVtcGxhdGVFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gJydcbiAgICAgIHRlbXBsYXRlRWxlbWVudC5hcHBlbmQoZWxlbWVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRlbXBsYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IGVsZW1lbnQudGV4dENvbnRlbnRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZW1wbGF0ZUZhY3RvcnlcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAqIGFzIFBvcHBlciBmcm9tICdAcG9wcGVyanMvY29yZSdcbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiwgZmluZFNoYWRvd1Jvb3QsIGdldEVsZW1lbnQsIGdldFVJRCwgaXNSVEwsIG5vb3AgfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgeyBEZWZhdWx0QWxsb3dsaXN0IH0gZnJvbSAnLi91dGlsL3Nhbml0aXplcidcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5pbXBvcnQgVGVtcGxhdGVGYWN0b3J5IGZyb20gJy4vdXRpbC90ZW1wbGF0ZS1mYWN0b3J5J1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAndG9vbHRpcCdcbmNvbnN0IERJU0FMTE9XRURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydzYW5pdGl6ZScsICdhbGxvd0xpc3QnLCAnc2FuaXRpemVGbiddKVxuXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfTU9EQUwgPSAnbW9kYWwnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcblxuY29uc3QgU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiA9ICcudG9vbHRpcC1pbm5lcidcbmNvbnN0IFNFTEVDVE9SX01PREFMID0gYC4ke0NMQVNTX05BTUVfTU9EQUx9YFxuXG5jb25zdCBFVkVOVF9NT0RBTF9ISURFID0gJ2hpZGUuYnMubW9kYWwnXG5cbmNvbnN0IFRSSUdHRVJfSE9WRVIgPSAnaG92ZXInXG5jb25zdCBUUklHR0VSX0ZPQ1VTID0gJ2ZvY3VzJ1xuY29uc3QgVFJJR0dFUl9DTElDSyA9ICdjbGljaydcbmNvbnN0IFRSSUdHRVJfTUFOVUFMID0gJ21hbnVhbCdcblxuY29uc3QgRVZFTlRfSElERSA9ICdoaWRlJ1xuY29uc3QgRVZFTlRfSElEREVOID0gJ2hpZGRlbidcbmNvbnN0IEVWRU5UX1NIT1cgPSAnc2hvdydcbmNvbnN0IEVWRU5UX1NIT1dOID0gJ3Nob3duJ1xuY29uc3QgRVZFTlRfSU5TRVJURUQgPSAnaW5zZXJ0ZWQnXG5jb25zdCBFVkVOVF9DTElDSyA9ICdjbGljaydcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSAnZm9jdXNpbidcbmNvbnN0IEVWRU5UX0ZPQ1VTT1VUID0gJ2ZvY3Vzb3V0J1xuY29uc3QgRVZFTlRfTU9VU0VFTlRFUiA9ICdtb3VzZWVudGVyJ1xuY29uc3QgRVZFTlRfTU9VU0VMRUFWRSA9ICdtb3VzZWxlYXZlJ1xuXG5jb25zdCBBdHRhY2htZW50TWFwID0ge1xuICBBVVRPOiAnYXV0bycsXG4gIFRPUDogJ3RvcCcsXG4gIFJJR0hUOiBpc1JUTCgpID8gJ2xlZnQnIDogJ3JpZ2h0JyxcbiAgQk9UVE9NOiAnYm90dG9tJyxcbiAgTEVGVDogaXNSVEwoKSA/ICdyaWdodCcgOiAnbGVmdCdcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYWxsb3dMaXN0OiBEZWZhdWx0QWxsb3dsaXN0LFxuICBhbmltYXRpb246IHRydWUsXG4gIGJvdW5kYXJ5OiAnY2xpcHBpbmdQYXJlbnRzJyxcbiAgY29udGFpbmVyOiBmYWxzZSxcbiAgY3VzdG9tQ2xhc3M6ICcnLFxuICBkZWxheTogMCxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxuICBodG1sOiBmYWxzZSxcbiAgb2Zmc2V0OiBbMCwgMF0sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlckNvbmZpZzogbnVsbCxcbiAgc2FuaXRpemU6IHRydWUsXG4gIHNhbml0aXplRm46IG51bGwsXG4gIHNlbGVjdG9yOiBmYWxzZSxcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2PicsXG4gIHRpdGxlOiAnJyxcbiAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJ1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYWxsb3dMaXN0OiAnb2JqZWN0JyxcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gIGN1c3RvbUNsYXNzOiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogJ2FycmF5JyxcbiAgaHRtbDogJ2Jvb2xlYW4nLFxuICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIHBsYWNlbWVudDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gIHNhbml0aXplOiAnYm9vbGVhbicsXG4gIHNhbml0aXplRm46ICcobnVsbHxmdW5jdGlvbiknLFxuICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gIHRpdGxlOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKScsXG4gIHRyaWdnZXI6ICdzdHJpbmcnXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJylcbiAgICB9XG5cbiAgICBzdXBlcihlbGVtZW50LCBjb25maWcpXG5cbiAgICAvLyBQcml2YXRlXG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZVxuICAgIHRoaXMuX3RpbWVvdXQgPSAwXG4gICAgdGhpcy5faXNIb3ZlcmVkID0gbnVsbFxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fVxuICAgIHRoaXMuX3BvcHBlciA9IG51bGxcbiAgICB0aGlzLl90ZW1wbGF0ZUZhY3RvcnkgPSBudWxsXG4gICAgdGhpcy5fbmV3Q29udGVudCA9IG51bGxcblxuICAgIC8vIFByb3RlY3RlZFxuICAgIHRoaXMudGlwID0gbnVsbFxuXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZFxuICB9XG5cbiAgdG9nZ2xlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudClcblxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrXG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgY29udGV4dC5fZW50ZXIoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5fbGVhdmUoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTaG93bigpKSB7XG4gICAgICB0aGlzLl9sZWF2ZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9lbnRlcigpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLCBFVkVOVF9NT0RBTF9ISURFLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICB0aGlzLnRpcC5yZW1vdmUoKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcub3JpZ2luYWxUaXRsZSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGhpcy5fY29uZmlnLm9yaWdpbmFsVGl0bGUpXG4gICAgfVxuXG4gICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgaWYgKCEodGhpcy5faXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX1NIT1cpKVxuICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBmaW5kU2hhZG93Um9vdCh0aGlzLl9lbGVtZW50KVxuICAgIGNvbnN0IGlzSW5UaGVEb20gPSAoc2hhZG93Um9vdCB8fCB0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5jb250YWlucyh0aGlzLl9lbGVtZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB0b2RvIHY2IHJlbW92ZSB0aGlzIE9SIG1ha2UgaXQgb3B0aW9uYWxcbiAgICBpZiAodGhpcy50aXApIHtcbiAgICAgIHRoaXMudGlwLnJlbW92ZSgpXG4gICAgICB0aGlzLnRpcCA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLl9nZXRUaXBFbGVtZW50KClcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwLmdldEF0dHJpYnV0ZSgnaWQnKSlcblxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmQodGlwKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfSU5TRVJURUQpKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wb3BwZXIgPSB0aGlzLl9jcmVhdGVQb3BwZXIodGlwKVxuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKSkge1xuICAgICAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9TSE9XTikpXG5cbiAgICAgIGlmICh0aGlzLl9pc0hvdmVyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNIb3ZlcmVkID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfSElERSkpXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLl9nZXRUaXBFbGVtZW50KClcbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKSkge1xuICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9DTElDS10gPSBmYWxzZVxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9GT0NVU10gPSBmYWxzZVxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9IT1ZFUl0gPSBmYWxzZVxuICAgIHRoaXMuX2lzSG92ZXJlZCA9IG51bGwgLy8gaXQgaXMgYSB0cmljayB0byBzdXBwb3J0IG1hbnVhbCB0cmlnZ2VyaW5nXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faXNIb3ZlcmVkKSB7XG4gICAgICAgIHRpcC5yZW1vdmUoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9ISURERU4pKVxuXG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKClcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByb3RlY3RlZFxuICBfaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9nZXRUaXRsZSgpKVxuICB9XG5cbiAgX2dldFRpcEVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLnRpcCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLl9jcmVhdGVUaXBFbGVtZW50KHRoaXMuX25ld0NvbnRlbnQgfHwgdGhpcy5fZ2V0Q29udGVudEZvclRlbXBsYXRlKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGlwXG4gIH1cblxuICBfY3JlYXRlVGlwRWxlbWVudChjb250ZW50KSB7XG4gICAgY29uc3QgdGlwID0gdGhpcy5fZ2V0VGVtcGxhdGVGYWN0b3J5KGNvbnRlbnQpLnRvSHRtbCgpXG5cbiAgICAvLyB0b2RvOiByZW1vdmUgdGhpcyBjaGVjayBvbiB2NlxuICAgIGlmICghdGlwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfRkFERSwgQ0xBU1NfTkFNRV9TSE9XKVxuICAgIC8vIHRvZG86IG9uIHY2IHRoZSBmb2xsb3dpbmcgY2FuIGJlIGFjaGlldmVkIHdpdGggQ1NTIG9ubHlcbiAgICB0aXAuY2xhc3NMaXN0LmFkZChgYnMtJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWF1dG9gKVxuXG4gICAgY29uc3QgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKS50b1N0cmluZygpXG5cbiAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKVxuXG4gICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQoKSkge1xuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKVxuICAgIH1cblxuICAgIHJldHVybiB0aXBcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCkge1xuICAgIHRoaXMuX25ld0NvbnRlbnQgPSBjb250ZW50XG4gICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpXG4gICAgICB0aGlzLnNob3coKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZUZhY3RvcnkoY29udGVudCkge1xuICAgIGlmICh0aGlzLl90ZW1wbGF0ZUZhY3RvcnkpIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeS5jaGFuZ2VDb250ZW50KGNvbnRlbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeSA9IG5ldyBUZW1wbGF0ZUZhY3Rvcnkoe1xuICAgICAgICAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIC8vIHRoZSBgY29udGVudGAgdmFyIGhhcyB0byBiZSBhZnRlciBgdGhpcy5fY29uZmlnYFxuICAgICAgICAvLyB0byBvdmVycmlkZSBjb25maWcuY29udGVudCBpbiBjYXNlIG9mIHBvcG92ZXJcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgZXh0cmFDbGFzczogdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVGYWN0b3J5XG4gIH1cblxuICBfZ2V0Q29udGVudEZvclRlbXBsYXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbU0VMRUNUT1JfVE9PTFRJUF9JTk5FUl06IHRoaXMuX2dldFRpdGxlKClcbiAgICB9XG4gIH1cblxuICBfZ2V0VGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy50aXRsZSkgfHwgdGhpcy5fY29uZmlnLm9yaWdpbmFsVGl0bGVcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmdldE9yQ3JlYXRlSW5zdGFuY2UoZXZlbnQuZGVsZWdhdGVUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpXG4gIH1cblxuICBfaXNBbmltYXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmFuaW1hdGlvbiB8fCAodGhpcy50aXAgJiYgdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpXG4gIH1cblxuICBfaXNTaG93bigpIHtcbiAgICByZXR1cm4gdGhpcy50aXAgJiYgdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVylcbiAgfVxuXG4gIF9jcmVhdGVQb3BwZXIodGlwKSB7XG4gICAgY29uc3QgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgP1xuICAgICAgdGhpcy5fY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5fZWxlbWVudCkgOlxuICAgICAgdGhpcy5fY29uZmlnLnBsYWNlbWVudFxuICAgIGNvbnN0IGF0dGFjaG1lbnQgPSBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXVxuICAgIHJldHVybiBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKVxuICB9XG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsdWUgPT4gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCAxMCkpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIF9yZXNvbHZlUG9zc2libGVGdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJyA/IGFyZy5jYWxsKHRoaXMuX2VsZW1lbnQpIDogYXJnXG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHRoaXMuX2NvbmZpZy5mYWxsYmFja1BsYWNlbWVudHNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZWxlbWVudDogYC4ke3RoaXMuY29uc3RydWN0b3IuTkFNRX0tYXJyb3dgXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ3ByZVNldFBsYWNlbWVudCcsXG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBwaGFzZTogJ2JlZm9yZU1haW4nLFxuICAgICAgICAgIGZuOiBkYXRhID0+IHtcbiAgICAgICAgICAgIC8vIFByZS1zZXQgUG9wcGVyJ3MgcGxhY2VtZW50IGF0dHJpYnV0ZSBpbiBvcmRlciB0byByZWFkIHRoZSBhcnJvdyBzaXplcyBwcm9wZXJseS5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgUG9wcGVyIG1peGVzIHVwIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGRpbWVuc2lvbnMgc2luY2UgdGhlIGluaXRpYWwgYXJyb3cgc3R5bGUgaXMgZm9yIHRvcCBwbGFjZW1lbnRcbiAgICAgICAgICAgIHRoaXMuX2dldFRpcEVsZW1lbnQoKS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCcsIGRhdGEuc3RhdGUucGxhY2VtZW50KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5kZWZhdWx0QnNQb3BwZXJDb25maWcsXG4gICAgICAuLi4odHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGRlZmF1bHRCc1BvcHBlckNvbmZpZykgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKVxuICAgIH1cbiAgfVxuXG4gIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLl9jb25maWcudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlcnMpIHtcbiAgICAgIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9DTElDSyksIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4gdGhpcy50b2dnbGUoZXZlbnQpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUUklHR0VSX01BTlVBTCkge1xuICAgICAgICBjb25zdCBldmVudEluID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfTU9VU0VFTlRFUikgOlxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX0ZPQ1VTSU4pXG4gICAgICAgIGNvbnN0IGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfTU9VU0VMRUFWRSkgOlxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX0ZPQ1VTT1VUKVxuXG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudEluLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KVxuICAgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID0gdHJ1ZVxuICAgICAgICAgIGNvbnRleHQuX2VudGVyKClcbiAgICAgICAgfSlcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIGV2ZW50T3V0LCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KVxuICAgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9XG4gICAgICAgICAgICBjb250ZXh0Ll9lbGVtZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpXG5cbiAgICAgICAgICBjb250ZXh0Ll9sZWF2ZSgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faGlkZU1vZGFsSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9NT0RBTCksIEVWRU5UX01PREFMX0hJREUsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpXG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB7XG4gICAgICAgIC4uLnRoaXMuX2NvbmZpZyxcbiAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXhUaXRsZSgpXG4gICAgfVxuICB9XG5cbiAgX2ZpeFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fY29uZmlnLm9yaWdpbmFsVGl0bGVcblxuICAgIGlmICghdGl0bGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSAmJiAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudC50cmltKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGl0bGUpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgfVxuXG4gIF9lbnRlcigpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bigpIHx8IHRoaXMuX2lzSG92ZXJlZCkge1xuICAgICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZVxuXG4gICAgdGhpcy5fc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5faXNIb3ZlcmVkKSB7XG4gICAgICAgIHRoaXMuc2hvdygpXG4gICAgICB9XG4gICAgfSwgdGhpcy5fY29uZmlnLmRlbGF5LnNob3cpXG4gIH1cblxuICBfbGVhdmUoKSB7XG4gICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNIb3ZlcmVkID0gZmFsc2VcblxuICAgIHRoaXMuX3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9pc0hvdmVyZWQpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkuaGlkZSlcbiAgfVxuXG4gIF9zZXRUaW1lb3V0KGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dClcbiAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChoYW5kbGVyLCB0aW1lb3V0KVxuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fYWN0aXZlVHJpZ2dlcikuaW5jbHVkZXModHJ1ZSlcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KVxuXG4gICAgZm9yIChjb25zdCBkYXRhQXR0cmlidXRlIG9mIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5oYXMoZGF0YUF0dHJpYnV0ZSkpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyaWJ1dGVdXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuICAgIGNvbmZpZyA9IHRoaXMuX21lcmdlQ29uZmlnT2JqKGNvbmZpZylcbiAgICBjb25maWcgPSB0aGlzLl9jb25maWdBZnRlck1lcmdlKGNvbmZpZylcbiAgICB0aGlzLl90eXBlQ2hlY2tDb25maWcoY29uZmlnKVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgIGNvbmZpZy5jb250YWluZXIgPSBjb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiBnZXRFbGVtZW50KGNvbmZpZy5jb250YWluZXIpXG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWcub3JpZ2luYWxUaXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XG4gICAgY29uc3QgY29uZmlnID0ge31cblxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2NvbmZpZykge1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLl9jb25maWdba2V5XSkge1xuICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuX2NvbmZpZ1trZXldXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgcmVwbGFjZWQgd2l0aDpcbiAgICAvLyBjb25zdCBrZXlzV2l0aERpZmZlcmVudFZhbHVlcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX2NvbmZpZykuZmlsdGVyKGVudHJ5ID0+IHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlbnRyeVswXV0gIT09IHRoaXMuX2NvbmZpZ1tlbnRyeVswXV0pXG4gICAgLy8gYE9iamVjdC5mcm9tRW50cmllcyhrZXlzV2l0aERpZmZlcmVudFZhbHVlcylgXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2Rpc3Bvc2VQb3BwZXIoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvb2x0aXAuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvb2x0aXApXG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vdG9vbHRpcCdcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3BvcG92ZXInXG5cbmNvbnN0IFNFTEVDVE9SX1RJVExFID0gJy5wb3BvdmVyLWhlYWRlcidcbmNvbnN0IFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICBjb250ZW50OiAnJyxcbiAgb2Zmc2V0OiBbMCwgOF0sXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWFycm93XCI+PC9kaXY+JyArXG4gICAgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PicgK1xuICAgICc8L2Rpdj4nLFxuICB0cmlnZ2VyOiAnY2xpY2snXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICAuLi5Ub29sdGlwLkRlZmF1bHRUeXBlLFxuICBjb250ZW50OiAnKG51bGx8c3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBQb3BvdmVyIGV4dGVuZHMgVG9vbHRpcCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBPdmVycmlkZXNcbiAgX2lzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9nZXRDb250ZW50Rm9yVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtTRUxFQ1RPUl9USVRMRV06IHRoaXMuX2dldFRpdGxlKCksXG4gICAgICBbU0VMRUNUT1JfQ09OVEVOVF06IHRoaXMuX2dldENvbnRlbnQoKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY29udGVudClcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFBvcG92ZXIuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFBvcG92ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IFBvcG92ZXJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMi4xKTogc2Nyb2xsc3B5LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgZGVmaW5lSlF1ZXJ5UGx1Z2luLCBnZXRFbGVtZW50LCBpc0Rpc2FibGVkLCBpc1Zpc2libGUgfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3Njcm9sbHNweSdcbmNvbnN0IERBVEFfS0VZID0gJ2JzLnNjcm9sbHNweSdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuXG5jb25zdCBFVkVOVF9BQ1RJVkFURSA9IGBhY3RpdmF0ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLID0gYGNsaWNrJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSdcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcblxuY29uc3QgU0VMRUNUT1JfREFUQV9TUFkgPSAnW2RhdGEtYnMtc3B5PVwic2Nyb2xsXCJdJ1xuY29uc3QgU0VMRUNUT1JfVEFSR0VUX0xJTktTID0gJ1tocmVmXSdcbmNvbnN0IFNFTEVDVE9SX05BVl9MSVNUX0dST1VQID0gJy5uYXYsIC5saXN0LWdyb3VwJ1xuY29uc3QgU0VMRUNUT1JfTkFWX0xJTktTID0gJy5uYXYtbGluaydcbmNvbnN0IFNFTEVDVE9SX05BVl9JVEVNUyA9ICcubmF2LWl0ZW0nXG5jb25zdCBTRUxFQ1RPUl9MSVNUX0lURU1TID0gJy5saXN0LWdyb3VwLWl0ZW0nXG5jb25zdCBTRUxFQ1RPUl9MSU5LX0lURU1TID0gYCR7U0VMRUNUT1JfTkFWX0xJTktTfSwgJHtTRUxFQ1RPUl9OQVZfSVRFTVN9ID4gJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9YFxuY29uc3QgU0VMRUNUT1JfRFJPUERPV04gPSAnLmRyb3Bkb3duJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIG9mZnNldDogbnVsbCwgLy8gVE9ETzogdjYgQGRlcHJlY2F0ZWQsIGtlZXAgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnNcbiAgcm9vdE1hcmdpbjogJzBweCAwcHggLTI1JScsXG4gIHNtb290aFNjcm9sbDogZmFsc2UsXG4gIHRhcmdldDogbnVsbCxcbiAgdGhyZXNob2xkOiBbMC4xLCAwLjUsIDFdXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBvZmZzZXQ6ICcobnVtYmVyfG51bGwpJywgLy8gVE9ETyB2NiBAZGVwcmVjYXRlZCwga2VlcCBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29uc1xuICByb290TWFyZ2luOiAnc3RyaW5nJyxcbiAgc21vb3RoU2Nyb2xsOiAnYm9vbGVhbicsXG4gIHRhcmdldDogJ2VsZW1lbnQnLFxuICB0aHJlc2hvbGQ6ICdhcnJheSdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgU2Nyb2xsU3B5IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIC8vIHRoaXMuX2VsZW1lbnQgaXMgdGhlIG9ic2VydmFibGVzQ29udGFpbmVyIGFuZCBjb25maWcudGFyZ2V0IHRoZSBtZW51IGxpbmtzIHdyYXBwZXJcbiAgICB0aGlzLl90YXJnZXRMaW5rcyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuX29ic2VydmFibGVTZWN0aW9ucyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuX3Jvb3RFbGVtZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9lbGVtZW50KS5vdmVyZmxvd1kgPT09ICd2aXNpYmxlJyA/IG51bGwgOiB0aGlzLl9lbGVtZW50XG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbFxuICAgIHRoaXMuX29ic2VydmVyID0gbnVsbFxuICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YSA9IHtcbiAgICAgIHZpc2libGVFbnRyeVRvcDogMCxcbiAgICAgIHBhcmVudFNjcm9sbFRvcDogMFxuICAgIH1cbiAgICB0aGlzLnJlZnJlc2goKSAvLyBpbml0aWFsaXplXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcygpXG4gICAgdGhpcy5fbWF5YmVFbmFibGVTbW9vdGhTY3JvbGwoKVxuXG4gICAgaWYgKHRoaXMuX29ic2VydmVyKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSB0aGlzLl9nZXROZXdPYnNlcnZlcigpXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHRoaXMuX29ic2VydmFibGVTZWN0aW9ucy52YWx1ZXMoKSkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZShzZWN0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgIC8vIFRPRE86IG9uIHY2IHRhcmdldCBzaG91bGQgYmUgZ2l2ZW4gZXhwbGljaXRseSAmIHJlbW92ZSB0aGUge3RhcmdldDogJ3NzLXRhcmdldCd9IGNhc2VcbiAgICBjb25maWcudGFyZ2V0ID0gZ2V0RWxlbWVudChjb25maWcudGFyZ2V0KSB8fCBkb2N1bWVudC5ib2R5XG5cbiAgICAvLyBUT0RPOiB2NiBPbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zLiBVc2Ugcm9vdE1hcmdpbiBvbmx5XG4gICAgY29uZmlnLnJvb3RNYXJnaW4gPSBjb25maWcub2Zmc2V0ID8gYCR7Y29uZmlnLm9mZnNldH1weCAwcHggLTMwJWAgOiBjb25maWcucm9vdE1hcmdpblxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGhyZXNob2xkID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnLnRocmVzaG9sZCA9IGNvbmZpZy50aHJlc2hvbGQuc3BsaXQoJywnKS5tYXAodmFsdWUgPT4gTnVtYmVyLnBhcnNlRmxvYXQodmFsdWUpKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9tYXliZUVuYWJsZVNtb290aFNjcm9sbCgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5zbW9vdGhTY3JvbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHVucmVnaXN0ZXIgYW55IHByZXZpb3VzIGxpc3RlbmVyc1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fY29uZmlnLnRhcmdldCwgRVZFTlRfQ0xJQ0spXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fY29uZmlnLnRhcmdldCwgRVZFTlRfQ0xJQ0ssIFNFTEVDVE9SX1RBUkdFVF9MSU5LUywgZXZlbnQgPT4ge1xuICAgICAgY29uc3Qgb2JzZXJ2YWJsZVNlY3Rpb24gPSB0aGlzLl9vYnNlcnZhYmxlU2VjdGlvbnMuZ2V0KGV2ZW50LnRhcmdldC5oYXNoKVxuICAgICAgaWYgKG9ic2VydmFibGVTZWN0aW9uKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuX3Jvb3RFbGVtZW50IHx8IHdpbmRvd1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBvYnNlcnZhYmxlU2VjdGlvbi5vZmZzZXRUb3AgLSB0aGlzLl9lbGVtZW50Lm9mZnNldFRvcFxuICAgICAgICBpZiAocm9vdC5zY3JvbGxUbykge1xuICAgICAgICAgIHJvb3Quc2Nyb2xsVG8oeyB0b3A6IGhlaWdodCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaHJvbWUgNjAgZG9lc24ndCBzdXBwb3J0IGBzY3JvbGxUb2BcbiAgICAgICAgcm9vdC5zY3JvbGxUb3AgPSBoZWlnaHRcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgX2dldE5ld09ic2VydmVyKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICByb290OiB0aGlzLl9yb290RWxlbWVudCxcbiAgICAgIHRocmVzaG9sZDogdGhpcy5fY29uZmlnLnRocmVzaG9sZCxcbiAgICAgIHJvb3RNYXJnaW46IHRoaXMuX2NvbmZpZy5yb290TWFyZ2luXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHRoaXMuX29ic2VydmVyQ2FsbGJhY2soZW50cmllcyksIG9wdGlvbnMpXG4gIH1cblxuICAvLyBUaGUgbG9naWMgb2Ygc2VsZWN0aW9uXG4gIF9vYnNlcnZlckNhbGxiYWNrKGVudHJpZXMpIHtcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZW50cnkgPT4gdGhpcy5fdGFyZ2V0TGlua3MuZ2V0KGAjJHtlbnRyeS50YXJnZXQuaWR9YClcbiAgICBjb25zdCBhY3RpdmF0ZSA9IGVudHJ5ID0+IHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YS52aXNpYmxlRW50cnlUb3AgPSBlbnRyeS50YXJnZXQub2Zmc2V0VG9wXG4gICAgICB0aGlzLl9wcm9jZXNzKHRhcmdldEVsZW1lbnQoZW50cnkpKVxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudFNjcm9sbFRvcCA9ICh0aGlzLl9yb290RWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnNjcm9sbFRvcFxuICAgIGNvbnN0IHVzZXJTY3JvbGxzRG93biA9IHBhcmVudFNjcm9sbFRvcCA+PSB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEucGFyZW50U2Nyb2xsVG9wXG4gICAgdGhpcy5fcHJldmlvdXNTY3JvbGxEYXRhLnBhcmVudFNjcm9sbFRvcCA9IHBhcmVudFNjcm9sbFRvcFxuXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICBpZiAoIWVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgICAgdGhpcy5fY2xlYXJBY3RpdmVDbGFzcyh0YXJnZXRFbGVtZW50KGVudHJ5KSlcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBlbnRyeUlzTG93ZXJUaGFuUHJldmlvdXMgPSBlbnRyeS50YXJnZXQub2Zmc2V0VG9wID49IHRoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YS52aXNpYmxlRW50cnlUb3BcbiAgICAgIC8vIGlmIHdlIGFyZSBzY3JvbGxpbmcgZG93biwgcGljayB0aGUgYmlnZ2VyIG9mZnNldFRvcFxuICAgICAgaWYgKHVzZXJTY3JvbGxzRG93biAmJiBlbnRyeUlzTG93ZXJUaGFuUHJldmlvdXMpIHtcbiAgICAgICAgYWN0aXZhdGUoZW50cnkpXG4gICAgICAgIC8vIGlmIHBhcmVudCBpc24ndCBzY3JvbGxlZCwgbGV0J3Mga2VlcCB0aGUgZmlyc3QgdmlzaWJsZSBpdGVtLCBicmVha2luZyB0aGUgaXRlcmF0aW9uXG4gICAgICAgIGlmICghcGFyZW50U2Nyb2xsVG9wKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyBpZiB3ZSBhcmUgc2Nyb2xsaW5nIHVwLCBwaWNrIHRoZSBzbWFsbGVzdCBvZmZzZXRUb3BcbiAgICAgIGlmICghdXNlclNjcm9sbHNEb3duICYmICFlbnRyeUlzTG93ZXJUaGFuUHJldmlvdXMpIHtcbiAgICAgICAgYWN0aXZhdGUoZW50cnkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2luaXRpYWxpemVUYXJnZXRzQW5kT2JzZXJ2YWJsZXMoKSB7XG4gICAgdGhpcy5fdGFyZ2V0TGlua3MgPSBuZXcgTWFwKClcbiAgICB0aGlzLl9vYnNlcnZhYmxlU2VjdGlvbnMgPSBuZXcgTWFwKClcblxuICAgIGNvbnN0IHRhcmdldExpbmtzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9UQVJHRVRfTElOS1MsIHRoaXMuX2NvbmZpZy50YXJnZXQpXG5cbiAgICBmb3IgKGNvbnN0IGFuY2hvciBvZiB0YXJnZXRMaW5rcykge1xuICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIGFuY2hvciBoYXMgYW4gaWQgYW5kIGlzIG5vdCBkaXNhYmxlZFxuICAgICAgaWYgKCFhbmNob3IuaGFzaCB8fCBpc0Rpc2FibGVkKGFuY2hvcikpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb2JzZXJ2YWJsZVNlY3Rpb24gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKGFuY2hvci5oYXNoLCB0aGlzLl9lbGVtZW50KVxuXG4gICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgb2JzZXJ2YWJsZVNlY3Rpb24gZXhpc3RzICYgaXMgdmlzaWJsZVxuICAgICAgaWYgKGlzVmlzaWJsZShvYnNlcnZhYmxlU2VjdGlvbikpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0TGlua3Muc2V0KGFuY2hvci5oYXNoLCBhbmNob3IpXG4gICAgICAgIHRoaXMuX29ic2VydmFibGVTZWN0aW9ucy5zZXQoYW5jaG9yLmhhc2gsIG9ic2VydmFibGVTZWN0aW9uKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9wcm9jZXNzKHRhcmdldCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fY2xlYXJBY3RpdmVDbGFzcyh0aGlzLl9jb25maWcudGFyZ2V0KVxuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldFxuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIHRoaXMuX2FjdGl2YXRlUGFyZW50cyh0YXJnZXQpXG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9BQ1RJVkFURSwgeyByZWxhdGVkVGFyZ2V0OiB0YXJnZXQgfSlcbiAgfVxuXG4gIF9hY3RpdmF0ZVBhcmVudHModGFyZ2V0KSB7XG4gICAgLy8gQWN0aXZhdGUgZHJvcGRvd24gcGFyZW50c1xuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fSVRFTSkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCB0YXJnZXQuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTikpXG4gICAgICAgIC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBsaXN0R3JvdXAgb2YgU2VsZWN0b3JFbmdpbmUucGFyZW50cyh0YXJnZXQsIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQKSkge1xuICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIFNFTEVDVE9SX0xJTktfSVRFTVMpKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY2xlYXJBY3RpdmVDbGFzcyhwYXJlbnQpIHtcbiAgICBwYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSlcblxuICAgIGNvbnN0IGFjdGl2ZU5vZGVzID0gU2VsZWN0b3JFbmdpbmUuZmluZChgJHtTRUxFQ1RPUl9UQVJHRVRfTElOS1N9LiR7Q0xBU1NfTkFNRV9BQ1RJVkV9YCwgcGFyZW50KVxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBhY3RpdmVOb2Rlcykge1xuICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICovXG5cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcbiAgZm9yIChjb25zdCBzcHkgb2YgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1NQWSkpIHtcbiAgICBTY3JvbGxTcHkuZ2V0T3JDcmVhdGVJbnN0YW5jZShzcHkpXG4gIH1cbn0pXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFNjcm9sbFNweSlcblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsU3B5XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IHRhYi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiwgZ2V0RWxlbWVudEZyb21TZWxlY3RvciwgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsIGlzRGlzYWJsZWQgfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3RhYidcbmNvbnN0IERBVEFfS0VZID0gJ2JzLnRhYidcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5cbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfS0VZRE9XTiA9IGBrZXlkb3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBBUlJPV19MRUZUX0tFWSA9ICdBcnJvd0xlZnQnXG5jb25zdCBBUlJPV19SSUdIVF9LRVkgPSAnQXJyb3dSaWdodCdcbmNvbnN0IEFSUk9XX1VQX0tFWSA9ICdBcnJvd1VwJ1xuY29uc3QgQVJST1dfRE9XTl9LRVkgPSAnQXJyb3dEb3duJ1xuXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfRFJPUERPV04gPSAnZHJvcGRvd24nXG5cbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSA9ICcuZHJvcGRvd24tdG9nZ2xlJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fTUVOVSA9ICcuZHJvcGRvd24tbWVudSdcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX0lURU0gPSAnLmRyb3Bkb3duLWl0ZW0nXG5jb25zdCBOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJzpub3QoLmRyb3Bkb3duLXRvZ2dsZSknXG5cbmNvbnN0IFNFTEVDVE9SX1RBQl9QQU5FTCA9ICcubGlzdC1ncm91cCwgLm5hdiwgW3JvbGU9XCJ0YWJsaXN0XCJdJ1xuY29uc3QgU0VMRUNUT1JfT1VURVIgPSAnLm5hdi1pdGVtLCAubGlzdC1ncm91cC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfSU5ORVIgPSBgLm5hdi1saW5rJHtOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFfSwgLmxpc3QtZ3JvdXAtaXRlbSR7Tk9UX1NFTEVDVE9SX0RST1BET1dOX1RPR0dMRX0sIFtyb2xlPVwidGFiXCJdJHtOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFfWBcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXScgLy8gdG9kbzp2NjogY291bGQgYmUgb25seSBgdGFiYFxuY29uc3QgU0VMRUNUT1JfSU5ORVJfRUxFTSA9IGAke1NFTEVDVE9SX0lOTkVSfSwgJHtTRUxFQ1RPUl9EQVRBX1RPR0dMRX1gXG5cbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFX0FDVElWRSA9IGAuJHtDTEFTU19OQU1FX0FDVElWRX1bZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0sIC4ke0NMQVNTX05BTUVfQUNUSVZFfVtkYXRhLWJzLXRvZ2dsZT1cInBpbGxcIl0sIC4ke0NMQVNTX05BTUVfQUNUSVZFfVtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl1gXG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIFRhYiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfVEFCX1BBTkVMKVxuXG4gICAgaWYgKCF0aGlzLl9wYXJlbnQpIHtcbiAgICAgIHJldHVyblxuICAgICAgLy8gdG9kbzogc2hvdWxkIFRocm93IGV4Y2VwdGlvbiBvbiB2NlxuICAgICAgLy8gdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtlbGVtZW50Lm91dGVySFRNTH0gaGFzIG5vdCBhIHZhbGlkIHBhcmVudCAke1NFTEVDVE9SX0lOTkVSX0VMRU19YClcbiAgICB9XG5cbiAgICAvLyBTZXQgdXAgaW5pdGlhbCBhcmlhIGF0dHJpYnV0ZXNcbiAgICB0aGlzLl9zZXRJbml0aWFsQXR0cmlidXRlcyh0aGlzLl9wYXJlbnQsIHRoaXMuX2dldENoaWxkcmVuKCkpXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTiwgZXZlbnQgPT4gdGhpcy5fa2V5ZG93bihldmVudCkpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHNob3coKSB7IC8vIFNob3dzIHRoaXMgZWxlbSBhbmQgZGVhY3RpdmF0ZSB0aGUgYWN0aXZlIHNpYmxpbmcgaWYgZXhpc3RzXG4gICAgY29uc3QgaW5uZXJFbGVtID0gdGhpcy5fZWxlbWVudFxuICAgIGlmICh0aGlzLl9lbGVtSXNBY3RpdmUoaW5uZXJFbGVtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gU2VhcmNoIGZvciBhY3RpdmUgdGFiIG9uIHNhbWUgcGFyZW50IHRvIGRlYWN0aXZhdGUgaXRcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtKClcblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IGFjdGl2ZSA/XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihhY3RpdmUsIEVWRU5UX0hJREUsIHsgcmVsYXRlZFRhcmdldDogaW5uZXJFbGVtIH0pIDpcbiAgICAgIG51bGxcblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKGlubmVyRWxlbSwgRVZFTlRfU0hPVywgeyByZWxhdGVkVGFyZ2V0OiBhY3RpdmUgfSlcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCAoaGlkZUV2ZW50ICYmIGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZGVhY3RpdmF0ZShhY3RpdmUsIGlubmVyRWxlbSlcbiAgICB0aGlzLl9hY3RpdmF0ZShpbm5lckVsZW0sIGFjdGl2ZSlcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2FjdGl2YXRlKGVsZW1lbnQsIHJlbGF0ZWRFbGVtKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICB0aGlzLl9hY3RpdmF0ZShnZXRFbGVtZW50RnJvbVNlbGVjdG9yKGVsZW1lbnQpKSAvLyBTZWFyY2ggYW5kIGFjdGl2YXRlL3Nob3cgdGhlIHByb3BlciBzZWN0aW9uXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpICE9PSAndGFiJykge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKVxuICAgICAgdGhpcy5fdG9nZ2xlRHJvcERvd24oZWxlbWVudCwgdHJ1ZSlcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX1NIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRFbGVtXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpXG4gIH1cblxuICBfZGVhY3RpdmF0ZShlbGVtZW50LCByZWxhdGVkRWxlbSkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIGVsZW1lbnQuYmx1cigpXG5cbiAgICB0aGlzLl9kZWFjdGl2YXRlKGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkpIC8vIFNlYXJjaCBhbmQgZGVhY3RpdmF0ZSB0aGUgc2hvd24gc2VjdGlvbiB0b29cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGZhbHNlKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcbiAgICAgIHRoaXMuX3RvZ2dsZURyb3BEb3duKGVsZW1lbnQsIGZhbHNlKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoZWxlbWVudCwgRVZFTlRfSElEREVOLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRFbGVtIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgZWxlbWVudCwgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKSlcbiAgfVxuXG4gIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgaWYgKCEoW0FSUk9XX0xFRlRfS0VZLCBBUlJPV19SSUdIVF9LRVksIEFSUk9XX1VQX0tFWSwgQVJST1dfRE9XTl9LRVldLmluY2x1ZGVzKGV2ZW50LmtleSkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKS8vIHN0b3BQcm9wYWdhdGlvbi9wcmV2ZW50RGVmYXVsdCBib3RoIGFkZGVkIHRvIHN1cHBvcnQgdXAvZG93biBrZXlzIHdpdGhvdXQgc2Nyb2xsaW5nIHRoZSBwYWdlXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGlzTmV4dCA9IFtBUlJPV19SSUdIVF9LRVksIEFSUk9XX0RPV05fS0VZXS5pbmNsdWRlcyhldmVudC5rZXkpXG4gICAgY29uc3QgbmV4dEFjdGl2ZUVsZW1lbnQgPSBnZXROZXh0QWN0aXZlRWxlbWVudCh0aGlzLl9nZXRDaGlsZHJlbigpLmZpbHRlcihlbGVtZW50ID0+ICFpc0Rpc2FibGVkKGVsZW1lbnQpKSwgZXZlbnQudGFyZ2V0LCBpc05leHQsIHRydWUpXG5cbiAgICBpZiAobmV4dEFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKG5leHRBY3RpdmVFbGVtZW50KS5zaG93KClcbiAgICB9XG4gIH1cblxuICBfZ2V0Q2hpbGRyZW4oKSB7IC8vIGNvbGxlY3Rpb24gb2YgaW5uZXIgZWxlbWVudHNcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JTk5FUl9FTEVNLCB0aGlzLl9wYXJlbnQpXG4gIH1cblxuICBfZ2V0QWN0aXZlRWxlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2hpbGRyZW4oKS5maW5kKGNoaWxkID0+IHRoaXMuX2VsZW1Jc0FjdGl2ZShjaGlsZCkpIHx8IG51bGxcbiAgfVxuXG4gIF9zZXRJbml0aWFsQXR0cmlidXRlcyhwYXJlbnQsIGNoaWxkcmVuKSB7XG4gICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMocGFyZW50LCAncm9sZScsICd0YWJsaXN0JylcblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZChjaGlsZClcbiAgICB9XG4gIH1cblxuICBfc2V0SW5pdGlhbEF0dHJpYnV0ZXNPbkNoaWxkKGNoaWxkKSB7XG4gICAgY2hpbGQgPSB0aGlzLl9nZXRJbm5lckVsZW1lbnQoY2hpbGQpXG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLl9lbGVtSXNBY3RpdmUoY2hpbGQpXG4gICAgY29uc3Qgb3V0ZXJFbGVtID0gdGhpcy5fZ2V0T3V0ZXJFbGVtZW50KGNoaWxkKVxuICAgIGNoaWxkLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGlzQWN0aXZlKVxuXG4gICAgaWYgKG91dGVyRWxlbSAhPT0gY2hpbGQpIHtcbiAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKG91dGVyRWxlbSwgJ3JvbGUnLCAncHJlc2VudGF0aW9uJylcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyhjaGlsZCwgJ3JvbGUnLCAndGFiJylcblxuICAgIC8vIHNldCBhdHRyaWJ1dGVzIHRvIHRoZSByZWxhdGVkIHBhbmVsIHRvb1xuICAgIHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbChjaGlsZClcbiAgfVxuXG4gIF9zZXRJbml0aWFsQXR0cmlidXRlc09uVGFyZ2V0UGFuZWwoY2hpbGQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKGNoaWxkKVxuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKHRhcmdldCwgJ3JvbGUnLCAndGFicGFuZWwnKVxuXG4gICAgaWYgKGNoaWxkLmlkKSB7XG4gICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyh0YXJnZXQsICdhcmlhLWxhYmVsbGVkYnknLCBgIyR7Y2hpbGQuaWR9YClcbiAgICB9XG4gIH1cblxuICBfdG9nZ2xlRHJvcERvd24oZWxlbWVudCwgb3Blbikge1xuICAgIGNvbnN0IG91dGVyRWxlbSA9IHRoaXMuX2dldE91dGVyRWxlbWVudChlbGVtZW50KVxuICAgIGlmICghb3V0ZXJFbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19EUk9QRE9XTikpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZSA9IChzZWxlY3RvciwgY2xhc3NOYW1lKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShzZWxlY3Rvciwgb3V0ZXJFbGVtKVxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSwgb3BlbilcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBDTEFTU19OQU1FX0FDVElWRSlcbiAgICB0b2dnbGUoU0VMRUNUT1JfRFJPUERPV05fTUVOVSwgQ0xBU1NfTkFNRV9TSE9XKVxuICAgIHRvZ2dsZShTRUxFQ1RPUl9EUk9QRE9XTl9JVEVNLCBDTEFTU19OQU1FX0FDVElWRSlcbiAgICBvdXRlckVsZW0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgb3BlbilcbiAgfVxuXG4gIF9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyhlbGVtZW50LCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKCFlbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIF9lbGVtSXNBY3RpdmUoZWxlbSkge1xuICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSlcbiAgfVxuXG4gIC8vIFRyeSB0byBnZXQgdGhlIGlubmVyIGVsZW1lbnQgKHVzdWFsbHkgdGhlIC5uYXYtbGluaylcbiAgX2dldElubmVyRWxlbWVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ubWF0Y2hlcyhTRUxFQ1RPUl9JTk5FUl9FTEVNKSA/IGVsZW0gOiBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0lOTkVSX0VMRU0sIGVsZW0pXG4gIH1cblxuICAvLyBUcnkgdG8gZ2V0IHRoZSBvdXRlciBlbGVtZW50ICh1c3VhbGx5IHRoZSAubmF2LWl0ZW0pXG4gIF9nZXRPdXRlckVsZW1lbnQoZWxlbSkge1xuICAgIHJldHVybiBlbGVtLmNsb3Nlc3QoU0VMRUNUT1JfT1VURVIpIHx8IGVsZW1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykuc2hvdygpXG59KVxuXG4vKipcbiAqIEluaXRpYWxpemUgb24gZm9jdXNcbiAqL1xuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRV9BQ1RJVkUpKSB7XG4gICAgVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudClcbiAgfVxufSlcbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRhYilcblxuZXhwb3J0IGRlZmF1bHQgVGFiXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjIuMSk6IHRvYXN0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgZGVmaW5lSlF1ZXJ5UGx1Z2luLCByZWZsb3cgfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IHsgZW5hYmxlRGlzbWlzc1RyaWdnZXIgfSBmcm9tICcuL3V0aWwvY29tcG9uZW50LWZ1bmN0aW9ucydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3RvYXN0J1xuY29uc3QgREFUQV9LRVkgPSAnYnMudG9hc3QnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuXG5jb25zdCBFVkVOVF9NT1VTRU9WRVIgPSBgbW91c2VvdmVyJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VPVVQgPSBgbW91c2VvdXQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9GT0NVU0lOID0gYGZvY3VzaW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9GT0NVU09VVCA9IGBmb2N1c291dCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX0hJREUgPSAnaGlkZScgLy8gQGRlcHJlY2F0ZWQgLSBrZXB0IGhlcmUgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnXG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgYXV0b2hpZGU6ICdib29sZWFuJyxcbiAgZGVsYXk6ICdudW1iZXInXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgYXV0b2hpZGU6IHRydWUsXG4gIGRlbGF5OiA1MDAwXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIFRvYXN0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgc2hvdygpIHtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XKVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pXG5cbiAgICAgIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9ISURFKSAvLyBAZGVwcmVjYXRlZFxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1csIENMQVNTX05BTUVfU0hPV0lORylcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfSElERSkgLy8gQGRlcHJlY2F0ZWRcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1dJTkcsIENMQVNTX05BTUVfU0hPVylcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2NsZWFyVGltZW91dCgpXG5cbiAgICBpZiAodGhpcy5pc1Nob3duKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBpc1Nob3duKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX21heWJlU2NoZWR1bGVIaWRlKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiB8fCB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSlcbiAgfVxuXG4gIF9vbkludGVyYWN0aW9uKGV2ZW50LCBpc0ludGVyYWN0aW5nKSB7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdtb3VzZW92ZXInOlxuICAgICAgY2FzZSAnbW91c2VvdXQnOlxuICAgICAgICB0aGlzLl9oYXNNb3VzZUludGVyYWN0aW9uID0gaXNJbnRlcmFjdGluZ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZm9jdXNpbic6XG4gICAgICBjYXNlICdmb2N1c291dCc6XG4gICAgICAgIHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBpc0ludGVyYWN0aW5nXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyYWN0aW5nKSB7XG4gICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgbmV4dEVsZW1lbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgPT09IG5leHRFbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQuY29udGFpbnMobmV4dEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpXG4gIH1cblxuICBfc2V0TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRU9WRVIsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIHRydWUpKVxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRU9VVCwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgZmFsc2UpKVxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9GT0NVU0lOLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSlcbiAgfVxuXG4gIF9jbGVhclRpbWVvdXQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpXG4gICAgdGhpcy5fdGltZW91dCA9IG51bGxcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvYXN0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuZW5hYmxlRGlzbWlzc1RyaWdnZXIoVG9hc3QpXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvYXN0KVxuXG5leHBvcnQgZGVmYXVsdCBUb2FzdFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4yLjEpOiBpbmRleC51bWQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9zcmMvYWxlcnQnXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vc3JjL2J1dHRvbidcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL3NyYy9jYXJvdXNlbCdcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL3NyYy9jb2xsYXBzZSdcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL3NyYy9kcm9wZG93bidcbmltcG9ydCBNb2RhbCBmcm9tICcuL3NyYy9tb2RhbCdcbmltcG9ydCBPZmZjYW52YXMgZnJvbSAnLi9zcmMvb2ZmY2FudmFzJ1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9zcmMvcG9wb3ZlcidcbmltcG9ydCBTY3JvbGxTcHkgZnJvbSAnLi9zcmMvc2Nyb2xsc3B5J1xuaW1wb3J0IFRhYiBmcm9tICcuL3NyYy90YWInXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9zcmMvdG9hc3QnXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3NyYy90b29sdGlwJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFsZXJ0LFxuICBCdXR0b24sXG4gIENhcm91c2VsLFxuICBDb2xsYXBzZSxcbiAgRHJvcGRvd24sXG4gIE1vZGFsLFxuICBPZmZjYW52YXMsXG4gIFBvcG92ZXIsXG4gIFNjcm9sbFNweSxcbiAgVGFiLFxuICBUb2FzdCxcbiAgVG9vbHRpcFxufVxuIiwiJChmdW5jdGlvbiAoKSB7XHJcbiAgICB0b2dnbGVDb25uZWN0aW9uU3RyaW5nQW5kUHJlZml4KCk7XHJcblxyXG4gICAgLy8gU2hvdyBoaWRlIHRoZSBjb25uZWN0aW9uIHN0cmluZyB3aGVuIGEgcHJvdmlkZXIgaXMgc2VsZWN0ZWRcclxuICAgICQoXCIjRGF0YWJhc2VQcm92aWRlclwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRvZ2dsZUNvbm5lY3Rpb25TdHJpbmdBbmRQcmVmaXgoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJlZnJlc2ggdGhlIHJlY2lwZSBkZXNjcmlwdGlvblxyXG4gICAgJChcIiNyZWNpcGVzIGRpdiBhXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZWZyZXNoRGVzY3JpcHRpb24oJCh0aGlzKSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG4vLyBTaG93IG9yIGhpZGUgdGhlIGNvbm5lY3Rpb24gc3RyaW5nIG9yIHRhYmxlIHByZWZpeCBzZWN0aW9uIHdoZW4gdGhlIGRhdGFiYXNlIHByb3ZpZGVyIGlzIHNlbGVjdGVkXHJcbmZ1bmN0aW9uIHRvZ2dsZUNvbm5lY3Rpb25TdHJpbmdBbmRQcmVmaXgoKSB7XHJcbiAgICAkKFwiI0RhdGFiYXNlUHJvdmlkZXIgb3B0aW9uOnNlbGVjdGVkXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykuZGF0YShcImNvbm5lY3Rpb24tc3RyaW5nXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiXHJcbiAgICAgICAgICAgID8gJChcIi5jb25uZWN0aW9uU3RyaW5nXCIpLnNob3coKVxyXG4gICAgICAgICAgICA6ICQoXCIuY29ubmVjdGlvblN0cmluZ1wiKS5oaWRlKCk7XHJcblxyXG4gICAgICAgICQodGhpcykuZGF0YShcInRhYmxlLXByZWZpeFwiKS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIlxyXG4gICAgICAgICAgICA/ICQoXCIudGFibGVQcmVmaXhcIikuc2hvdygpXHJcbiAgICAgICAgICAgIDogJChcIi50YWJsZVByZWZpeFwiKS5oaWRlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJCh0aGlzKS5kYXRhKFwiY29ubmVjdGlvbi1zdHJpbmdcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCJcclxuICAgICAgICAgICAgPyAkKFwiLnB3ZFwiKS5hdHRyKCdyZXF1aXJlZCcsICdyZXF1aXJlZCcpXHJcbiAgICAgICAgICAgIDogJChcIi5wd2RcIikucmVtb3ZlQXR0cigncmVxdWlyZWQnKTtcclxuXHJcbiAgICAgICAgJChcIiNjb25uZWN0aW9uU3RyaW5nSGludFwiKS50ZXh0KCQodGhpcykuZGF0YShcImNvbm5lY3Rpb24tc3RyaW5nLXNhbXBsZVwiKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gU2hvdyB0aGUgcmVjaXBlIGRlc2NyaXB0aW9uXHJcbmZ1bmN0aW9uIHJlZnJlc2hEZXNjcmlwdGlvbih0YXJnZXQpIHtcclxuICAgIHZhciByZWNpcGVOYW1lID0gJCh0YXJnZXQpLmRhdGEoXCJyZWNpcGUtbmFtZVwiKTtcclxuICAgIHZhciByZWNpcGVEaXNwbGF5TmFtZSA9ICQodGFyZ2V0KS5kYXRhKFwicmVjaXBlLWRpc3BsYXktbmFtZVwiKTtcclxuICAgIHZhciByZWNpcGVEZXNjcmlwdGlvbiA9ICQodGFyZ2V0KS5kYXRhKFwicmVjaXBlLWRlc2NyaXB0aW9uXCIpO1xyXG4gICAgJChcIiNyZWNpcGVCdXR0b25cIikudGV4dChyZWNpcGVEaXNwbGF5TmFtZSk7XHJcbiAgICAkKFwiI1JlY2lwZU5hbWVcIikudmFsKHJlY2lwZU5hbWUpO1xyXG4gICAgJChcIiNyZWNpcGVCdXR0b25cIikuYXR0cihcInRpdGxlXCIsIHJlY2lwZURlc2NyaXB0aW9uKTtcclxuICAgICQoXCIjcmVjaXBlQnV0dG9uXCIpLmZvY3VzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldExvY2FsaXphdGlvblVybCgpIHtcclxuICAgIHZhciBjdWx0dXJlc0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VsdHVyZXNMaXN0Jyk7XHJcbiAgICB3aW5kb3cubG9jYXRpb24gPSBjdWx0dXJlc0xpc3Qub3B0aW9uc1tjdWx0dXJlc0xpc3Quc2VsZWN0ZWRJbmRleF0uZGF0YXNldC51cmw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZVBhc3N3b3JkVmlzaWJpbGl0eShwYXNzd29yZEN0bCwgdG9nZ2xlUGFzc3dvcmRDdGwpXHJcbntcclxuICAgIC8vIHRvZ2dsZSB0aGUgdHlwZSBhdHRyaWJ1dGVcclxuICAgIHR5cGUgPSBwYXNzd29yZEN0bC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ3Bhc3N3b3JkJyA/ICd0ZXh0JyA6ICdwYXNzd29yZCc7XHJcbiAgICBwYXNzd29yZEN0bC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCB0eXBlKTtcclxuXHJcbiAgICAvLyB0b2dnbGUgdGhlIGV5ZSBzbGFzaCBpY29uXHJcbiAgICBpY29uID0gdG9nZ2xlUGFzc3dvcmRDdGwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaWNvbicpWzBdO1xyXG4gICAgaWYoaWNvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicpKXsgLy8gaWYgdGhlIGljb24gaXMgcmVuZGVyZWQgYXMgYSBzdmdcclxuICAgICAgICB0eXBlID09PSAncGFzc3dvcmQnID8gaWNvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdleWUnKSA6IGljb24uc2V0QXR0cmlidXRlKCdkYXRhLWljb24nLCAnZXllLXNsYXNoJyk7XHJcbiAgICB9XHJcbiAgICBlbHNleyAvLyBpZiB0aGUgaWNvbiBpcyBzdGlsbCBhIDxpPiBlbGVtZW50XHJcbiAgICAgICAgdHlwZSA9PT0gJ3Bhc3N3b3JkJyA/IGljb24uY2xhc3NMaXN0LnJlbW92ZSgnZmEtZXllLXNsYXNoJykgOiBpY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2ZhLWV5ZScpO1xyXG4gICAgICAgIHR5cGUgPT09ICdwYXNzd29yZCcgPyBpY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLWV5ZScpIDogaWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1leWUtc2xhc2gnKTtcclxuICAgIH1cclxufVxyXG4iLCIoZnVuY3Rpb24gKCQpIHtcclxuXHJcbiAgICAkLmZuLnN0cmVuZ3RoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICBtaW5MZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIHVwcGVyQ2FzZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvd2VyQ2FzZTogZmFsc2UsXHJcbiAgICAgICAgICAgIG51bWJlcnM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzcGVjaWFsY2hhcnM6IGZhbHNlLFxyXG4gICAgICAgICAgICB0YXJnZXQ6ICcnLFxyXG4gICAgICAgICAgICBzdHlsZTogJydcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIHZhciBjYXBpdGFsbGV0dGVycyA9IDA7XHJcbiAgICAgICAgdmFyIGxvd2VybGV0dGVycyA9IDA7XHJcbiAgICAgICAgdmFyIG51bWJlcnMgPSAwO1xyXG4gICAgICAgIHZhciBzcGVjaWFsY2hhcnMgPSAwO1xyXG5cclxuICAgICAgICB2YXIgdXBwZXJDYXNlID0gbmV3IFJlZ0V4cCgnW0EtWl0nKTtcclxuICAgICAgICB2YXIgbG93ZXJDYXNlID0gbmV3IFJlZ0V4cCgnW2Etel0nKTtcclxuICAgICAgICB2YXIgbnVtYmVyID0gbmV3IFJlZ0V4cCgnWzAtOV0nKTtcclxuICAgICAgICB2YXIgc3BlY2lhbGNoYXIgPSBuZXcgUmVnRXhwKCdbXkEtWmEtejAtOV0nKTtcclxuXHJcbiAgICAgICAgdmFyIHZhbGlkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNyZWF0ZVByb2dyZXNzQmFyKDAsICcnKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UGVyY2VudGFnZShhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGIgLyBhKSAqIDEwMCkudG9GaXhlZCgwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExldmVsKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJiZy1zdWNjZXNzXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSA1MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYmctd2FybmluZ1wiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnOyAvLyBncmF5ZWRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFwiYmctZGFuZ2VyXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1N0cmVuZ3RoKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBtaW5MZW5ndGggPSB2YWx1ZS5sZW5ndGggPj0gc2V0dGluZ3MubWluTGVuZ3RoID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGNhcGl0YWxsZXR0ZXJzID0gIXNldHRpbmdzLnVwcGVyQ2FzZSB8fCB2YWx1ZS5tYXRjaCh1cHBlckNhc2UpID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGxvd2VybGV0dGVycyA9ICFzZXR0aW5ncy5sb3dlckNhc2UgfHwgdmFsdWUubWF0Y2gobG93ZXJDYXNlKSA/IDEgOiAwO1xyXG4gICAgICAgICAgICBudW1iZXJzID0gIXNldHRpbmdzLm51bWJlcnMgfHwgdmFsdWUubWF0Y2gobnVtYmVyKSA/IDEgOiAwO1xyXG4gICAgICAgICAgICBzcGVjaWFsY2hhcnMgPSAhc2V0dGluZ3Muc3BlY2lhbGNoYXJzIHx8IHZhbHVlLm1hdGNoKHNwZWNpYWxjaGFyKSA/IDEgOiAwO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRvdGFsID0gbWluTGVuZ3RoICsgY2FwaXRhbGxldHRlcnMgKyBsb3dlcmxldHRlcnMgKyBudW1iZXJzICsgc3BlY2lhbGNoYXJzO1xyXG4gICAgICAgICAgICB2YXIgcGVyY2VudGFnZSA9IGdldFBlcmNlbnRhZ2UoNSwgdG90YWwpO1xyXG5cclxuICAgICAgICAgICAgdmFsaWQgPSBwZXJjZW50YWdlID49IDEwMDtcclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UsIGdldExldmVsKHBlcmNlbnRhZ2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UsIGxldmVsKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9ICQoJzxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiIHZhbHVlPVwiJyArIHBlcmNlbnRhZ2UgKyAnXCIgc3R5bGU9XCInICsgc2V0dGluZ3Muc3R5bGUgKyAnXCIgbWF4PVwiMTAwXCIgYXJpYS1kZXNjcmliZWRieT1cIlwiPjxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgJyArIGxldmVsICsgJ1wiIHJvbGU9XCJwcm9ncmVzcy1iYXJcIiBzdHlsZT1cIndpZHRoOiAnICsgcGVyY2VudGFnZSArICclO1wiPjwvZGl2PjwvZGl2PicpO1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChzZXR0aW5ncy50YXJnZXQpO1xyXG4gICAgICAgICAgICB0YXJnZXQuZW1wdHkoKTtcclxuICAgICAgICAgICAgdGFyZ2V0LmFwcGVuZChlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJpbmQoJ2tleXVwIGtleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2hlY2tTdHJlbmd0aCgkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJpbmQoJ2Ryb3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2hlY2tTdHJlbmd0aChldmVudC5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dFwiKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucGFyZW50cygnZm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn0oalF1ZXJ5KSk7XHJcbiAgICAiXX0=
